

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Fri Aug 11 04:34:04 2017

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82                           	psect	pa_nodes,global,class=CODE,delta=1
    83  0000                     tblptrh	equ	0xFF7
    84                           tblptrl	equ	0xFF6
    85                           tablat	equ	0xFF5
    86                           prodh	equ	0xFF4
    87                           prodl	equ	0xFF3
    88                           intcon	equ	0xFF2
    89                           intcon2	equ	0xFF1
    90                           wreg	equ	0xFE8
    91                           indf1	equ	0xFE7
    92                           fsr1h	equ	0xFE2
    93                           fsr1l	equ	0xFE1
    94                           indf2	equ	0xFDF
    95                           postinc2	equ	0xFDE
    96                           postdec2	equ	0xFDD
    97                           plusw2	equ	0xFDB
    98                           fsr2h	equ	0xFDA
    99                           fsr2l	equ	0xFD9
   100                           status	equ	0xFD8
   101                           
   102                           	psect	smallconst
   103  000200                     __psmallconst:
   104                           	opt stack 0
   105  000200  00                 	db	0
   106  000201                     _segmentFont:
   107                           	opt stack 0
   108  000201  00                 	db	0
   109  000202  A0                 	db	160
   110  000203  22                 	db	34
   111  000204  36                 	db	54
   112  000205  4B                 	db	75
   113  000206  5A                 	db	90
   114  000207  6F                 	db	111
   115  000208  02                 	db	2
   116  000209  4E                 	db	78
   117  00020A  78                 	db	120
   118  00020B  63                 	db	99
   119  00020C  07                 	db	7
   120  00020D  18                 	db	24
   121  00020E  01                 	db	1
   122  00020F  80                 	db	128
   123  000210  25                 	db	37
   124  000211  7E                 	db	126
   125  000212  30                 	db	48
   126  000213  6D                 	db	109
   127  000214  79                 	db	121
   128  000215  33                 	db	51
   129  000216  5B                 	db	91
   130  000217  5F                 	db	95
   131  000218  70                 	db	112
   132  000219  7F                 	db	127
   133  00021A  7B                 	db	123
   134  00021B  09                 	db	9
   135  00021C  19                 	db	25
   136  00021D  43                 	db	67
   137  00021E  41                 	db	65
   138  00021F  61                 	db	97
   139  000220  65                 	db	101
   140  000221  7D                 	db	125
   141  000222  77                 	db	119
   142  000223  1F                 	db	31
   143  000224  4E                 	db	78
   144  000225  3D                 	db	61
   145  000226  4F                 	db	79
   146  000227  47                 	db	71
   147  000228  5E                 	db	94
   148  000229  37                 	db	55
   149  00022A  30                 	db	48
   150  00022B  38                 	db	56
   151  00022C  57                 	db	87
   152  00022D  0E                 	db	14
   153  00022E  54                 	db	84
   154  00022F  76                 	db	118
   155  000230  7E                 	db	126
   156  000231  67                 	db	103
   157  000232  73                 	db	115
   158  000233  66                 	db	102
   159  000234  5B                 	db	91
   160  000235  0F                 	db	15
   161  000236  3E                 	db	62
   162  000237  3A                 	db	58
   163  000238  2A                 	db	42
   164  000239  37                 	db	55
   165  00023A  3B                 	db	59
   166  00023B  69                 	db	105
   167  00023C  4E                 	db	78
   168  00023D  13                 	db	19
   169  00023E  78                 	db	120
   170  00023F  62                 	db	98
   171  000240  08                 	db	8
   172  000241  02                 	db	2
   173  000242  77                 	db	119
   174  000243  1F                 	db	31
   175  000244  4E                 	db	78
   176  000245  3D                 	db	61
   177  000246  4F                 	db	79
   178  000247  47                 	db	71
   179  000248  5E                 	db	94
   180  000249  37                 	db	55
   181  00024A  30                 	db	48
   182  00024B  38                 	db	56
   183  00024C  57                 	db	87
   184  00024D  0E                 	db	14
   185  00024E  54                 	db	84
   186  00024F  76                 	db	118
   187  000250  7E                 	db	126
   188  000251  67                 	db	103
   189  000252  73                 	db	115
   190  000253  66                 	db	102
   191  000254  5B                 	db	91
   192  000255  0F                 	db	15
   193  000256  3E                 	db	62
   194  000257  3A                 	db	58
   195  000258  2A                 	db	42
   196  000259  37                 	db	55
   197  00025A  3B                 	db	59
   198  00025B  69                 	db	105
   199  00025C  00                 	db	0
   200  00025D  00                 	db	0
   201  00025E  00                 	db	0
   202  00025F  00                 	db	0
   203  000260  00                 	db	0
   204  000261  00                 	db	0
   205  000262  00                 	db	0
   206  000263  00                 	db	0
   207  000264  00                 	db	0
   208  000265  00                 	db	0
   209  000266                     __end_of_segmentFont:
   210                           	opt stack 0
   211  000266                     _table:
   212                           	opt stack 0
   213  000266  00                 	db	0
   214  000267  FF                 	db	255
   215  000268  01                 	db	1
   216  000269  00                 	db	0
   217  00026A  01                 	db	1
   218  00026B  00                 	db	0
   219  00026C  00                 	db	0
   220  00026D  FF                 	db	255
   221  00026E  FF                 	db	255
   222  00026F  00                 	db	0
   223  000270  00                 	db	0
   224  000271  01                 	db	1
   225  000272  00                 	db	0
   226  000273  01                 	db	1
   227  000274  FF                 	db	255
   228  000275  00                 	db	0
   229  000276                     __end_of_table:
   230                           	opt stack 0
   231  000276                     _digitsArray:
   232                           	opt stack 0
   233  000276  7E                 	db	126
   234  000277  30                 	db	48
   235  000278  6D                 	db	109
   236  000279  79                 	db	121
   237  00027A  33                 	db	51
   238  00027B  5B                 	db	91
   239  00027C  5F                 	db	95
   240  00027D  70                 	db	112
   241  00027E  7F                 	db	127
   242  00027F  73                 	db	115
   243  000280                     __end_of_digitsArray:
   244                           	opt stack 0
   245  0000                     _TMR3	set	4018
   246  0000                     _ADCON0bits	set	4034
   247  0000                     _ANSEL	set	3966
   248  0000                     _ANSELH	set	3967
   249  0000                     _CCP1CON	set	4029
   250  0000                     _CCPR1L	set	4030
   251  0000                     _CM1CON0bits	set	3949
   252  0000                     _CM2CON0bits	set	3947
   253  0000                     _ECCP1ASbits	set	4022
   254  0000                     _EEADR	set	4009
   255  0000                     _EECON1bits	set	4006
   256  0000                     _EECON2	set	4007
   257  0000                     _EEDATA	set	4008
   258  0000                     _INTCON2bits	set	4081
   259  0000                     _INTCONbits	set	4082
   260  0000                     _IOCBbits	set	3962
   261  0000                     _IPR1bits	set	3999
   262  0000                     _IPR2bits	set	4002
   263  0000                     _LATA	set	3977
   264  0000                     _LATB	set	3978
   265  0000                     _LATC	set	3979
   266  0000                     _OSCCON2bits	set	4050
   267  0000                     _OSCCONbits	set	4051
   268  0000                     _OSCTUNEbits	set	3995
   269  0000                     _PIE1bits	set	3997
   270  0000                     _PIE2bits	set	4000
   271  0000                     _PIR1bits	set	3998
   272  0000                     _PIR2bits	set	4001
   273  0000                     _PORTA	set	3968
   274  0000                     _PORTAbits	set	3968
   275  0000                     _PORTBbits	set	3969
   276  0000                     _PORTCbits	set	3970
   277  0000                     _PR2	set	4043
   278  0000                     _PSTRCON	set	4025
   279  0000                     _PSTRCONbits	set	4025
   280  0000                     _RCONbits	set	4048
   281  0000                     _RCSTAbits	set	4011
   282  0000                     _SRCON0bits	set	3944
   283  0000                     _SSPCON1bits	set	4038
   284  0000                     _T0CON	set	4053
   285  0000                     _T0CONbits	set	4053
   286  0000                     _T1CON	set	4045
   287  0000                     _T1CONbits	set	4045
   288  0000                     _T2CON	set	4042
   289  0000                     _T3CON	set	4017
   290  0000                     _T3CONbits	set	4017
   291  0000                     _TMR0H	set	4055
   292  0000                     _TMR0L	set	4054
   293  0000                     _TMR1H	set	4047
   294  0000                     _TMR1L	set	4046
   295  0000                     _TRISA	set	3986
   296  0000                     _TRISB	set	3987
   297  0000                     _TRISBbits	set	3987
   298  0000                     _TRISC	set	3988
   299  0000                     _VREFCON0bits	set	4026
   300  0000                     _VREFCON1bits	set	4027
   301  0000                     _WPUA	set	3959
   302  0000                     _WPUB	set	3960
   303  0000                     _WPUBbits	set	3960
   304  0000                     _LATB7	set	31831
   305  0000                     _LATC1	set	31833
   306  0000                     _LATC3	set	31835
   307  0000                     _LATC6	set	31838
   308  0000                     _LATC7	set	31839
   309  0000                     _TRISB7	set	31903
   310  0000                     _TRISC0	set	31904
   311  0000                     _TRISC1	set	31905
   312  0000                     _TRISC3	set	31907
   313  0000                     _TRISC5	set	31909
   314  0000                     _TRISC6	set	31910
   315  0000                     _TRISC7	set	31911
   316  0000                     _PORTB	set	3969
   317  0000                     _PORTC	set	3970
   318  000280                     __stringdata:
   319                           	opt stack 0
   320  000280                     STR_2:
   321  000280  53                 	db	83	;'S'
   322  000281  54                 	db	84	;'T'
   323  000282  4F                 	db	79	;'O'
   324  000283  50                 	db	80	;'P'
   325  000284  50                 	db	80	;'P'
   326  000285  45                 	db	69	;'E'
   327  000286  44                 	db	68	;'D'
   328  000287  00                 	db	0
   329  000288                     STR_1:
   330  000288  52                 	db	82	;'R'
   331  000289  45                 	db	69	;'E'
   332  00028A  41                 	db	65	;'A'
   333  00028B  44                 	db	68	;'D'
   334  00028C  59                 	db	89	;'Y'
   335  00028D  00                 	db	0
   336  00028E                     STR_5:
   337  00028E  50                 	db	80	;'P'
   338  00028F  57                 	db	87	;'W'
   339  000290  52                 	db	82	;'R'
   340  000291  00                 	db	0
   341  000292                     STR_4:
   342  000292  53                 	db	83	;'S'
   343  000293  45                 	db	69	;'E'
   344  000294  54                 	db	84	;'T'
   345  000295  00                 	db	0
   346  000296                     STR_3:
   347  000296  46                 	db	70	;'F'
   348  000297  49                 	db	73	;'I'
   349  000298  4E                 	db	78	;'N'
   350  000299  00                 	db	0
   351  00029A                     __end_of__stringdata:
   352                           	opt stack 0
   353                           
   354                           ; #config settings
   355  00029A  00                 	db	0	; dummy byte at the end
   356  0000                     tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           prodh	equ	0xFF4
   360                           prodl	equ	0xFF3
   361                           intcon	equ	0xFF2
   362                           intcon2	equ	0xFF1
   363                           wreg	equ	0xFE8
   364                           indf1	equ	0xFE7
   365                           fsr1h	equ	0xFE2
   366                           fsr1l	equ	0xFE1
   367                           indf2	equ	0xFDF
   368                           postinc2	equ	0xFDE
   369                           postdec2	equ	0xFDD
   370                           plusw2	equ	0xFDB
   371                           fsr2h	equ	0xFDA
   372                           fsr2l	equ	0xFD9
   373                           status	equ	0xFD8
   374                           
   375                           	psect	nvCOMRAM
   376  000045                     __pnvCOMRAM:
   377                           	opt stack 0
   378  000045                     _coder:
   379                           	opt stack 0
   380  000045                     	ds	6
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           prodh	equ	0xFF4
   385                           prodl	equ	0xFF3
   386                           intcon	equ	0xFF2
   387                           intcon2	equ	0xFF1
   388                           wreg	equ	0xFE8
   389                           indf1	equ	0xFE7
   390                           fsr1h	equ	0xFE2
   391                           fsr1l	equ	0xFE1
   392                           indf2	equ	0xFDF
   393                           postinc2	equ	0xFDE
   394                           postdec2	equ	0xFDD
   395                           plusw2	equ	0xFDB
   396                           fsr2h	equ	0xFDA
   397                           fsr2l	equ	0xFD9
   398                           status	equ	0xFD8
   399                           
   400                           	psect	cinit
   401  000F64                     __pcinit:
   402                           	opt stack 0
   403  000F64                     start_initialization:
   404                           	opt stack 0
   405  000F64                     __initialization:
   406                           	opt stack 0
   407                           
   408                           ; Clear objects allocated to COMRAM (40 bytes)
   409  000F64  EE00  F001         	lfsr	0,__pbssCOMRAM
   410  000F68  0E28               	movlw	40
   411  000F6A                     clear_0:
   412  000F6A  6AEE               	clrf	postinc0,c
   413  000F6C  06E8               	decf	wreg,f,c
   414  000F6E  E1FD               	bnz	clear_0
   415  000F70                     end_of_initialization:
   416                           	opt stack 0
   417  000F70                     __end_of__initialization:
   418                           	opt stack 0
   419  000F70  0E00               	movlw	low (__Lmediumconst shr (0+16))
   420  000F72  6EF8               	movwf	tblptru,c
   421  000F74  0100               	movlb	0
   422  000F76  EF52  F002         	goto	_main	;jump to C main() function
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           prodh	equ	0xFF4
   428                           prodl	equ	0xFF3
   429                           intcon	equ	0xFF2
   430                           intcon2	equ	0xFF1
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           indf1	equ	0xFE7
   434                           fsr1h	equ	0xFE2
   435                           fsr1l	equ	0xFE1
   436                           indf2	equ	0xFDF
   437                           postinc2	equ	0xFDE
   438                           postdec2	equ	0xFDD
   439                           plusw2	equ	0xFDB
   440                           fsr2h	equ	0xFDA
   441                           fsr2l	equ	0xFD9
   442                           status	equ	0xFD8
   443                           
   444                           	psect	bssCOMRAM
   445  000001                     __pbssCOMRAM:
   446                           	opt stack 0
   447  000001                     _maxBuffer:
   448                           	opt stack 0
   449  000001                     	ds	3
   450  000004                     _time:
   451                           	opt stack 0
   452  000004                     	ds	3
   453  000007                     Buzzer@count:
   454                           	opt stack 0
   455  000007                     	ds	2
   456  000009                     HandleButtons@holdCount:
   457                           	opt stack 0
   458  000009                     	ds	2
   459  00000B                     SetTimer@holdTime:
   460                           	opt stack 0
   461  00000B                     	ds	2
   462  00000D                     _buts:
   463                           	opt stack 0
   464  00000D                     	ds	2
   465  00000F                     _mainCount:
   466                           	opt stack 0
   467  00000F                     	ds	2
   468  000011                     _pCount:
   469                           	opt stack 0
   470  000011                     	ds	2
   471  000013                     _t3Count:
   472                           	opt stack 0
   473  000013                     	ds	2
   474  000015                     _tmrCount:
   475                           	opt stack 0
   476  000015                     	ds	2
   477  000017                     Buzzer@step:
   478                           	opt stack 0
   479  000017                     	ds	1
   480  000018                     EncoderISR@ticks:
   481                           	opt stack 0
   482  000018                     	ds	1
   483  000019                     _flag:
   484                           	opt stack 0
   485  000019                     	ds	1
   486  00001A                     _hwflag:
   487                           	opt stack 0
   488  00001A                     	ds	1
   489  00001B                     _mainState:
   490                           	opt stack 0
   491  00001B                     	ds	1
   492  00001C                     _signal:
   493                           	opt stack 0
   494  00001C                     	ds	1
   495  00001D                     _encoderButton:
   496                           	opt stack 0
   497  00001D                     	ds	6
   498  000023                     _ledButton:
   499                           	opt stack 0
   500  000023                     	ds	6
   501                           tblptru	equ	0xFF8
   502                           tblptrh	equ	0xFF7
   503                           tblptrl	equ	0xFF6
   504                           tablat	equ	0xFF5
   505                           prodh	equ	0xFF4
   506                           prodl	equ	0xFF3
   507                           intcon	equ	0xFF2
   508                           intcon2	equ	0xFF1
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           indf1	equ	0xFE7
   512                           fsr1h	equ	0xFE2
   513                           fsr1l	equ	0xFE1
   514                           indf2	equ	0xFDF
   515                           postinc2	equ	0xFDE
   516                           postdec2	equ	0xFDD
   517                           plusw2	equ	0xFDB
   518                           fsr2h	equ	0xFDA
   519                           fsr2l	equ	0xFD9
   520                           status	equ	0xFD8
   521                           
   522                           	psect	cstackBANK0
   523  000060                     __pcstackBANK0:
   524                           	opt stack 0
   525  000060                     ?___lwmod:
   526                           	opt stack 0
   527  000060                     ScrollMessage@digit:
   528                           	opt stack 0
   529  000060                     ___awdiv@counter:
   530                           	opt stack 0
   531  000060                     GetLastTime@value:
   532                           	opt stack 0
   533  000060                     ___lwmod@dividend:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x0
   537  000060                     	ds	1
   538  000061                     ___awdiv@sign:
   539                           	opt stack 0
   540  000061                     ScrollMessage@delayCount:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x1
   544  000061                     	ds	1
   545  000062                     GetLastTime@scale:
   546                           	opt stack 0
   547  000062                     ___awdiv@quotient:
   548                           	opt stack 0
   549  000062                     ___lwmod@divisor:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x2
   553  000062                     	ds	1
   554  000063                     ScrollMessage@string:
   555                           	opt stack 0
   556  000063                     GetLastTime@read:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x3
   560  000063                     	ds	1
   561  000064                     ?___awmod:
   562                           	opt stack 0
   563  000064                     ScrollMessage@x:
   564                           	opt stack 0
   565  000064                     GetLastTime@i:
   566                           	opt stack 0
   567  000064                     ___lbmod@dividend:
   568                           	opt stack 0
   569  000064                     ___lwmod@counter:
   570                           	opt stack 0
   571  000064                     ___awmod@dividend:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x4
   575  000064                     	ds	1
   576  000065                     ScrollMessage@i:
   577                           	opt stack 0
   578  000065                     ___lbmod@counter:
   579                           	opt stack 0
   580  000065                     DisplayValue@number:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x5
   584  000065                     	ds	1
   585  000066                     ___lbmod@rem:
   586                           	opt stack 0
   587  000066                     ___awmod@divisor:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x6
   591  000066                     	ds	1
   592  000067                     ??_DisplayValue:
   593                           
   594                           ; 0 bytes @ 0x7
   595  000067                     	ds	1
   596  000068                     DisplayValue@hund:
   597                           	opt stack 0
   598  000068                     SaveTime@time:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x8
   602  000068                     	ds	1
   603  000069                     DisplayValue@tens:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x9
   607  000069                     	ds	1
   608  00006A                     DisplayValue@ones:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0xA
   612  00006A                     	ds	1
   613  00006B                     SetTimer@wait:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0xB
   617  00006B                     	ds	2
   618  00006D                     SetTimer@switchState:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0xD
   622  00006D                     	ds	1
   623  00006E                     SetTimer@amount:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0xE
   627  00006E                     	ds	1
   628                           tblptru	equ	0xFF8
   629                           tblptrh	equ	0xFF7
   630                           tblptrl	equ	0xFF6
   631                           tablat	equ	0xFF5
   632                           prodh	equ	0xFF4
   633                           prodl	equ	0xFF3
   634                           intcon	equ	0xFF2
   635                           intcon2	equ	0xFF1
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           indf1	equ	0xFE7
   639                           fsr1h	equ	0xFE2
   640                           fsr1l	equ	0xFE1
   641                           indf2	equ	0xFDF
   642                           postinc2	equ	0xFDE
   643                           postdec2	equ	0xFDD
   644                           plusw2	equ	0xFDB
   645                           fsr2h	equ	0xFDA
   646                           fsr2l	equ	0xFD9
   647                           status	equ	0xFD8
   648                           
   649                           	psect	cstackCOMRAM
   650  000029                     __pcstackCOMRAM:
   651                           	opt stack 0
   652  000029                     ??_NewButtonCheck:
   653  000029                     ??_EncoderISR:
   654  000029                     ?i1___lwmod:
   655                           	opt stack 0
   656  000029                     i1___lwmod@dividend:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x0
   660  000029                     	ds	2
   661  00002B                     EncoderISR@temp:
   662                           	opt stack 0
   663  00002B                     NewButtonCheck@i:
   664                           	opt stack 0
   665  00002B                     i1___lwmod@divisor:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x2
   669  00002B                     	ds	2
   670  00002D                     i1___lwmod@counter:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x4
   674  00002D                     	ds	1
   675  00002E                     ??_IntLow:
   676                           
   677                           ; 0 bytes @ 0x5
   678  00002E                     	ds	9
   679  000037                     i2MAX7219_ShiftByte@value:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0xE
   683  000037                     	ds	1
   684  000038                     i2MAX7219_ShiftByte@i:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0xF
   688  000038                     	ds	1
   689  000039                     i2MAX7219_SetRegister@data:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x10
   693  000039                     	ds	1
   694  00003A                     i2MAX7219_SetRegister@reg:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x11
   698  00003A                     	ds	1
   699  00003B                     i2MAX7219_SyncBuffer@i:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x12
   703  00003B                     	ds	1
   704  00003C                     ??_IntHigh:
   705  00003C                     
   706                           ; 0 bytes @ 0x13
   707  00003C                     	ds	2
   708  00003E                     ??_DisplayMsg:
   709  00003E                     ?___wmul:
   710                           	opt stack 0
   711  00003E                     ?___awdiv:
   712                           	opt stack 0
   713  00003E                     ?___lwdiv:
   714                           	opt stack 0
   715  00003E                     DisplayDP@digit:
   716                           	opt stack 0
   717  00003E                     ShiftDisplayLeft@x:
   718                           	opt stack 0
   719  00003E                     DisplayClear@x:
   720                           	opt stack 0
   721  00003E                     ClearButtonsAndTimers@i:
   722                           	opt stack 0
   723  00003E                     MAX7219_ShiftByte@value:
   724                           	opt stack 0
   725  00003E                     Read_b_eep@badd:
   726                           	opt stack 0
   727  00003E                     Write_b_eep@badd:
   728                           	opt stack 0
   729  00003E                     ___wmul@multiplier:
   730                           	opt stack 0
   731  00003E                     ___awdiv@dividend:
   732                           	opt stack 0
   733  00003E                     ___lwdiv@dividend:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x15
   737  00003E                     	ds	1
   738  00003F                     MAX7219_ShiftByte@i:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x16
   742  00003F                     	ds	1
   743  000040                     ?_GetLastTime:
   744                           	opt stack 0
   745  000040                     MAX7219_SetRegister@data:
   746                           	opt stack 0
   747  000040                     Write_b_eep@bdat:
   748                           	opt stack 0
   749  000040                     ___wmul@multiplicand:
   750                           	opt stack 0
   751  000040                     ___awdiv@divisor:
   752                           	opt stack 0
   753  000040                     ___lwdiv@divisor:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x17
   757  000040                     	ds	1
   758  000041                     DisplayMsg@fValue:
   759                           	opt stack 0
   760  000041                     MAX7219_SetRegister@reg:
   761                           	opt stack 0
   762  000041                     Write_b_eep@GIE_BIT_VAL:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x18
   766  000041                     	ds	1
   767  000042                     DisplayMsg@msg:
   768                           	opt stack 0
   769  000042                     MAX7219_SetDecode@digits:
   770                           	opt stack 0
   771  000042                     MAX7219_SetScanLimit@limit:
   772                           	opt stack 0
   773  000042                     MAX7219_SetIntensity@intensity:
   774                           	opt stack 0
   775  000042                     MAX7219_Clear@i:
   776                           	opt stack 0
   777  000042                     MAX7219_SyncBuffer@i:
   778                           	opt stack 0
   779  000042                     ___awmod@counter:
   780                           	opt stack 0
   781  000042                     ___lbmod@divisor:
   782                           	opt stack 0
   783  000042                     HandleButtons@wait:
   784                           	opt stack 0
   785  000042                     ___wmul@product:
   786                           	opt stack 0
   787  000042                     ___lwdiv@quotient:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x19
   791  000042                     	ds	1
   792  000043                     ??_ScrollMessage:
   793  000043                     DisplayMsg@i:
   794                           	opt stack 0
   795  000043                     MAX7219_Clear@i_1175:
   796                           	opt stack 0
   797  000043                     ___awmod@sign:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x1A
   801  000043                     	ds	1
   802  000044                     SaveTime@value:
   803                           	opt stack 0
   804  000044                     ___lwdiv@counter:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x1B
   808  000044                     	ds	1
   809  000045                     tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           prodh	equ	0xFF4
   814                           prodl	equ	0xFF3
   815                           intcon	equ	0xFF2
   816                           intcon2	equ	0xFF1
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           indf1	equ	0xFE7
   820                           fsr1h	equ	0xFE2
   821                           fsr1l	equ	0xFE1
   822                           indf2	equ	0xFDF
   823                           postinc2	equ	0xFDE
   824                           postdec2	equ	0xFDD
   825                           plusw2	equ	0xFDB
   826                           fsr2h	equ	0xFDA
   827                           fsr2l	equ	0xFD9
   828                           status	equ	0xFD8
   829                           
   830                           ; 0 bytes @ 0x1C
   831 ;;
   832 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   833 ;;
   834 ;; *************** function _main *****************
   835 ;; Defined at:
   836 ;;		line 40 in file "main.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;		None               void
   843 ;; Registers used:
   844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1
   850 ;;      Params:         0       0       0
   851 ;;      Locals:         0       0       0
   852 ;;      Temps:          0       0       0
   853 ;;      Totals:         0       0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels required when called:   15
   856 ;; This function calls:
   857 ;;		_Buzzer
   858 ;;		_ClearButtonsAndTimers
   859 ;;		_ClearFlags
   860 ;;		_DisplayOn
   861 ;;		_FlashDisplay
   862 ;;		_HandleButtons
   863 ;;		_InitDisplay
   864 ;;		_InitSystem
   865 ;;		_NoTimer
   866 ;;		_ScrollMessage
   867 ;;		_SetTimer
   868 ;;		_TimerOn
   869 ;; This function is called by:
   870 ;;		Startup code after reset
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text0
   875  0004A4                     __ptext0:
   876                           	opt stack 0
   877  0004A4                     _main:
   878                           	opt stack 16
   879                           
   880                           ;main.c: 44: (INTCONbits.GIEH = 0);
   881                           
   882                           ;incstack = 0
   883  0004A4  9EF2               	bcf	intcon,7,c	;volatile
   884                           
   885                           ;main.c: 46: InitSystem();
   886  0004A6  EC28  F006         	call	_InitSystem	;wreg free
   887                           
   888                           ;main.c: 48: InitDisplay();
   889  0004AA  EC51  F008         	call	_InitDisplay	;wreg free
   890                           
   891                           ;main.c: 50: INTCONbits.GIEH = 1; INTCONbits.GIEL = 1;
   892  0004AE  8EF2               	bsf	intcon,7,c	;volatile
   893  0004B0  8CF2               	bsf	intcon,6,c	;volatile
   894                           
   895                           ;main.c: 52: flag.ready = 1;
   896  0004B2  8C19               	bsf	_flag,6,c	;volatile
   897                           
   898                           ;main.c: 53: ClearButtonsAndTimers();
   899  0004B4  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
   900  0004B8  D05A               	goto	l3222
   901  0004BA                     l278:
   902                           
   903                           ;main.c: 59: if (flag.ready) {
   904  0004BA  AC19               	btfss	_flag,6,c	;volatile
   905  0004BC  D006               	goto	l3170
   906                           
   907                           ;main.c: 60: flag.ready = 0;
   908  0004BE  9C19               	bcf	_flag,6,c	;volatile
   909                           
   910                           ;main.c: 61: ScrollMessage("READY");
   911  0004C0  0E88               	movlw	STR_1& (0+255)
   912  0004C2  EC32  F003         	call	_ScrollMessage
   913                           
   914                           ; BSR set to: 0
   915                           ;main.c: 62: pCount = tmrCount + 750;
   916  0004C6  D865               	call	PL16	;call to abstracted procedure
   917                           
   918                           ;main.c: 63: }else if (pCount < tmrCount){
   919  0004C8  D006               	goto	l280
   920  0004CA                     l3170:
   921  0004CA  5015               	movf	_tmrCount,w,c	;volatile
   922  0004CC  5C11               	subwf	_pCount,w,c
   923  0004CE  5016               	movf	_tmrCount+1,w,c	;volatile
   924  0004D0  5812               	subwfb	_pCount+1,w,c
   925  0004D2  A0D8               	btfss	status,0,c
   926                           
   927                           ;main.c: 64: flag.ready = 1;
   928  0004D4  8C19               	bsf	_flag,6,c	;volatile
   929  0004D6                     l280:
   930                           
   931                           ;main.c: 65: }
   932                           ;main.c: 67: if(signal.scrollbreak){
   933  0004D6  A81C               	btfss	_signal,4,c	;volatile
   934  0004D8  D059               	goto	l3224
   935                           
   936                           ;main.c: 68: signal.scrollbreak = 0;
   937  0004DA  981C               	bcf	_signal,4,c	;volatile
   938                           
   939                           ;main.c: 69: ClearButtonsAndTimers();
   940  0004DC  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
   941                           
   942                           ;main.c: 70: mainState = SET_TIMER;
   943  0004E0  0E01               	movlw	1
   944  0004E2  6E1B               	movwf	_mainState,c	;volatile
   945  0004E4  D053               	goto	l3224
   946  0004E6                     l3180:
   947                           
   948                           ;main.c: 75: ClearFlags();
   949  0004E6  EC4C  F008         	call	_ClearFlags	;wreg free
   950                           
   951                           ;main.c: 76: SetTimer();
   952  0004EA  EC4E  F001         	call	_SetTimer	;wreg free
   953                           
   954                           ;main.c: 77: break;
   955  0004EE  D04E               	goto	l3224
   956  0004F0                     l3184:
   957                           
   958                           ;main.c: 80: FlashDisplay();
   959  0004F0  EC7F  F007         	call	_FlashDisplay	;wreg free
   960                           
   961                           ;main.c: 81: break;
   962  0004F4  D04B               	goto	l3224
   963  0004F6                     l3186:
   964                           
   965                           ;main.c: 84: TimerOn();
   966  0004F6  EC25  F005         	call	_TimerOn	;wreg free
   967                           
   968                           ;main.c: 85: break;
   969  0004FA  D048               	goto	l3224
   970  0004FC                     l3188:
   971                           
   972                           ;main.c: 88: FlashDisplay();
   973  0004FC  EC7F  F007         	call	_FlashDisplay	;wreg free
   974                           
   975                           ;main.c: 89: Buzzer();
   976  000500  EC52  F005         	call	_Buzzer	;wreg free
   977                           
   978                           ;main.c: 90: break;
   979  000504  D043               	goto	l3224
   980  000506                     l288:
   981                           
   982                           ;main.c: 93: if (hwflag.disp_on == 0)
   983  000506  A21A               	btfss	_hwflag,1,c	;volatile
   984                           
   985                           ;main.c: 94: DisplayOn();
   986  000508  EC59  F008         	call	_DisplayOn	;wreg free
   987                           
   988                           ;main.c: 95: if (hwflag.buzzer)
   989  00050C  A41A               	btfss	_hwflag,2,c	;volatile
   990  00050E  D002               	goto	l290
   991                           
   992                           ;main.c: 96: do {hwflag.buzzer = 0;PSTRCONbits.STRA = 0;} while(0);
   993  000510  941A               	bcf	_hwflag,2,c	;volatile
   994  000512  90B9               	bcf	4025,0,c	;volatile
   995  000514                     l290:
   996                           
   997                           ;main.c: 98: if (flag.stop) {
   998  000514  AA19               	btfss	_flag,5,c	;volatile
   999  000516  D006               	goto	l3200
  1000                           
  1001                           ;main.c: 99: flag.stop = 0;
  1002  000518  9A19               	bcf	_flag,5,c	;volatile
  1003                           
  1004                           ;main.c: 100: ScrollMessage("STOPPED");
  1005  00051A  0E80               	movlw	STR_2& (0+255)
  1006  00051C  EC32  F003         	call	_ScrollMessage
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;main.c: 101: pCount = tmrCount + 750;
  1010  000520  D838               	call	PL16	;call to abstracted procedure
  1011                           
  1012                           ;main.c: 102: }else if (pCount < tmrCount) {
  1013  000522  D006               	goto	l294
  1014  000524                     l3200:
  1015  000524  5015               	movf	_tmrCount,w,c	;volatile
  1016  000526  5C11               	subwf	_pCount,w,c
  1017  000528  5016               	movf	_tmrCount+1,w,c	;volatile
  1018  00052A  5812               	subwfb	_pCount+1,w,c
  1019  00052C  A0D8               	btfss	status,0,c
  1020                           
  1021                           ;main.c: 103: flag.stop = 1;
  1022  00052E  8A19               	bsf	_flag,5,c	;volatile
  1023  000530                     l294:
  1024                           
  1025                           ;main.c: 104: }
  1026                           ;main.c: 106: if (signal.scrollbreak) {
  1027  000530  A81C               	btfss	_signal,4,c	;volatile
  1028  000532  D02C               	goto	l3224
  1029                           
  1030                           ;main.c: 107: signal.scrollbreak = 0;
  1031  000534  981C               	bcf	_signal,4,c	;volatile
  1032                           
  1033                           ;main.c: 108: flag.stop = 1;
  1034  000536  8A19               	bsf	_flag,5,c	;volatile
  1035  000538  D029               	goto	l3224
  1036  00053A                     l297:
  1037                           
  1038                           ;main.c: 113: if (signal.no_timer) {
  1039  00053A  AA1C               	btfss	_signal,5,c	;volatile
  1040  00053C  D013               	goto	l3218
  1041                           
  1042                           ;main.c: 114: signal.no_timer = 0;
  1043  00053E  9A1C               	bcf	_signal,5,c	;volatile
  1044  000540                     l3208:
  1045                           
  1046                           ;main.c: 115: pCount = tmrCount + 500;
  1047  000540  0EF4               	movlw	244
  1048  000542  2415               	addwf	_tmrCount,w,c	;volatile
  1049  000544  6E11               	movwf	_pCount,c
  1050  000546  0E01               	movlw	1
  1051  000548  2016               	addwfc	_tmrCount+1,w,c	;volatile
  1052  00054A  6E12               	movwf	_pCount+1,c
  1053                           
  1054                           ;main.c: 116: while (pCount > tmrCount) {
  1055  00054C  D003               	goto	l299
  1056  00054E                     l300:
  1057                           
  1058                           ;main.c: 117: if (ledButton.down || ledButton.latched)
  1059  00054E  A023               	btfss	_ledButton,0,c	;volatile
  1060  000550  B223               	btfsc	_ledButton,1,c	;volatile
  1061  000552  D7F6               	goto	l3208
  1062  000554                     l299:
  1063  000554  5011               	movf	_pCount,w,c
  1064  000556  5C15               	subwf	_tmrCount,w,c	;volatile
  1065  000558  5012               	movf	_pCount+1,w,c
  1066  00055A  5816               	subwfb	_tmrCount+1,w,c	;volatile
  1067  00055C  E3F8               	bnc	l300
  1068                           
  1069                           ;main.c: 119: }
  1070                           ;main.c: 120: ClearButtonsAndTimers();
  1071  00055E  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  1072                           
  1073                           ;main.c: 121: flag.on = 1;
  1074  000562  8619               	bsf	_flag,3,c	;volatile
  1075  000564                     l3218:
  1076                           
  1077                           ;main.c: 122: }
  1078                           ;main.c: 123: NoTimer();
  1079  000564  ECDE  F007         	call	_NoTimer	;wreg free
  1080                           
  1081                           ;main.c: 125: break;
  1082  000568  D011               	goto	l3224
  1083  00056A                     l305:
  1084                           
  1085                           ;main.c: 127: mainState = 0;
  1086  00056A  6A1B               	clrf	_mainState,c	;volatile
  1087                           
  1088                           ;main.c: 128: break;
  1089  00056C  D00F               	goto	l3224
  1090  00056E                     l3222:
  1091  00056E  501B               	movf	_mainState,w,c	;volatile
  1092                           
  1093                           ; Switch size 1, requested type "space"
  1094                           ; Number of cases is 7, Range of values is 0 to 6
  1095                           ; switch strategies available:
  1096                           ; Name         Instructions Cycles
  1097                           ; simple_byte           22    12 (average)
  1098                           ;	Chosen strategy is simple_byte
  1099  000570  E0A4               	bz	l278
  1100  000572  0A01               	xorlw	1	; case 1
  1101  000574  E0B8               	bz	l3180
  1102  000576  0A03               	xorlw	3	; case 2
  1103  000578  E0BB               	bz	l3184
  1104  00057A  0A01               	xorlw	1	; case 3
  1105  00057C  E0BC               	bz	l3186
  1106  00057E  0A07               	xorlw	7	; case 4
  1107  000580  E0BD               	bz	l3188
  1108  000582  0A01               	xorlw	1	; case 5
  1109  000584  E0C0               	bz	l288
  1110  000586  0A03               	xorlw	3	; case 6
  1111  000588  E0D8               	bz	l297
  1112  00058A  D7EF               	goto	l305
  1113  00058C                     l3224:
  1114                           
  1115                           ;main.c: 131: HandleButtons();
  1116  00058C  ECD0  F002         	call	_HandleButtons	;wreg free
  1117  000590  D7EE               	goto	l3222
  1118  000592                     __end_of_main:
  1119                           	opt stack 0
  1120  000592                     PL16:
  1121                           	opt stack 16
  1122  000592  0EEE               	movlw	238
  1123  000594  2415               	addwf	_tmrCount,w,c	;volatile
  1124  000596  6E11               	movwf	_pCount,c
  1125  000598  0E02               	movlw	2
  1126  00059A  2016               	addwfc	_tmrCount+1,w,c	;volatile
  1127  00059C  6E12               	movwf	_pCount+1,c
  1128  00059E  0012               	return	
  1129  0005A0                     __end_ofPL16:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           prodh	equ	0xFF4
  1136                           prodl	equ	0xFF3
  1137                           intcon	equ	0xFF2
  1138                           intcon2	equ	0xFF1
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           indf1	equ	0xFE7
  1142                           fsr1h	equ	0xFE2
  1143                           fsr1l	equ	0xFE1
  1144                           indf2	equ	0xFDF
  1145                           postinc2	equ	0xFDE
  1146                           postdec2	equ	0xFDD
  1147                           plusw2	equ	0xFDB
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _TimerOn *****************
  1153 ;; Defined at:
  1154 ;;		line 136 in file "main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;		None               void
  1161 ;; Registers used:
  1162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1
  1168 ;;      Params:         0       0       0
  1169 ;;      Locals:         0       0       0
  1170 ;;      Temps:          0       0       0
  1171 ;;      Totals:         0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:   11
  1175 ;; This function calls:
  1176 ;;		_DisplayMsg
  1177 ;;		_DisplayValue
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text1
  1184  000A4A                     __ptext1:
  1185                           	opt stack 0
  1186  000A4A                     _TimerOn:
  1187                           	opt stack 19
  1188                           
  1189                           ;main.c: 137: if (flag.on) {
  1190                           
  1191                           ;incstack = 0
  1192  000A4A  A619               	btfss	_flag,3,c	;volatile
  1193  000A4C  D009               	goto	l311
  1194                           
  1195                           ;main.c: 138: flag.on = 0;
  1196  000A4E  9619               	bcf	_flag,3,c	;volatile
  1197                           
  1198                           ;main.c: 139: flag.secTick = 0;
  1199  000A50  9019               	bcf	_flag,0,c	;volatile
  1200  000A52                     l312:
  1201  000A52  A019               	btfss	_flag,0,c	;volatile
  1202  000A54  D7FE               	goto	l312
  1203                           
  1204                           ;main.c: 141: do {hwflag.relay = 1;LATB7 = 1;} while(0);
  1205  000A56  861A               	bsf	_hwflag,3,c	;volatile
  1206  000A58  8E8A               	bsf	3978,7,c	;volatile
  1207                           
  1208                           ;main.c: 142: flag.secTick = 0;
  1209  000A5A  9019               	bcf	_flag,0,c	;volatile
  1210                           
  1211                           ;main.c: 143: flag.blinkled = 1;
  1212  000A5C  8E19               	bsf	_flag,7,c	;volatile
  1213                           
  1214                           ;main.c: 144: return;
  1215  000A5E  0012               	return	
  1216  000A60                     l311:
  1217                           
  1218                           ;main.c: 145: }
  1219                           ;main.c: 147: if (flag.secTick == 1) {
  1220  000A60  A019               	btfss	_flag,0,c	;volatile
  1221  000A62  D00A               	goto	l3082
  1222                           
  1223                           ;main.c: 148: flag.secTick = 0;
  1224  000A64  9019               	bcf	_flag,0,c	;volatile
  1225                           
  1226                           ;main.c: 149: mainCount -= 1;
  1227  000A66  060F               	decf	_mainCount,f,c	;volatile
  1228  000A68  A0D8               	btfss	status,0,c
  1229  000A6A  0610               	decf	_mainCount+1,f,c	;volatile
  1230                           
  1231                           ;main.c: 150: DisplayValue(mainCount);
  1232  000A6C  C00F  F065         	movff	_mainCount,DisplayValue@number	;volatile
  1233  000A70  C010  F066         	movff	_mainCount+1,DisplayValue@number+1	;volatile
  1234  000A74  EC31  F004         	call	_DisplayValue	;wreg free
  1235  000A78                     l3082:
  1236                           
  1237                           ;main.c: 151: }
  1238                           ;main.c: 152: if (mainCount <= 0) {
  1239  000A78  5010               	movf	_mainCount+1,w,c	;volatile
  1240  000A7A  0A80               	xorlw	128
  1241  000A7C  6EF3               	movwf	prodl,c
  1242  000A7E  0E80               	movlw	128
  1243  000A80  5CF3               	subwf	prodl,w,c
  1244  000A82  0E01               	movlw	1
  1245  000A84  B4D8               	btfsc	status,2,c
  1246  000A86  5C0F               	subwf	_mainCount,w,c	;volatile
  1247  000A88  B0D8               	btfsc	status,0,c
  1248  000A8A  0012               	return	
  1249                           
  1250                           ;main.c: 153: do {hwflag.relay = 0;LATB7 = 0;} while(0);
  1251  000A8C  961A               	bcf	_hwflag,3,c	;volatile
  1252  000A8E  9E8A               	bcf	3978,7,c	;volatile
  1253                           
  1254                           ;main.c: 154: flag.blinkled = 0;
  1255  000A90  9E19               	bcf	_flag,7,c	;volatile
  1256                           
  1257                           ;main.c: 155: do {hwflag.bled = 1;LATC1 = 1;} while(0);
  1258  000A92  881A               	bsf	_hwflag,4,c	;volatile
  1259  000A94  828B               	bsf	3979,1,c	;volatile
  1260                           
  1261                           ;main.c: 156: signal.buzzer = 1;
  1262  000A96  801C               	bsf	_signal,0,c	;volatile
  1263                           
  1264                           ;main.c: 157: DisplayMsg("FIN");
  1265  000A98  0E96               	movlw	STR_3& (0+255)
  1266  000A9A  ECC6  F005         	call	_DisplayMsg
  1267                           
  1268                           ;main.c: 158: mainState = TIMER_OVER;
  1269  000A9E  0E04               	movlw	4
  1270  000AA0  6E1B               	movwf	_mainState,c	;volatile
  1271  000AA2  0C04               	retlw	4
  1272  000AA4                     __end_of_TimerOn:
  1273                           	opt stack 0
  1274                           tblptru	equ	0xFF8
  1275                           tblptrh	equ	0xFF7
  1276                           tblptrl	equ	0xFF6
  1277                           tablat	equ	0xFF5
  1278                           prodh	equ	0xFF4
  1279                           prodl	equ	0xFF3
  1280                           intcon	equ	0xFF2
  1281                           intcon2	equ	0xFF1
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           indf1	equ	0xFE7
  1285                           fsr1h	equ	0xFE2
  1286                           fsr1l	equ	0xFE1
  1287                           indf2	equ	0xFDF
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           plusw2	equ	0xFDB
  1291                           fsr2h	equ	0xFDA
  1292                           fsr2l	equ	0xFD9
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _SetTimer *****************
  1296 ;; Defined at:
  1297 ;;		line 109 in file "user.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  wait            2   11[BANK0 ] unsigned int 
  1302 ;;  amount          1   14[BANK0 ] char 
  1303 ;;  switchState     1   13[BANK0 ] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;		None               void
  1306 ;; Registers used:
  1307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1
  1313 ;;      Params:         0       0       0
  1314 ;;      Locals:         0       4       0
  1315 ;;      Temps:          0       0       0
  1316 ;;      Totals:         0       4       0
  1317 ;;Total ram usage:        4 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:   14
  1320 ;; This function calls:
  1321 ;;		_ClearButtonsAndTimers
  1322 ;;		_DisplayDP
  1323 ;;		_DisplayMsg
  1324 ;;		_DisplayValue
  1325 ;;		_GetLastTime
  1326 ;;		_SaveTime
  1327 ;;		_ScrollMessage
  1328 ;;		___awdiv
  1329 ;;		___awmod
  1330 ;;		___wmul
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text2
  1337  00029C                     __ptext2:
  1338                           	opt stack 0
  1339  00029C                     _SetTimer:
  1340                           	opt stack 16
  1341                           
  1342                           ;user.c: 111: uint8_t switchState = 2;
  1343                           
  1344                           ;incstack = 0
  1345  00029C  0E02               	movlw	2
  1346  00029E  0100               	movlb	0	; () banked
  1347  0002A0  6F6D               	movwf	SetTimer@switchState& (0+255),b
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;user.c: 113: uint16_t wait;
  1351                           ;user.c: 114: static uint16_t holdTime = 0;
  1352                           ;user.c: 116: mainCount = GetLastTime();
  1353                           
  1354                           ; BSR set to: 0
  1355  0002A2  EC7C  F005         	call	_GetLastTime	;wreg free
  1356  0002A6  C040  F00F         	movff	?_GetLastTime,_mainCount	;volatile
  1357  0002AA  C041  F010         	movff	?_GetLastTime+1,_mainCount+1	;volatile
  1358  0002AE                     l2956:
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;user.c: 118: wait = tmrCount + 100;
  1362  0002AE  0E64               	movlw	100
  1363  0002B0  2415               	addwf	_tmrCount,w,c	;volatile
  1364  0002B2  6F6B               	movwf	SetTimer@wait& (0+255),b
  1365  0002B4  0E00               	movlw	0
  1366  0002B6  2016               	addwfc	_tmrCount+1,w,c	;volatile
  1367  0002B8  6F6C               	movwf	(SetTimer@wait+1)& (0+255),b
  1368                           
  1369                           ;user.c: 119: while (wait > tmrCount) {
  1370  0002BA  D002               	goto	l768
  1371  0002BC                     l769:
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;user.c: 120: if (ledButton.latched)
  1375  0002BC  B223               	btfsc	_ledButton,1,c	;volatile
  1376  0002BE  D7F7               	goto	l2956
  1377  0002C0                     l768:
  1378                           
  1379                           ; BSR set to: 0
  1380  0002C0  516B               	movf	SetTimer@wait& (0+255),w,b
  1381  0002C2  5C15               	subwf	_tmrCount,w,c	;volatile
  1382  0002C4  516C               	movf	(SetTimer@wait+1)& (0+255),w,b
  1383  0002C6  5816               	subwfb	_tmrCount+1,w,c	;volatile
  1384  0002C8  E3F9               	bnc	l769
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;user.c: 122: }
  1388                           ;user.c: 123: ScrollMessage("SET");
  1389  0002CA  0E92               	movlw	STR_4& (0+255)
  1390  0002CC  EC32  F003         	call	_ScrollMessage
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;user.c: 124: amount = mainCount % 10;
  1394  0002D0  C00F  F064         	movff	_mainCount,___awmod@dividend	;volatile
  1395  0002D4  C010  F065         	movff	_mainCount+1,___awmod@dividend+1	;volatile
  1396  0002D8  6B67               	clrf	(___awmod@divisor+1)& (0+255),b
  1397  0002DA  0E0A               	movlw	10
  1398  0002DC  6F66               	movwf	___awmod@divisor& (0+255),b
  1399  0002DE  ECB9  F004         	call	___awmod	;wreg free
  1400  0002E2  5164               	movf	?___awmod& (0+255),w,b
  1401  0002E4  6F6E               	movwf	SetTimer@amount& (0+255),b
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;user.c: 126: ClearButtonsAndTimers();
  1405  0002E6  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  1406  0002EA                     l2966:
  1407                           
  1408                           ;user.c: 130: DisplayValue(mainCount);
  1409  0002EA  C00F  F065         	movff	_mainCount,DisplayValue@number	;volatile
  1410  0002EE  C010  F066         	movff	_mainCount+1,DisplayValue@number+1	;volatile
  1411  0002F2  EC31  F004         	call	_DisplayValue	;wreg free
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;user.c: 132: if (flag.halfsec)
  1415  0002F6  A419               	btfss	_flag,2,c	;volatile
  1416  0002F8  D09D               	goto	l3046
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;user.c: 133: DisplayDP(switchState);
  1420  0002FA  516D               	movf	SetTimer@switchState& (0+255),w,b
  1421  0002FC  EC18  F008         	call	_DisplayDP
  1422  000300  D099               	goto	l3046
  1423  000302                     l775:
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;user.c: 138: if (encoderButton.pressed) {
  1427  000302  A41D               	btfss	_encoderButton,2,c	;volatile
  1428  000304  D018               	goto	l776
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;user.c: 139: ClearButtonsAndTimers();
  1432  000306  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  1433                           
  1434                           ;user.c: 140: switchState = 1;
  1435  00030A  0E01               	movlw	1
  1436  00030C  0100               	movlb	0	; () banked
  1437  00030E  6F6D               	movwf	SetTimer@switchState& (0+255),b
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;user.c: 141: amount = (mainCount / 10) % 10;
  1441  000310  6A41               	clrf	___awdiv@divisor+1,c
  1442  000312  0E0A               	movlw	10
  1443  000314  6E40               	movwf	___awdiv@divisor,c
  1444  000316  C00F  F03E         	movff	_mainCount,___awdiv@dividend	;volatile
  1445  00031A  C010  F03F         	movff	_mainCount+1,___awdiv@dividend+1	;volatile
  1446  00031E  ECE9  F003         	call	___awdiv	;wreg free
  1447  000322  C03E  F064         	movff	?___awdiv,___awmod@dividend
  1448  000326  C03F  F065         	movff	?___awdiv+1,___awmod@dividend+1
  1449  00032A  6B67               	clrf	(___awmod@divisor+1)& (0+255),b
  1450  00032C  0E0A               	movlw	10
  1451  00032E  6F66               	movwf	___awmod@divisor& (0+255),b
  1452  000330  ECB9  F004         	call	___awmod	;wreg free
  1453  000334  D05D               	goto	L4
  1454  000336                     l776:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;user.c: 143: }
  1458                           ;user.c: 145: if (flag.encode == 1) {
  1459  000336  A219               	btfss	_flag,1,c	;volatile
  1460  000338  D084               	goto	l777
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;user.c: 146: flag.encode = 0;
  1464  00033A  9219               	bcf	_flag,1,c	;volatile
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;user.c: 147: amount += coder.direction;
  1468  00033C  5048               	movf	_coder+3,w,c	;volatile
  1469  00033E  276E               	addwf	SetTimer@amount& (0+255),f,b
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;user.c: 148: if (amount < 0) {
  1473  000340  AF6E               	btfss	SetTimer@amount& (0+255),7,b
  1474  000342  D003               	goto	l2988
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;user.c: 149: amount = 9;
  1478  000344  0E09               	movlw	9
  1479  000346  6F6E               	movwf	SetTimer@amount& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;user.c: 150: mainCount += 9;
  1483  000348  D032               	goto	L5
  1484  00034A                     l2988:
  1485                           
  1486                           ; BSR set to: 0
  1487  00034A  516E               	movf	SetTimer@amount& (0+255),w,b
  1488  00034C  0A80               	xorlw	128
  1489  00034E  0F76               	addlw	-138
  1490  000350  E305               	bnc	l2994
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;user.c: 152: amount = 0;
  1494  000352  6B6E               	clrf	SetTimer@amount& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;user.c: 153: mainCount -= 9;
  1498  000354  0EF7               	movlw	247
  1499  000356  D034               	goto	L7
  1500  000358                     L2:
  1501  000358  2210               	addwfc	_mainCount+1,f,c	;volatile
  1502                           
  1503                           ;user.c: 154: }else {
  1504  00035A  D073               	goto	l777
  1505  00035C                     l2994:
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;user.c: 155: mainCount += (int16_t) (coder.direction);
  1509  00035C  5048               	movf	_coder+3,w,c	;volatile
  1510  00035E  260F               	addwf	_mainCount,f,c	;volatile
  1511  000360  0E00               	movlw	0
  1512  000362  BE48               	btfsc	_coder+3,7,c	;volatile
  1513  000364                     L3:
  1514  000364  0EFF               	movlw	255
  1515  000366  D7F8               	goto	L2
  1516  000368                     l783:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;user.c: 161: if (encoderButton.pressed) {
  1520  000368  A41D               	btfss	_encoderButton,2,c	;volatile
  1521  00036A  D017               	goto	l784
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;user.c: 162: ClearButtonsAndTimers();
  1525  00036C  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  1526                           
  1527                           ;user.c: 163: switchState = 0;
  1528  000370  0100               	movlb	0	; () banked
  1529  000372  6B6D               	clrf	SetTimer@switchState& (0+255),b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;user.c: 164: amount = (mainCount / 100) % 10;
  1533  000374  6A41               	clrf	___awdiv@divisor+1,c
  1534  000376  0E64               	movlw	100
  1535  000378  6E40               	movwf	___awdiv@divisor,c
  1536  00037A  C00F  F03E         	movff	_mainCount,___awdiv@dividend	;volatile
  1537  00037E  C010  F03F         	movff	_mainCount+1,___awdiv@dividend+1	;volatile
  1538  000382  ECE9  F003         	call	___awdiv	;wreg free
  1539  000386  C03E  F064         	movff	?___awdiv,___awmod@dividend
  1540  00038A  C03F  F065         	movff	?___awdiv+1,___awmod@dividend+1
  1541  00038E  6B67               	clrf	(___awmod@divisor+1)& (0+255),b
  1542  000390  0E0A               	movlw	10
  1543  000392  6F66               	movwf	___awmod@divisor& (0+255),b
  1544  000394  ECB9  F004         	call	___awmod	;wreg free
  1545  000398  D02B               	goto	L4
  1546  00039A                     l784:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;user.c: 166: }
  1550                           ;user.c: 168: if (flag.encode == 1) {
  1551  00039A  A219               	btfss	_flag,1,c	;volatile
  1552  00039C  D052               	goto	l777
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;user.c: 169: flag.encode = 0;
  1556  00039E  9219               	bcf	_flag,1,c	;volatile
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;user.c: 170: amount += coder.direction;
  1560  0003A0  5048               	movf	_coder+3,w,c	;volatile
  1561  0003A2  276E               	addwf	SetTimer@amount& (0+255),f,b
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;user.c: 171: if (amount < 0) {
  1565  0003A4  AF6E               	btfss	SetTimer@amount& (0+255),7,b
  1566  0003A6  D006               	goto	l3012
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;user.c: 172: amount = 9;
  1570  0003A8  0E09               	movlw	9
  1571  0003AA  6F6E               	movwf	SetTimer@amount& (0+255),b
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;user.c: 173: mainCount += 90;
  1575  0003AC  0E5A               	movlw	90
  1576  0003AE                     L5:
  1577  0003AE  260F               	addwf	_mainCount,f,c	;volatile
  1578  0003B0  0E00               	movlw	0
  1579  0003B2  D7D2               	goto	L2
  1580  0003B4                     l3012:
  1581                           
  1582                           ; BSR set to: 0
  1583  0003B4  516E               	movf	SetTimer@amount& (0+255),w,b
  1584  0003B6  0A80               	xorlw	128
  1585  0003B8  0F76               	addlw	-138
  1586  0003BA  E304               	bnc	l3018
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;user.c: 175: amount = 0;
  1590  0003BC  6B6E               	clrf	SetTimer@amount& (0+255),b
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;user.c: 176: mainCount -= 90;
  1594  0003BE  0EA6               	movlw	166
  1595  0003C0                     L7:
  1596  0003C0  260F               	addwf	_mainCount,f,c	;volatile
  1597  0003C2  D7D0               	goto	L3
  1598  0003C4                     l3018:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;user.c: 178: mainCount += (int16_t) (10 * coder.direction);
  1602  0003C4  D868               	call	PL14	;call to abstracted procedure
  1603  0003C6  0E0A               	movlw	10
  1604  0003C8  6E40               	movwf	___wmul@multiplicand,c
  1605  0003CA  ECC3  F006         	call	___wmul	;wreg free
  1606  0003CE  D02E               	goto	L6
  1607  0003D0                     l790:
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;user.c: 184: if (encoderButton.pressed) {
  1611  0003D0  A41D               	btfss	_encoderButton,2,c	;volatile
  1612  0003D2  D011               	goto	l791
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;user.c: 185: ClearButtonsAndTimers();
  1616  0003D4  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  1617                           
  1618                           ;user.c: 186: switchState = 2;
  1619  0003D8  0E02               	movlw	2
  1620  0003DA  0100               	movlb	0	; () banked
  1621  0003DC  6F6D               	movwf	SetTimer@switchState& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;user.c: 187: amount = mainCount % 10;
  1625  0003DE  C00F  F064         	movff	_mainCount,___awmod@dividend	;volatile
  1626  0003E2  C010  F065         	movff	_mainCount+1,___awmod@dividend+1	;volatile
  1627  0003E6  6B67               	clrf	(___awmod@divisor+1)& (0+255),b
  1628  0003E8  0E0A               	movlw	10
  1629  0003EA  6F66               	movwf	___awmod@divisor& (0+255),b
  1630  0003EC  ECB9  F004         	call	___awmod	;wreg free
  1631  0003F0                     L4:
  1632  0003F0  5164               	movf	?___awmod& (0+255),w,b
  1633  0003F2  6F6E               	movwf	SetTimer@amount& (0+255),b
  1634                           
  1635                           ;user.c: 188: break;
  1636  0003F4  D026               	goto	l777
  1637  0003F6                     l791:
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;user.c: 189: }
  1641                           ;user.c: 191: if (flag.encode == 1) {
  1642  0003F6  A219               	btfss	_flag,1,c	;volatile
  1643  0003F8  D024               	goto	l777
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;user.c: 192: flag.encode = 0;
  1647  0003FA  9219               	bcf	_flag,1,c	;volatile
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;user.c: 193: amount += coder.direction;
  1651  0003FC  5048               	movf	_coder+3,w,c	;volatile
  1652  0003FE  276E               	addwf	SetTimer@amount& (0+255),f,b
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;user.c: 194: if (amount < 0) {
  1656  000400  AF6E               	btfss	SetTimer@amount& (0+255),7,b
  1657  000402  D006               	goto	l3036
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;user.c: 195: amount = 9;
  1661  000404  0E09               	movlw	9
  1662  000406  6F6E               	movwf	SetTimer@amount& (0+255),b
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;user.c: 196: mainCount += 900;
  1666  000408  0E84               	movlw	132
  1667  00040A  260F               	addwf	_mainCount,f,c	;volatile
  1668  00040C  0E03               	movlw	3
  1669  00040E  D7A4               	goto	L2
  1670  000410                     l3036:
  1671                           
  1672                           ; BSR set to: 0
  1673  000410  516E               	movf	SetTimer@amount& (0+255),w,b
  1674  000412  0A80               	xorlw	128
  1675  000414  0F76               	addlw	-138
  1676  000416  E305               	bnc	l3042
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;user.c: 198: amount = 0;
  1680  000418  6B6E               	clrf	SetTimer@amount& (0+255),b
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;user.c: 199: mainCount -= 900;
  1684  00041A  0E7C               	movlw	124
  1685  00041C  260F               	addwf	_mainCount,f,c	;volatile
  1686  00041E  0EFC               	movlw	252
  1687  000420  D79B               	goto	L2
  1688  000422                     l3042:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;user.c: 201: mainCount += (int16_t) (100 * coder.direction);
  1692  000422  D839               	call	PL14	;call to abstracted procedure
  1693  000424  0E64               	movlw	100
  1694  000426  6E40               	movwf	___wmul@multiplicand,c
  1695  000428  ECC3  F006         	call	___wmul	;wreg free
  1696  00042C                     L6:
  1697  00042C  503E               	movf	?___wmul,w,c
  1698  00042E  260F               	addwf	_mainCount,f,c	;volatile
  1699  000430  503F               	movf	?___wmul+1,w,c
  1700  000432  D792               	goto	L2
  1701  000434                     l3046:
  1702                           
  1703                           ; BSR set to: 0
  1704  000434  516D               	movf	SetTimer@switchState& (0+255),w,b
  1705                           
  1706                           ; Switch size 1, requested type "space"
  1707                           ; Number of cases is 3, Range of values is 0 to 2
  1708                           ; switch strategies available:
  1709                           ; Name         Instructions Cycles
  1710                           ; simple_byte           10     6 (average)
  1711                           ;	Chosen strategy is simple_byte
  1712  000436  E0CC               	bz	l790
  1713  000438  0A01               	xorlw	1	; case 1
  1714  00043A  E096               	bz	l783
  1715  00043C  0A03               	xorlw	3	; case 2
  1716  00043E  E101 D760          	bz	l775
  1717  000442                     l777:
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;user.c: 207: if (ledButton.pressed) {
  1721  000442  A423               	btfss	_ledButton,2,c	;volatile
  1722  000444  D011               	goto	l797
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;user.c: 208: DisplayValue(mainCount);
  1726  000446  C00F  F065         	movff	_mainCount,DisplayValue@number	;volatile
  1727  00044A  C010  F066         	movff	_mainCount+1,DisplayValue@number+1	;volatile
  1728  00044E  EC31  F004         	call	_DisplayValue	;wreg free
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;user.c: 209: SaveTime(mainCount);
  1732  000452  C00F  F068         	movff	_mainCount,SaveTime@time	;volatile
  1733  000456  C010  F069         	movff	_mainCount+1,SaveTime@time+1	;volatile
  1734  00045A  EC76  F004         	call	_SaveTime	;wreg free
  1735                           
  1736                           ;user.c: 210: ClearButtonsAndTimers();
  1737  00045E  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  1738                           
  1739                           ;user.c: 211: mainState = READY;
  1740  000462  0E02               	movlw	2
  1741  000464  6E1B               	movwf	_mainState,c	;volatile
  1742  000466  0C02               	retlw	2
  1743  000468                     l797:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;user.c: 213: }
  1747                           ;user.c: 215: if(ledButton.latched && holdTime < tmrCount){
  1748  000468  A223               	btfss	_ledButton,1,c	;volatile
  1749  00046A  D00C               	goto	l799
  1750                           
  1751                           ; BSR set to: 0
  1752  00046C  5015               	movf	_tmrCount,w,c	;volatile
  1753  00046E  5C0B               	subwf	SetTimer@holdTime,w,c
  1754  000470  5016               	movf	_tmrCount+1,w,c	;volatile
  1755  000472  580C               	subwfb	SetTimer@holdTime+1,w,c
  1756  000474  E207               	bc	l799
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;user.c: 216: DisplayMsg("PWR");
  1760  000476  0E8E               	movlw	STR_5& (0+255)
  1761  000478  ECC6  F005         	call	_DisplayMsg
  1762                           
  1763                           ;user.c: 217: signal.no_timer = 1;
  1764  00047C  8A1C               	bsf	_signal,5,c	;volatile
  1765                           
  1766                           ;user.c: 218: mainState = ON_NO_TIMER;
  1767  00047E  0E06               	movlw	6
  1768  000480  6E1B               	movwf	_mainState,c	;volatile
  1769  000482  0C06               	retlw	6
  1770  000484                     l799:
  1771                           
  1772                           ; BSR set to: 0
  1773  000484  B223               	btfsc	_ledButton,1,c	;volatile
  1774  000486  D731               	goto	l2966
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;user.c: 221: holdTime = tmrCount + 1500L;
  1778  000488  0EDC               	movlw	220
  1779  00048A  2415               	addwf	_tmrCount,w,c	;volatile
  1780  00048C  6E0B               	movwf	SetTimer@holdTime,c
  1781  00048E  0E05               	movlw	5
  1782  000490  2016               	addwfc	_tmrCount+1,w,c	;volatile
  1783  000492  6E0C               	movwf	SetTimer@holdTime+1,c
  1784  000494  D72A               	goto	l2966
  1785  000496                     __end_of_SetTimer:
  1786                           	opt stack 0
  1787  000496                     PL14:
  1788                           	opt stack 16
  1789  000496  5048               	movf	_coder+3,w,c	;volatile
  1790  000498  6E3E               	movwf	___wmul@multiplier,c
  1791  00049A  6A3F               	clrf	___wmul@multiplier+1,c
  1792  00049C  BE3E               	btfsc	___wmul@multiplier,7,c
  1793  00049E  063F               	decf	___wmul@multiplier+1,f,c
  1794  0004A0  6A41               	clrf	___wmul@multiplicand+1,c
  1795  0004A2  0012               	return	
  1796  0004A4                     __end_ofPL14:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           prodh	equ	0xFF4
  1803                           prodl	equ	0xFF3
  1804                           intcon	equ	0xFF2
  1805                           intcon2	equ	0xFF1
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf1	equ	0xFE7
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           postinc2	equ	0xFDE
  1813                           postdec2	equ	0xFDD
  1814                           plusw2	equ	0xFDB
  1815                           fsr2h	equ	0xFDA
  1816                           fsr2l	equ	0xFD9
  1817                           status	equ	0xFD8
  1818                           
  1819 ;; *************** function ___wmul *****************
  1820 ;; Defined at:
  1821 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  multiplier      2   21[COMRAM] unsigned int 
  1824 ;;  multiplicand    2   23[COMRAM] unsigned int 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  product         2   25[COMRAM] unsigned int 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  2   21[COMRAM] unsigned int 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0, prodl, prodh
  1831 ;; Tracked objects:
  1832 ;;		On entry : F/0
  1833 ;;		On exit  : F/0
  1834 ;;		Unchanged: F/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1
  1836 ;;      Params:         4       0       0
  1837 ;;      Locals:         2       0       0
  1838 ;;      Temps:          0       0       0
  1839 ;;      Totals:         6       0       0
  1840 ;;Total ram usage:        6 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    9
  1843 ;; This function calls:
  1844 ;;		Nothing
  1845 ;; This function is called by:
  1846 ;;		_SetTimer
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text3
  1851  000D86                     __ptext3:
  1852                           	opt stack 0
  1853  000D86                     ___wmul:
  1854                           	opt stack 20
  1855                           
  1856                           ; BSR set to: 0
  1857                           
  1858                           ;incstack = 0
  1859  000D86  503E               	movf	___wmul@multiplier,w,c
  1860  000D88  0240               	mulwf	___wmul@multiplicand,c
  1861  000D8A  CFF3 F042          	movff	prodl,___wmul@product
  1862  000D8E  CFF4 F043          	movff	prodh,___wmul@product+1
  1863  000D92  503E               	movf	___wmul@multiplier,w,c
  1864  000D94  0241               	mulwf	___wmul@multiplicand+1,c
  1865  000D96  50F3               	movf	prodl,w,c
  1866  000D98  2643               	addwf	___wmul@product+1,f,c
  1867  000D9A  503F               	movf	___wmul@multiplier+1,w,c
  1868  000D9C  0240               	mulwf	___wmul@multiplicand,c
  1869  000D9E  50F3               	movf	prodl,w,c
  1870  000DA0  2643               	addwf	___wmul@product+1,f,c
  1871                           
  1872                           ; BSR set to: 0
  1873  000DA2  C042  F03E         	movff	___wmul@product,?___wmul
  1874  000DA6  C043  F03F         	movff	___wmul@product+1,?___wmul+1
  1875                           
  1876                           ; BSR set to: 0
  1877  000DAA  0012               	return	
  1878  000DAC                     __end_of___wmul:
  1879                           	opt stack 0
  1880                           tblptru	equ	0xFF8
  1881                           tblptrh	equ	0xFF7
  1882                           tblptrl	equ	0xFF6
  1883                           tablat	equ	0xFF5
  1884                           prodh	equ	0xFF4
  1885                           prodl	equ	0xFF3
  1886                           intcon	equ	0xFF2
  1887                           intcon2	equ	0xFF1
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           indf1	equ	0xFE7
  1891                           fsr1h	equ	0xFE2
  1892                           fsr1l	equ	0xFE1
  1893                           indf2	equ	0xFDF
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           plusw2	equ	0xFDB
  1897                           fsr2h	equ	0xFDA
  1898                           fsr2l	equ	0xFD9
  1899                           status	equ	0xFD8
  1900                           
  1901 ;; *************** function _ScrollMessage *****************
  1902 ;; Defined at:
  1903 ;;		line 86 in file "display.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  string          1    wreg     PTR const unsigned char 
  1906 ;;		 -> STR_4(4), STR_2(8), STR_1(6), 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  string          1    3[BANK0 ] PTR const unsigned char 
  1909 ;;		 -> STR_4(4), STR_2(8), STR_1(6), 
  1910 ;;  x               1    4[BANK0 ] unsigned char 
  1911 ;;  delayCount      2    1[BANK0 ] unsigned int 
  1912 ;;  i               1    5[BANK0 ] unsigned char 
  1913 ;;  digit           1    0[BANK0 ] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : F/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1
  1923 ;;      Params:         0       0       0
  1924 ;;      Locals:         0       6       0
  1925 ;;      Temps:          2       0       0
  1926 ;;      Totals:         2       6       0
  1927 ;;Total ram usage:        8 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:   13
  1930 ;; This function calls:
  1931 ;;		_DisplayClear
  1932 ;;		_DisplaySync
  1933 ;;		_ShiftDisplayLeft
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;;		_SetTimer
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text4
  1941  000664                     __ptext4:
  1942                           	opt stack 0
  1943  000664                     _ScrollMessage:
  1944                           	opt stack 16
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;incstack = 0
  1948                           ;ScrollMessage@string stored from wreg
  1949  000664  0100               	movlb	0	; () banked
  1950  000666  6F63               	movwf	ScrollMessage@string& (0+255),b
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;display.c: 88: uint8_t i = 0;
  1954  000668  6B65               	clrf	ScrollMessage@i& (0+255),b
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;display.c: 89: uint8_t digit;
  1958                           ;display.c: 90: uint16_t delayCount;
  1959                           ;display.c: 92: DisplayClear();
  1960  00066A  ECBD  F007         	call	_DisplayClear	;wreg free
  1961                           
  1962                           ;display.c: 94: while (string[i] != '\0') {
  1963  00066E  D034               	goto	l2852
  1964  000670                     l60:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;display.c: 95: if (ledButton.pressed == 1 || encoderButton.pressed == 1){
  1968  000670  B423               	btfsc	_ledButton,2,c	;volatile
  1969  000672  D002               	goto	l63
  1970                           
  1971                           ; BSR set to: 0
  1972  000674  A41D               	btfss	_encoderButton,2,c	;volatile
  1973  000676  D004               	goto	l2828
  1974  000678                     l63:
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;display.c: 96: ledButton.pressed = 0;
  1978  000678  9423               	bcf	_ledButton,2,c	;volatile
  1979                           
  1980                           ;display.c: 97: encoderButton.pressed = 0;
  1981  00067A  941D               	bcf	_encoderButton,2,c	;volatile
  1982                           
  1983                           ;display.c: 98: signal.scrollbreak = 1;
  1984  00067C  881C               	bsf	_signal,4,c	;volatile
  1985                           
  1986                           ;display.c: 99: return;
  1987  00067E  0012               	return	
  1988  000680                     l2828:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;display.c: 100: }
  1992                           ;display.c: 101: digit = string[i];
  1993  000680  D83F               	call	PL12	;call to abstracted procedure
  1994  000682  CFF5 F060          	movff	tablat,ScrollMessage@digit
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;display.c: 102: for (uint8_t x = 0; x < 2; x++) {
  1998  000686  6B64               	clrf	ScrollMessage@x& (0+255),b
  1999  000688                     l2836:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;display.c: 103: maxBuffer[x] = maxBuffer[x + 1];
  2003  000688  5164               	movf	ScrollMessage@x& (0+255),w,b
  2004  00068A  0F02               	addlw	low (_maxBuffer+1)	;volatile
  2005  00068C  6ED9               	movwf	fsr2l,c
  2006  00068E  6ADA               	clrf	fsr2h,c
  2007  000690  5164               	movf	ScrollMessage@x& (0+255),w,b
  2008  000692  0F01               	addlw	low _maxBuffer	;volatile
  2009  000694  6EE1               	movwf	fsr1l,c
  2010  000696  6AE2               	clrf	fsr1h,c
  2011  000698  CFDF FFE7          	movff	indf2,indf1
  2012                           
  2013                           ; BSR set to: 0
  2014  00069C  2B64               	incf	ScrollMessage@x& (0+255),f,b
  2015                           
  2016                           ; BSR set to: 0
  2017  00069E  0E01               	movlw	1
  2018  0006A0  6564               	cpfsgt	ScrollMessage@x& (0+255),b
  2019  0006A2  D7F2               	goto	l2836
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;display.c: 104: }
  2023                           ;display.c: 105: maxBuffer[2] = segmentFont[digit - 32];
  2024  0006A4  C060  F043         	movff	ScrollMessage@digit,??_ScrollMessage
  2025  0006A8  0EE0               	movlw	224
  2026  0006AA  2643               	addwf	??_ScrollMessage,f,c
  2027  0006AC  5043               	movf	??_ScrollMessage,w,c
  2028  0006AE  0F01               	addlw	low _segmentFont
  2029  0006B0  6E44               	movwf	(??_ScrollMessage+1)& (0+255),c
  2030  0006B2  C044  FFF6         	movff	??_ScrollMessage+1,tblptrl
  2031  0006B6                     	if	1	;There is more than 1 active tblptr byte
  2032  0006B6  0E02               	movlw	high __smallconst
  2033  0006B8  6EF7               	movwf	tblptrh,c
  2034  0006BA                     	endif
  2035  0006BA                     	if	0	;tblptru may be non-zero
  2036  0006BA                     	endif
  2037  0006BA                     	if	0	;tblptru may be non-zero
  2038  0006BA                     	endif
  2039  0006BA  0008               	tblrd		*
  2040  0006BC  CFF5 F003          	movff	tablat,_maxBuffer+2	;volatile
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;display.c: 106: DisplaySync();
  2044  0006C0  EC6B  F008         	call	_DisplaySync	;wreg free
  2045                           
  2046                           ;display.c: 107: delayCount = t3Count + 20;
  2047  0006C4  0E14               	movlw	20
  2048  0006C6  2413               	addwf	_t3Count,w,c	;volatile
  2049  0006C8  0100               	movlb	0	; () banked
  2050  0006CA  D823               	call	PL20	;call to abstracted procedure
  2051  0006CC                     l2848:
  2052                           
  2053                           ; BSR set to: 0
  2054  0006CC  5161               	movf	ScrollMessage@delayCount& (0+255),w,b
  2055  0006CE  5C13               	subwf	_t3Count,w,c	;volatile
  2056  0006D0  5162               	movf	(ScrollMessage@delayCount+1)& (0+255),w,b
  2057  0006D2  5814               	subwfb	_t3Count+1,w,c	;volatile
  2058  0006D4  E3FB               	bnc	l2848
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;display.c: 109: i++;
  2062  0006D6  2B65               	incf	ScrollMessage@i& (0+255),f,b
  2063  0006D8                     l2852:
  2064  0006D8  0100               	movlb	0	; () banked
  2065  0006DA  D812               	call	PL12	;call to abstracted procedure
  2066  0006DC  50F5               	movf	tablat,w,c
  2067  0006DE  E1C8               	bnz	l60
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;display.c: 110: }
  2071                           ;display.c: 112: for (i = 0; i < 3; i++) {
  2072  0006E0  6B65               	clrf	ScrollMessage@i& (0+255),b
  2073  0006E2                     l2858:
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;display.c: 113: ShiftDisplayLeft();
  2077  0006E2  EC1F  F007         	call	_ShiftDisplayLeft	;wreg free
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;display.c: 114: delayCount = t3Count + 20;
  2081  0006E6  0E14               	movlw	20
  2082  0006E8  2413               	addwf	_t3Count,w,c	;volatile
  2083  0006EA  D813               	call	PL20	;call to abstracted procedure
  2084  0006EC                     l2862:
  2085                           
  2086                           ; BSR set to: 0
  2087  0006EC  5161               	movf	ScrollMessage@delayCount& (0+255),w,b
  2088  0006EE  5C13               	subwf	_t3Count,w,c	;volatile
  2089  0006F0  5162               	movf	(ScrollMessage@delayCount+1)& (0+255),w,b
  2090  0006F2  5814               	subwfb	_t3Count+1,w,c	;volatile
  2091  0006F4  E3FB               	bnc	l2862
  2092                           
  2093                           ; BSR set to: 0
  2094  0006F6  2B65               	incf	ScrollMessage@i& (0+255),f,b
  2095                           
  2096                           ; BSR set to: 0
  2097  0006F8  0E02               	movlw	2
  2098  0006FA  6565               	cpfsgt	ScrollMessage@i& (0+255),b
  2099  0006FC  D7F2               	goto	l2858
  2100  0006FE  0C02               	retlw	2
  2101  000700                     __end_of_ScrollMessage:
  2102                           	opt stack 0
  2103  000700                     PL12:
  2104                           	opt stack 16
  2105  000700  5163               	movf	ScrollMessage@string& (0+255),w,b
  2106  000702  2565               	addwf	ScrollMessage@i& (0+255),w,b
  2107  000704  6E43               	movwf	??_ScrollMessage& (0+255),c
  2108  000706  C043  FFF6         	movff	??_ScrollMessage,tblptrl
  2109  00070A                     	if	1	;There is more than 1 active tblptr byte
  2110  00070A  0E02               	movlw	high __smallconst
  2111  00070C  6EF7               	movwf	tblptrh,c
  2112  00070E                     	endif
  2113  00070E                     	if	0	;tblptru may be non-zero
  2114  00070E                     	endif
  2115  00070E                     	if	0	;tblptru may be non-zero
  2116  00070E                     	endif
  2117  00070E  0008               	tblrd		*
  2118  000710  0012               	return	
  2119  000712                     __end_ofPL12:
  2120                           	opt stack 0
  2121  000712                     PL20:
  2122                           	opt stack 16
  2123  000712  6F61               	movwf	ScrollMessage@delayCount& (0+255),b
  2124  000714  0E00               	movlw	0
  2125  000716  2014               	addwfc	_t3Count+1,w,c	;volatile
  2126  000718  6F62               	movwf	(ScrollMessage@delayCount+1)& (0+255),b
  2127  00071A  0012               	return	
  2128  00071C                     __end_ofPL20:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           intcon2	equ	0xFF1
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           indf1	equ	0xFE7
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           plusw2	equ	0xFDB
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _ShiftDisplayLeft *****************
  2152 ;; Defined at:
  2153 ;;		line 119 in file "display.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  x               1   21[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : F/0
  2164 ;;		On exit  : F/0
  2165 ;;		Unchanged: F/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1
  2167 ;;      Params:         0       0       0
  2168 ;;      Locals:         1       0       0
  2169 ;;      Temps:          0       0       0
  2170 ;;      Totals:         1       0       0
  2171 ;;Total ram usage:        1 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    9
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_ScrollMessage
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text5
  2182  000E3E                     __ptext5:
  2183                           	opt stack 0
  2184  000E3E                     _ShiftDisplayLeft:
  2185                           	opt stack 19
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;display.c: 120: for (uint8_t x = 0; x < 2; x++) {
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;incstack = 0
  2192  000E3E  6A3E               	clrf	ShiftDisplayLeft@x,c
  2193  000E40                     l2604:
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;display.c: 121: maxBuffer[x] = maxBuffer[x + 1];
  2197  000E40  503E               	movf	ShiftDisplayLeft@x,w,c
  2198  000E42  0F02               	addlw	low (_maxBuffer+1)	;volatile
  2199  000E44  6ED9               	movwf	fsr2l,c
  2200  000E46  6ADA               	clrf	fsr2h,c
  2201  000E48  503E               	movf	ShiftDisplayLeft@x,w,c
  2202  000E4A  0F01               	addlw	low _maxBuffer	;volatile
  2203  000E4C  6EE1               	movwf	fsr1l,c
  2204  000E4E  6AE2               	clrf	fsr1h,c
  2205  000E50  CFDF FFE7          	movff	indf2,indf1
  2206                           
  2207                           ; BSR set to: 0
  2208  000E54  2A3E               	incf	ShiftDisplayLeft@x,f,c
  2209                           
  2210                           ; BSR set to: 0
  2211  000E56  0E01               	movlw	1
  2212  000E58  643E               	cpfsgt	ShiftDisplayLeft@x,c
  2213  000E5A  D7F2               	goto	l2604
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;display.c: 122: }
  2217                           ;display.c: 123: maxBuffer[2] = 0x00;
  2218  000E5C  6A03               	clrf	_maxBuffer+2,c	;volatile
  2219                           
  2220                           ; BSR set to: 0
  2221  000E5E  0012               	return	
  2222  000E60                     __end_of_ShiftDisplayLeft:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           intcon	equ	0xFF2
  2231                           intcon2	equ	0xFF1
  2232                           postinc0	equ	0xFEE
  2233                           wreg	equ	0xFE8
  2234                           indf1	equ	0xFE7
  2235                           fsr1h	equ	0xFE2
  2236                           fsr1l	equ	0xFE1
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           plusw2	equ	0xFDB
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _DisplaySync *****************
  2246 ;; Defined at:
  2247 ;;		line 156 in file "display.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;		None               void
  2254 ;; Registers used:
  2255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : F/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1
  2261 ;;      Params:         0       0       0
  2262 ;;      Locals:         0       0       0
  2263 ;;      Temps:          0       0       0
  2264 ;;      Totals:         0       0       0
  2265 ;;Total ram usage:        0 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:   12
  2268 ;; This function calls:
  2269 ;;		_MAX7219_SyncBuffer
  2270 ;; This function is called by:
  2271 ;;		_ScrollMessage
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text6
  2276  0010D6                     __ptext6:
  2277                           	opt stack 0
  2278  0010D6                     _DisplaySync:
  2279                           	opt stack 16
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;display.c: 158: MAX7219_SyncBuffer();
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;incstack = 0
  2286  0010D6  EF41  F007         	goto	_MAX7219_SyncBuffer	;wreg free
  2287  0010DA                     __end_of_DisplaySync:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           intcon2	equ	0xFF1
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           indf1	equ	0xFE7
  2300                           fsr1h	equ	0xFE2
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           postdec2	equ	0xFDD
  2305                           plusw2	equ	0xFDB
  2306                           fsr2h	equ	0xFDA
  2307                           fsr2l	equ	0xFD9
  2308                           status	equ	0xFD8
  2309                           
  2310 ;; *************** function _MAX7219_SyncBuffer *****************
  2311 ;; Defined at:
  2312 ;;		line 234 in file "max7219.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  i               1   25[COMRAM] unsigned char 
  2317 ;; Return value:  Size  Location     Type
  2318 ;;		None               void
  2319 ;; Registers used:
  2320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : F/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1
  2326 ;;      Params:         0       0       0
  2327 ;;      Locals:         1       0       0
  2328 ;;      Temps:          0       0       0
  2329 ;;      Totals:         1       0       0
  2330 ;;Total ram usage:        1 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:   11
  2333 ;; This function calls:
  2334 ;;		_MAX7219_SetRegister
  2335 ;; This function is called by:
  2336 ;;		_DisplaySync
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text7
  2341  000E82                     __ptext7:
  2342                           	opt stack 0
  2343  000E82                     _MAX7219_SyncBuffer:
  2344                           	opt stack 16
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;max7219.c: 235: uint8_t i = 0;
  2348                           
  2349                           ;incstack = 0
  2350  000E82  6A42               	clrf	MAX7219_SyncBuffer@i,c
  2351                           
  2352                           ;max7219.c: 236: for (i = 0; i< 3; ++i){
  2353  000E84  6A42               	clrf	MAX7219_SyncBuffer@i,c
  2354  000E86                     l2554:
  2355                           
  2356                           ;max7219.c: 237: MAX7219_SetRegister((i+1),maxBuffer[i]);
  2357  000E86  5042               	movf	MAX7219_SyncBuffer@i,w,c
  2358  000E88  0F01               	addlw	low _maxBuffer	;volatile
  2359  000E8A  6ED9               	movwf	fsr2l,c
  2360  000E8C  6ADA               	clrf	fsr2h,c
  2361  000E8E  50DF               	movf	indf2,w,c
  2362  000E90  6E40               	movwf	MAX7219_SetRegister@data,c
  2363  000E92  2842               	incf	MAX7219_SyncBuffer@i,w,c
  2364  000E94  ECC8  F007         	call	_MAX7219_SetRegister
  2365  000E98  2A42               	incf	MAX7219_SyncBuffer@i,f,c
  2366  000E9A  0E02               	movlw	2
  2367  000E9C  6442               	cpfsgt	MAX7219_SyncBuffer@i,c
  2368  000E9E  D7F3               	goto	l2554
  2369  000EA0  0C02               	retlw	2
  2370  000EA2                     __end_of_MAX7219_SyncBuffer:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           tblptrh	equ	0xFF7
  2374                           tblptrl	equ	0xFF6
  2375                           tablat	equ	0xFF5
  2376                           prodh	equ	0xFF4
  2377                           prodl	equ	0xFF3
  2378                           intcon	equ	0xFF2
  2379                           intcon2	equ	0xFF1
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           indf1	equ	0xFE7
  2383                           fsr1h	equ	0xFE2
  2384                           fsr1l	equ	0xFE1
  2385                           indf2	equ	0xFDF
  2386                           postinc2	equ	0xFDE
  2387                           postdec2	equ	0xFDD
  2388                           plusw2	equ	0xFDB
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _SaveTime *****************
  2394 ;; Defined at:
  2395 ;;		line 96 in file "user.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  time            2    8[BANK0 ] int 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  value           1   27[COMRAM] unsigned char 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0, prodl, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : F/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1
  2409 ;;      Params:         0       2       0
  2410 ;;      Locals:         1       0       0
  2411 ;;      Temps:          0       0       0
  2412 ;;      Totals:         1       2       0
  2413 ;;Total ram usage:        3 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:   10
  2416 ;; This function calls:
  2417 ;;		_Busy_eep
  2418 ;;		_Write_b_eep
  2419 ;;		___awdiv
  2420 ;;		___awmod
  2421 ;;		___lbmod
  2422 ;; This function is called by:
  2423 ;;		_SetTimer
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text8
  2428  0008EC                     __ptext8:
  2429                           	opt stack 0
  2430  0008EC                     _SaveTime:
  2431                           	opt stack 19
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;user.c: 97: uint8_t value;
  2435                           ;user.c: 99: value = (uint8_t) (time % 10);
  2436                           
  2437                           ;incstack = 0
  2438  0008EC  C068  F064         	movff	SaveTime@time,___awmod@dividend
  2439  0008F0  C069  F065         	movff	SaveTime@time+1,___awmod@dividend+1
  2440  0008F4  6B67               	clrf	(___awmod@divisor+1)& (0+255),b
  2441  0008F6  0E0A               	movlw	10
  2442  0008F8  6F66               	movwf	___awmod@divisor& (0+255),b
  2443  0008FA  ECB9  F004         	call	___awmod	;wreg free
  2444  0008FE  5164               	movf	?___awmod& (0+255),w,b
  2445  000900  6E44               	movwf	SaveTime@value,c
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;user.c: 100: (Busy_eep(), Write_b_eep(0x03,value));
  2449  000902  EC65  F008         	call	_Busy_eep	;wreg free
  2450                           
  2451                           ; BSR set to: 0
  2452  000906  6A3F               	clrf	Write_b_eep@badd+1,c
  2453  000908  0E03               	movlw	3
  2454  00090A  6E3E               	movwf	Write_b_eep@badd,c
  2455  00090C  C044  F040         	movff	SaveTime@value,Write_b_eep@bdat
  2456  000910  EC66  F006         	call	_Write_b_eep	;wreg free
  2457                           
  2458                           ;user.c: 101: value = (uint8_t) (time / 10) % 10;
  2459  000914  0E0A               	movlw	10
  2460  000916  6E42               	movwf	___lbmod@divisor,c
  2461  000918  6A41               	clrf	___awdiv@divisor+1,c
  2462  00091A  6E40               	movwf	___awdiv@divisor,c
  2463  00091C  C068  F03E         	movff	SaveTime@time,___awdiv@dividend
  2464  000920  C069  F03F         	movff	SaveTime@time+1,___awdiv@dividend+1
  2465  000924  ECE9  F003         	call	___awdiv	;wreg free
  2466  000928  503E               	movf	?___awdiv,w,c
  2467  00092A  ECD6  F006         	call	___lbmod
  2468  00092E  6E44               	movwf	SaveTime@value,c
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;user.c: 102: (Busy_eep(), Write_b_eep(0x04,value));
  2472  000930  EC65  F008         	call	_Busy_eep	;wreg free
  2473  000934  6A3F               	clrf	Write_b_eep@badd+1,c
  2474  000936  0E04               	movlw	4
  2475  000938  6E3E               	movwf	Write_b_eep@badd,c
  2476  00093A  C044  F040         	movff	SaveTime@value,Write_b_eep@bdat
  2477  00093E  EC66  F006         	call	_Write_b_eep	;wreg free
  2478                           
  2479                           ;user.c: 103: value = (uint8_t) (time / 100) % 10;
  2480  000942  0E0A               	movlw	10
  2481  000944  6E42               	movwf	___lbmod@divisor,c
  2482  000946  6A41               	clrf	___awdiv@divisor+1,c
  2483  000948  0E64               	movlw	100
  2484  00094A  6E40               	movwf	___awdiv@divisor,c
  2485  00094C  C068  F03E         	movff	SaveTime@time,___awdiv@dividend
  2486  000950  C069  F03F         	movff	SaveTime@time+1,___awdiv@dividend+1
  2487  000954  ECE9  F003         	call	___awdiv	;wreg free
  2488  000958  503E               	movf	?___awdiv,w,c
  2489  00095A  ECD6  F006         	call	___lbmod
  2490  00095E  6E44               	movwf	SaveTime@value,c
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;user.c: 104: (Busy_eep(), Write_b_eep(0x05,value));
  2494  000960  EC65  F008         	call	_Busy_eep	;wreg free
  2495                           
  2496                           ; BSR set to: 0
  2497  000964  6A3F               	clrf	Write_b_eep@badd+1,c
  2498  000966  0E05               	movlw	5
  2499  000968  6E3E               	movwf	Write_b_eep@badd,c
  2500  00096A  C044  F040         	movff	SaveTime@value,Write_b_eep@bdat
  2501  00096E  EF66  F006         	goto	_Write_b_eep	;wreg free
  2502  000972                     __end_of_SaveTime:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           intcon2	equ	0xFF1
  2512                           postinc0	equ	0xFEE
  2513                           wreg	equ	0xFE8
  2514                           indf1	equ	0xFE7
  2515                           fsr1h	equ	0xFE2
  2516                           fsr1l	equ	0xFE1
  2517                           indf2	equ	0xFDF
  2518                           postinc2	equ	0xFDE
  2519                           postdec2	equ	0xFDD
  2520                           plusw2	equ	0xFDB
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function ___lbmod *****************
  2526 ;; Defined at:
  2527 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lbmod.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  dividend        1    wreg     unsigned char 
  2530 ;;  divisor         1   25[COMRAM] unsigned char 
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  dividend        1    4[BANK0 ] unsigned char 
  2533 ;;  rem             1    6[BANK0 ] unsigned char 
  2534 ;;  counter         1    5[BANK0 ] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      unsigned char 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : F/0
  2541 ;;		On exit  : F/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1
  2544 ;;      Params:         1       0       0
  2545 ;;      Locals:         0       3       0
  2546 ;;      Temps:          0       0       0
  2547 ;;      Totals:         1       3       0
  2548 ;;Total ram usage:        4 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    9
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_SaveTime
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text9
  2559  000DAC                     __ptext9:
  2560                           	opt stack 0
  2561  000DAC                     ___lbmod:
  2562                           	opt stack 19
  2563                           
  2564                           ;incstack = 0
  2565                           ;___lbmod@dividend stored from wreg
  2566  000DAC  6F64               	movwf	___lbmod@dividend& (0+255),b
  2567                           
  2568                           ; BSR set to: 0
  2569  000DAE  0E08               	movlw	8
  2570  000DB0  6F65               	movwf	___lbmod@counter& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573  000DB2  6B66               	clrf	___lbmod@rem& (0+255),b
  2574  000DB4                     l2730:
  2575                           
  2576                           ; BSR set to: 0
  2577  000DB4  90D8               	bcf	status,0,c
  2578  000DB6  3564               	rlcf	___lbmod@dividend& (0+255),w,b
  2579  000DB8  3566               	rlcf	___lbmod@rem& (0+255),w,b
  2580  000DBA  6F66               	movwf	___lbmod@rem& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583  000DBC  90D8               	bcf	status,0,c
  2584  000DBE  3764               	rlcf	___lbmod@dividend& (0+255),f,b
  2585                           
  2586                           ; BSR set to: 0
  2587  000DC0  5042               	movf	___lbmod@divisor,w,c
  2588  000DC2  5D66               	subwf	___lbmod@rem& (0+255),w,b
  2589  000DC4  E302               	bnc	l2738
  2590                           
  2591                           ; BSR set to: 0
  2592  000DC6  5042               	movf	___lbmod@divisor,w,c
  2593  000DC8  5F66               	subwf	___lbmod@rem& (0+255),f,b
  2594  000DCA                     l2738:
  2595                           
  2596                           ; BSR set to: 0
  2597  000DCA  2F65               	decfsz	___lbmod@counter& (0+255),f,b
  2598  000DCC  D7F3               	goto	l2730
  2599                           
  2600                           ; BSR set to: 0
  2601  000DCE  5166               	movf	___lbmod@rem& (0+255),w,b
  2602                           
  2603                           ; BSR set to: 0
  2604  000DD0  0012               	return	
  2605  000DD2                     __end_of___lbmod:
  2606                           	opt stack 0
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           prodh	equ	0xFF4
  2612                           prodl	equ	0xFF3
  2613                           intcon	equ	0xFF2
  2614                           intcon2	equ	0xFF1
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           indf1	equ	0xFE7
  2618                           fsr1h	equ	0xFE2
  2619                           fsr1l	equ	0xFE1
  2620                           indf2	equ	0xFDF
  2621                           postinc2	equ	0xFDE
  2622                           postdec2	equ	0xFDD
  2623                           plusw2	equ	0xFDB
  2624                           fsr2h	equ	0xFDA
  2625                           fsr2l	equ	0xFD9
  2626                           status	equ	0xFD8
  2627                           
  2628 ;; *************** function ___awmod *****************
  2629 ;; Defined at:
  2630 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  dividend        2    4[BANK0 ] int 
  2633 ;;  divisor         2    6[BANK0 ] int 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  sign            1   26[COMRAM] unsigned char 
  2636 ;;  counter         1   25[COMRAM] unsigned char 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  2    4[BANK0 ] int 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0, prodl
  2641 ;; Tracked objects:
  2642 ;;		On entry : F/0
  2643 ;;		On exit  : F/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1
  2646 ;;      Params:         0       4       0
  2647 ;;      Locals:         2       0       0
  2648 ;;      Temps:          0       0       0
  2649 ;;      Totals:         2       4       0
  2650 ;;Total ram usage:        6 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    9
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_SaveTime
  2657 ;;		_SetTimer
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text10
  2662  000972                     __ptext10:
  2663                           	opt stack 0
  2664  000972                     ___awmod:
  2665                           	opt stack 20
  2666                           
  2667                           ; BSR set to: 0
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;incstack = 0
  2671  000972  6A43               	clrf	___awmod@sign,c
  2672                           
  2673                           ; BSR set to: 0
  2674  000974  5165               	movf	(___awmod@dividend+1)& (0+255),w,b
  2675  000976  EC2C  F004         	call	PL8	;call to abstracted procedure
  2676  00097A  B4D8               	btfsc	status,2,c
  2677  00097C  5D64               	subwf	___awmod@dividend& (0+255),w,b
  2678  00097E  E206               	bc	l2698
  2679                           
  2680                           ; BSR set to: 0
  2681  000980  6D64               	negf	___awmod@dividend& (0+255),b
  2682  000982  1F65               	comf	(___awmod@dividend+1)& (0+255),f,b
  2683  000984  B0D8               	btfsc	status,0,c
  2684  000986  2B65               	incf	(___awmod@dividend+1)& (0+255),f,b
  2685                           
  2686                           ; BSR set to: 0
  2687  000988  0E01               	movlw	1
  2688  00098A  6E43               	movwf	___awmod@sign,c
  2689  00098C                     l2698:
  2690                           
  2691                           ; BSR set to: 0
  2692  00098C  5167               	movf	(___awmod@divisor+1)& (0+255),w,b
  2693  00098E  EC2C  F004         	call	PL8	;call to abstracted procedure
  2694  000992  B4D8               	btfsc	status,2,c
  2695  000994  5D66               	subwf	___awmod@divisor& (0+255),w,b
  2696  000996  E204               	bc	l2702
  2697                           
  2698                           ; BSR set to: 0
  2699  000998  6D66               	negf	___awmod@divisor& (0+255),b
  2700  00099A  1F67               	comf	(___awmod@divisor+1)& (0+255),f,b
  2701  00099C  B0D8               	btfsc	status,0,c
  2702  00099E  2B67               	incf	(___awmod@divisor+1)& (0+255),f,b
  2703  0009A0                     l2702:
  2704                           
  2705                           ; BSR set to: 0
  2706  0009A0  5167               	movf	(___awmod@divisor+1)& (0+255),w,b
  2707  0009A2  1166               	iorwf	___awmod@divisor& (0+255),w,b
  2708  0009A4  E017               	bz	l2718
  2709                           
  2710                           ; BSR set to: 0
  2711  0009A6  0E01               	movlw	1
  2712  0009A8  6E42               	movwf	___awmod@counter,c
  2713  0009AA  D004               	goto	l2708
  2714  0009AC                     l2706:
  2715                           
  2716                           ; BSR set to: 0
  2717  0009AC  90D8               	bcf	status,0,c
  2718  0009AE  3766               	rlcf	___awmod@divisor& (0+255),f,b
  2719  0009B0  3767               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2720  0009B2  2A42               	incf	___awmod@counter,f,c
  2721  0009B4                     l2708:
  2722                           
  2723                           ; BSR set to: 0
  2724  0009B4  AF67               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2725  0009B6  D7FA               	goto	l2706
  2726  0009B8                     l2710:
  2727                           
  2728                           ; BSR set to: 0
  2729  0009B8  5166               	movf	___awmod@divisor& (0+255),w,b
  2730  0009BA  5D64               	subwf	___awmod@dividend& (0+255),w,b
  2731  0009BC  5167               	movf	(___awmod@divisor+1)& (0+255),w,b
  2732  0009BE  5965               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2733  0009C0  E304               	bnc	l2714
  2734                           
  2735                           ; BSR set to: 0
  2736  0009C2  5166               	movf	___awmod@divisor& (0+255),w,b
  2737  0009C4  5F64               	subwf	___awmod@dividend& (0+255),f,b
  2738  0009C6  5167               	movf	(___awmod@divisor+1)& (0+255),w,b
  2739  0009C8  5B65               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2740  0009CA                     l2714:
  2741                           
  2742                           ; BSR set to: 0
  2743  0009CA  90D8               	bcf	status,0,c
  2744  0009CC  3367               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2745  0009CE  3366               	rrcf	___awmod@divisor& (0+255),f,b
  2746                           
  2747                           ; BSR set to: 0
  2748  0009D0  2E42               	decfsz	___awmod@counter,f,c
  2749  0009D2  D7F2               	goto	l2710
  2750  0009D4                     l2718:
  2751                           
  2752                           ; BSR set to: 0
  2753  0009D4  5043               	movf	___awmod@sign,w,c
  2754  0009D6  E004               	bz	l2722
  2755                           
  2756                           ; BSR set to: 0
  2757  0009D8  6D64               	negf	___awmod@dividend& (0+255),b
  2758  0009DA  1F65               	comf	(___awmod@dividend+1)& (0+255),f,b
  2759  0009DC  B0D8               	btfsc	status,0,c
  2760  0009DE  2B65               	incf	(___awmod@dividend+1)& (0+255),f,b
  2761  0009E0                     l2722:
  2762                           
  2763                           ; BSR set to: 0
  2764  0009E0  C064  F064         	movff	___awmod@dividend,?___awmod
  2765  0009E4  C065  F065         	movff	___awmod@dividend+1,?___awmod+1
  2766                           
  2767                           ; BSR set to: 0
  2768  0009E8  0012               	return	
  2769  0009EA                     __end_of___awmod:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           intcon	equ	0xFF2
  2778                           intcon2	equ	0xFF1
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           indf1	equ	0xFE7
  2782                           fsr1h	equ	0xFE2
  2783                           fsr1l	equ	0xFE1
  2784                           indf2	equ	0xFDF
  2785                           postinc2	equ	0xFDE
  2786                           postdec2	equ	0xFDD
  2787                           plusw2	equ	0xFDB
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function ___awdiv *****************
  2793 ;; Defined at:
  2794 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  dividend        2   21[COMRAM] int 
  2797 ;;  divisor         2   23[COMRAM] int 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  quotient        2    2[BANK0 ] int 
  2800 ;;  sign            1    1[BANK0 ] unsigned char 
  2801 ;;  counter         1    0[BANK0 ] unsigned char 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  2   21[COMRAM] int 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0, prodl
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : F/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1
  2811 ;;      Params:         4       0       0
  2812 ;;      Locals:         0       4       0
  2813 ;;      Temps:          0       0       0
  2814 ;;      Totals:         4       4       0
  2815 ;;Total ram usage:        8 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    9
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_SaveTime
  2822 ;;		_SetTimer
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text11
  2827  0007D2                     __ptext11:
  2828                           	opt stack 0
  2829  0007D2                     ___awdiv:
  2830                           	opt stack 20
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;incstack = 0
  2834  0007D2  0100               	movlb	0	; () banked
  2835  0007D4  6B61               	clrf	___awdiv@sign& (0+255),b
  2836                           
  2837                           ; BSR set to: 0
  2838  0007D6  5041               	movf	___awdiv@divisor+1,w,c
  2839  0007D8  D83F               	call	PL8	;call to abstracted procedure
  2840  0007DA  B4D8               	btfsc	status,2,c
  2841  0007DC  5C40               	subwf	___awdiv@divisor,w,c
  2842  0007DE  E206               	bc	l2654
  2843                           
  2844                           ; BSR set to: 0
  2845  0007E0  6C40               	negf	___awdiv@divisor,c
  2846  0007E2  1E41               	comf	___awdiv@divisor+1,f,c
  2847  0007E4  B0D8               	btfsc	status,0,c
  2848  0007E6  2A41               	incf	___awdiv@divisor+1,f,c
  2849                           
  2850                           ; BSR set to: 0
  2851  0007E8  0E01               	movlw	1
  2852  0007EA  6F61               	movwf	___awdiv@sign& (0+255),b
  2853  0007EC                     l2654:
  2854                           
  2855                           ; BSR set to: 0
  2856  0007EC  503F               	movf	___awdiv@dividend+1,w,c
  2857  0007EE  D834               	call	PL8	;call to abstracted procedure
  2858  0007F0  B4D8               	btfsc	status,2,c
  2859  0007F2  5C3E               	subwf	___awdiv@dividend,w,c
  2860  0007F4  E206               	bc	l2660
  2861                           
  2862                           ; BSR set to: 0
  2863  0007F6  6C3E               	negf	___awdiv@dividend,c
  2864  0007F8  1E3F               	comf	___awdiv@dividend+1,f,c
  2865  0007FA  B0D8               	btfsc	status,0,c
  2866  0007FC  2A3F               	incf	___awdiv@dividend+1,f,c
  2867                           
  2868                           ; BSR set to: 0
  2869  0007FE  0E01               	movlw	1
  2870  000800  1B61               	xorwf	___awdiv@sign& (0+255),f,b
  2871  000802                     l2660:
  2872                           
  2873                           ; BSR set to: 0
  2874  000802  6B62               	clrf	___awdiv@quotient& (0+255),b
  2875  000804  6B63               	clrf	(___awdiv@quotient+1)& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878  000806  5041               	movf	___awdiv@divisor+1,w,c
  2879  000808  1040               	iorwf	___awdiv@divisor,w,c
  2880  00080A  E01B               	bz	l2682
  2881                           
  2882                           ; BSR set to: 0
  2883  00080C  0E01               	movlw	1
  2884  00080E  6F60               	movwf	___awdiv@counter& (0+255),b
  2885  000810  D004               	goto	l2668
  2886  000812                     l2666:
  2887                           
  2888                           ; BSR set to: 0
  2889  000812  90D8               	bcf	status,0,c
  2890  000814  3640               	rlcf	___awdiv@divisor,f,c
  2891  000816  3641               	rlcf	___awdiv@divisor+1,f,c
  2892  000818  2B60               	incf	___awdiv@counter& (0+255),f,b
  2893  00081A                     l2668:
  2894                           
  2895                           ; BSR set to: 0
  2896  00081A  AE41               	btfss	___awdiv@divisor+1,7,c
  2897  00081C  D7FA               	goto	l2666
  2898  00081E                     l2670:
  2899                           
  2900                           ; BSR set to: 0
  2901  00081E  90D8               	bcf	status,0,c
  2902  000820  3762               	rlcf	___awdiv@quotient& (0+255),f,b
  2903  000822  3763               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2904                           
  2905                           ; BSR set to: 0
  2906  000824  5040               	movf	___awdiv@divisor,w,c
  2907  000826  5C3E               	subwf	___awdiv@dividend,w,c
  2908  000828  5041               	movf	___awdiv@divisor+1,w,c
  2909  00082A  583F               	subwfb	___awdiv@dividend+1,w,c
  2910  00082C  E305               	bnc	l2678
  2911                           
  2912                           ; BSR set to: 0
  2913  00082E  5040               	movf	___awdiv@divisor,w,c
  2914  000830  5E3E               	subwf	___awdiv@dividend,f,c
  2915  000832  5041               	movf	___awdiv@divisor+1,w,c
  2916  000834  5A3F               	subwfb	___awdiv@dividend+1,f,c
  2917                           
  2918                           ; BSR set to: 0
  2919  000836  8162               	bsf	___awdiv@quotient& (0+255),0,b
  2920  000838                     l2678:
  2921                           
  2922                           ; BSR set to: 0
  2923  000838  90D8               	bcf	status,0,c
  2924  00083A  3241               	rrcf	___awdiv@divisor+1,f,c
  2925  00083C  3240               	rrcf	___awdiv@divisor,f,c
  2926                           
  2927                           ; BSR set to: 0
  2928  00083E  2F60               	decfsz	___awdiv@counter& (0+255),f,b
  2929  000840  D7EE               	goto	l2670
  2930  000842                     l2682:
  2931                           
  2932                           ; BSR set to: 0
  2933  000842  5161               	movf	___awdiv@sign& (0+255),w,b
  2934  000844  E004               	bz	l2686
  2935                           
  2936                           ; BSR set to: 0
  2937  000846  6D62               	negf	___awdiv@quotient& (0+255),b
  2938  000848  1F63               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2939  00084A  B0D8               	btfsc	status,0,c
  2940  00084C  2B63               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2941  00084E                     l2686:
  2942                           
  2943                           ; BSR set to: 0
  2944  00084E  C062  F03E         	movff	___awdiv@quotient,?___awdiv
  2945  000852  C063  F03F         	movff	___awdiv@quotient+1,?___awdiv+1
  2946                           
  2947                           ; BSR set to: 0
  2948  000856  0012               	return	
  2949  000858                     __end_of___awdiv:
  2950                           	opt stack 0
  2951  000858                     PL8:
  2952                           	opt stack 20
  2953  000858  0A80               	xorlw	128
  2954  00085A  6EF3               	movwf	prodl,c
  2955  00085C  0E80               	movlw	128
  2956  00085E  5CF3               	subwf	prodl,w,c
  2957  000860  0C00               	retlw	0
  2958  000862                     __end_ofPL8:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           intcon	equ	0xFF2
  2967                           intcon2	equ	0xFF1
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           indf1	equ	0xFE7
  2971                           fsr1h	equ	0xFE2
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           postdec2	equ	0xFDD
  2976                           plusw2	equ	0xFDB
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _Write_b_eep *****************
  2982 ;; Defined at:
  2983 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  badd            2   21[COMRAM] unsigned int 
  2986 ;;  bdat            1   23[COMRAM] unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  GIE_BIT_VAL     1   24[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;		None               void
  2991 ;; Registers used:
  2992 ;;		wreg, status,2
  2993 ;; Tracked objects:
  2994 ;;		On entry : F/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1
  2998 ;;      Params:         3       0       0
  2999 ;;      Locals:         1       0       0
  3000 ;;      Temps:          0       0       0
  3001 ;;      Totals:         4       0       0
  3002 ;;Total ram usage:        4 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    9
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_SaveTime
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text12
  3013  000CCC                     __ptext12:
  3014                           	opt stack 0
  3015  000CCC                     _Write_b_eep:
  3016                           	opt stack 19
  3017                           
  3018                           ; BSR set to: 0
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;incstack = 0
  3022  000CCC  C03E  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  3023  000CD0  C040  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  3024  000CD4  9EA6               	bcf	4006,7,c	;volatile
  3025  000CD6  9CA6               	bcf	4006,6,c	;volatile
  3026  000CD8  84A6               	bsf	4006,2,c	;volatile
  3027                           
  3028                           ; BSR set to: 0
  3029  000CDA  0E00               	movlw	0
  3030  000CDC  BEF2               	btfsc	intcon,7,c	;volatile
  3031  000CDE  0E01               	movlw	1
  3032  000CE0  6E41               	movwf	Write_b_eep@GIE_BIT_VAL,c
  3033                           
  3034                           ; BSR set to: 0
  3035  000CE2  9EF2               	bcf	intcon,7,c	;volatile
  3036                           
  3037                           ; BSR set to: 0
  3038  000CE4  0E55               	movlw	85
  3039  000CE6  6EA7               	movwf	4007,c	;volatile
  3040                           
  3041                           ; BSR set to: 0
  3042  000CE8  0EAA               	movlw	170
  3043  000CEA  6EA7               	movwf	4007,c	;volatile
  3044                           
  3045                           ; BSR set to: 0
  3046  000CEC  82A6               	bsf	4006,1,c	;volatile
  3047  000CEE                     l871:
  3048                           
  3049                           ; BSR set to: 0
  3050  000CEE  B2A6               	btfsc	4006,1,c	;volatile
  3051  000CF0  D7FE               	goto	l871
  3052                           
  3053                           ; BSR set to: 0
  3054  000CF2  B041               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  3055  000CF4  D002               	bra	u1485
  3056  000CF6  9EF2               	bcf	intcon,7,c	;volatile
  3057  000CF8  D001               	bra	u1486
  3058  000CFA                     u1485:
  3059  000CFA  8EF2               	bsf	intcon,7,c	;volatile
  3060  000CFC                     u1486:
  3061  000CFC  94A6               	bcf	4006,2,c	;volatile
  3062  000CFE  0012               	return	
  3063  000D00                     __end_of_Write_b_eep:
  3064                           	opt stack 0
  3065                           tblptru	equ	0xFF8
  3066                           tblptrh	equ	0xFF7
  3067                           tblptrl	equ	0xFF6
  3068                           tablat	equ	0xFF5
  3069                           prodh	equ	0xFF4
  3070                           prodl	equ	0xFF3
  3071                           intcon	equ	0xFF2
  3072                           intcon2	equ	0xFF1
  3073                           postinc0	equ	0xFEE
  3074                           wreg	equ	0xFE8
  3075                           indf1	equ	0xFE7
  3076                           fsr1h	equ	0xFE2
  3077                           fsr1l	equ	0xFE1
  3078                           indf2	equ	0xFDF
  3079                           postinc2	equ	0xFDE
  3080                           postdec2	equ	0xFDD
  3081                           plusw2	equ	0xFDB
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _Busy_eep *****************
  3087 ;; Defined at:
  3088 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\busy_eep.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;		None
  3093 ;; Return value:  Size  Location     Type
  3094 ;;		None               void
  3095 ;; Registers used:
  3096 ;;		None
  3097 ;; Tracked objects:
  3098 ;;		On entry : F/0
  3099 ;;		On exit  : F/0
  3100 ;;		Unchanged: F/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1
  3102 ;;      Params:         0       0       0
  3103 ;;      Locals:         0       0       0
  3104 ;;      Temps:          0       0       0
  3105 ;;      Totals:         0       0       0
  3106 ;;Total ram usage:        0 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    9
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_SaveTime
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text13
  3117  0010CA                     __ptext13:
  3118                           	opt stack 0
  3119  0010CA                     _Busy_eep:
  3120                           	opt stack 19
  3121  0010CA                     l844:
  3122                           
  3123                           ; BSR set to: 0
  3124  0010CA  A2A6               	btfss	4006,1,c	;volatile
  3125  0010CC  0012               	return	
  3126  0010CE  D7FD               	goto	l844
  3127  0010D0                     __end_of_Busy_eep:
  3128                           	opt stack 0
  3129                           tblptru	equ	0xFF8
  3130                           tblptrh	equ	0xFF7
  3131                           tblptrl	equ	0xFF6
  3132                           tablat	equ	0xFF5
  3133                           prodh	equ	0xFF4
  3134                           prodl	equ	0xFF3
  3135                           intcon	equ	0xFF2
  3136                           intcon2	equ	0xFF1
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           indf1	equ	0xFE7
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           indf2	equ	0xFDF
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           plusw2	equ	0xFDB
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function _GetLastTime *****************
  3151 ;; Defined at:
  3152 ;;		line 81 in file "user.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  i               1    4[BANK0 ] unsigned char 
  3157 ;;  value           2    0[BANK0 ] int 
  3158 ;;  read            1    3[BANK0 ] unsigned char 
  3159 ;;  scale           1    2[BANK0 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  2   23[COMRAM] int 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : F/0
  3166 ;;		On exit  : F/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1
  3169 ;;      Params:         2       0       0
  3170 ;;      Locals:         0       5       0
  3171 ;;      Temps:          0       0       0
  3172 ;;      Totals:         2       5       0
  3173 ;;Total ram usage:        7 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:   10
  3176 ;; This function calls:
  3177 ;;		_Read_b_eep
  3178 ;; This function is called by:
  3179 ;;		_SetTimer
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text14
  3184  000AF8                     __ptext14:
  3185                           	opt stack 0
  3186  000AF8                     _GetLastTime:
  3187                           	opt stack 19
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;user.c: 83: int16_t value = 0;
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;incstack = 0
  3194  000AF8  6B60               	clrf	GetLastTime@value& (0+255),b
  3195  000AFA  6B61               	clrf	(GetLastTime@value+1)& (0+255),b
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;user.c: 84: uint8_t scale = 1;
  3199  000AFC  0E01               	movlw	1
  3200  000AFE  6F62               	movwf	GetLastTime@scale& (0+255),b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;user.c: 86: for (uint8_t i = 0; i < 3; i++) {
  3204  000B00  6B64               	clrf	GetLastTime@i& (0+255),b
  3205  000B02                     l2898:
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;user.c: 87: read = Read_b_eep((0x03) + i);
  3209  000B02  0E03               	movlw	3
  3210  000B04  2564               	addwf	GetLastTime@i& (0+255),w,b
  3211  000B06  6E3E               	movwf	Read_b_eep@badd,c
  3212  000B08  6A3F               	clrf	Read_b_eep@badd+1,c
  3213  000B0A  0E00               	movlw	0
  3214  000B0C  223F               	addwfc	Read_b_eep@badd+1,f,c
  3215  000B0E  EC06  F008         	call	_Read_b_eep	;wreg free
  3216  000B12  0100               	movlb	0	; () banked
  3217  000B14  6F63               	movwf	GetLastTime@read& (0+255),b
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;user.c: 88: if (read == 0xFF)
  3221  000B16  2963               	incf	GetLastTime@read& (0+255),w,b
  3222  000B18  B4D8               	btfsc	status,2,c
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;user.c: 89: read = 0;
  3226  000B1A  6B63               	clrf	GetLastTime@read& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;user.c: 90: value += (int16_t) (read * scale);
  3230  000B1C  5163               	movf	GetLastTime@read& (0+255),w,b
  3231  000B1E  0362               	mulwf	GetLastTime@scale& (0+255),b
  3232  000B20  50F3               	movf	prodl,w,c
  3233  000B22  2760               	addwf	GetLastTime@value& (0+255),f,b
  3234  000B24  50F4               	movf	prodh,w,c
  3235  000B26  2361               	addwfc	(GetLastTime@value+1)& (0+255),f,b
  3236                           
  3237                           ;user.c: 91: scale *= 10;
  3238  000B28  0E0A               	movlw	10
  3239  000B2A  0362               	mulwf	GetLastTime@scale& (0+255),b
  3240  000B2C  50F3               	movf	prodl,w,c
  3241  000B2E  6F62               	movwf	GetLastTime@scale& (0+255),b
  3242                           
  3243                           ; BSR set to: 0
  3244  000B30  2B64               	incf	GetLastTime@i& (0+255),f,b
  3245                           
  3246                           ; BSR set to: 0
  3247  000B32  0E02               	movlw	2
  3248  000B34  6564               	cpfsgt	GetLastTime@i& (0+255),b
  3249  000B36  D7E5               	goto	l2898
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;user.c: 92: }
  3253                           ;user.c: 93: return value;
  3254  000B38  C060  F040         	movff	GetLastTime@value,?_GetLastTime
  3255  000B3C  C061  F041         	movff	GetLastTime@value+1,?_GetLastTime+1
  3256                           
  3257                           ; BSR set to: 0
  3258  000B40  0C02               	retlw	2
  3259  000B42                     __end_of_GetLastTime:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           intcon2	equ	0xFF1
  3269                           postinc0	equ	0xFEE
  3270                           wreg	equ	0xFE8
  3271                           indf1	equ	0xFE7
  3272                           fsr1h	equ	0xFE2
  3273                           fsr1l	equ	0xFE1
  3274                           indf2	equ	0xFDF
  3275                           postinc2	equ	0xFDE
  3276                           postdec2	equ	0xFDD
  3277                           plusw2	equ	0xFDB
  3278                           fsr2h	equ	0xFDA
  3279                           fsr2l	equ	0xFD9
  3280                           status	equ	0xFD8
  3281                           
  3282 ;; *************** function _Read_b_eep *****************
  3283 ;; Defined at:
  3284 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  badd            2   21[COMRAM] unsigned int 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      unsigned char 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2
  3293 ;; Tracked objects:
  3294 ;;		On entry : F/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1
  3298 ;;      Params:         2       0       0
  3299 ;;      Locals:         0       0       0
  3300 ;;      Temps:          0       0       0
  3301 ;;      Totals:         2       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    9
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_GetLastTime
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text15
  3313  00100C                     __ptext15:
  3314                           	opt stack 0
  3315  00100C                     _Read_b_eep:
  3316                           	opt stack 19
  3317                           
  3318                           ; BSR set to: 0
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;incstack = 0
  3322  00100C  C03E  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  3323  001010  9CA6               	bcf	4006,6,c	;volatile
  3324  001012  9EA6               	bcf	4006,7,c	;volatile
  3325  001014  80A6               	bsf	4006,0,c	;volatile
  3326  001016  F000               	nop	
  3327  001018  F000               	nop	
  3328  00101A  50A8               	movf	4008,w,c	;volatile
  3329  00101C  0012               	return	
  3330  00101E                     __end_of_Read_b_eep:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           intcon2	equ	0xFF1
  3340                           postinc0	equ	0xFEE
  3341                           wreg	equ	0xFE8
  3342                           indf1	equ	0xFE7
  3343                           fsr1h	equ	0xFE2
  3344                           fsr1l	equ	0xFE1
  3345                           indf2	equ	0xFDF
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           plusw2	equ	0xFDB
  3349                           fsr2h	equ	0xFDA
  3350                           fsr2l	equ	0xFD9
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function _DisplayValue *****************
  3354 ;; Defined at:
  3355 ;;		line 59 in file "display.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  number          2    5[BANK0 ] unsigned int 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  ones            1   10[BANK0 ] unsigned char 
  3360 ;;  tens            1    9[BANK0 ] unsigned char 
  3361 ;;  hund            1    8[BANK0 ] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;		None               void
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : F/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1
  3371 ;;      Params:         0       2       0
  3372 ;;      Locals:         0       3       0
  3373 ;;      Temps:          0       1       0
  3374 ;;      Totals:         0       6       0
  3375 ;;Total ram usage:        6 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:   10
  3378 ;; This function calls:
  3379 ;;		___lwdiv
  3380 ;;		___lwmod
  3381 ;; This function is called by:
  3382 ;;		_TimerOn
  3383 ;;		_SetTimer
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text16
  3388  000862                     __ptext16:
  3389                           	opt stack 0
  3390  000862                     _DisplayValue:
  3391                           	opt stack 19
  3392                           
  3393                           ;display.c: 61: uint8_t hund = (number / 100) % 10;
  3394                           
  3395                           ;incstack = 0
  3396  000862  6A41               	clrf	___lwdiv@divisor+1,c
  3397  000864  0E64               	movlw	100
  3398  000866  6E40               	movwf	___lwdiv@divisor,c
  3399  000868  C065  F03E         	movff	DisplayValue@number,___lwdiv@dividend
  3400  00086C  C066  F03F         	movff	DisplayValue@number+1,___lwdiv@dividend+1
  3401  000870  ECA1  F005         	call	___lwdiv	;wreg free
  3402  000874  D832               	call	PL10	;call to abstracted procedure
  3403  000876  EC09  F006         	call	___lwmod	;wreg free
  3404  00087A  5160               	movf	?___lwmod& (0+255),w,b
  3405  00087C  6F68               	movwf	DisplayValue@hund& (0+255),b
  3406                           
  3407                           ;display.c: 62: uint8_t tens = (number / 10) % 10;
  3408  00087E  6A41               	clrf	___lwdiv@divisor+1,c
  3409  000880  0E0A               	movlw	10
  3410  000882  6E40               	movwf	___lwdiv@divisor,c
  3411  000884  C065  F03E         	movff	DisplayValue@number,___lwdiv@dividend
  3412  000888  C066  F03F         	movff	DisplayValue@number+1,___lwdiv@dividend+1
  3413  00088C  ECA1  F005         	call	___lwdiv	;wreg free
  3414  000890  D824               	call	PL10	;call to abstracted procedure
  3415  000892  EC09  F006         	call	___lwmod	;wreg free
  3416  000896  5160               	movf	?___lwmod& (0+255),w,b
  3417  000898  6F69               	movwf	DisplayValue@tens& (0+255),b
  3418                           
  3419                           ;display.c: 63: uint8_t ones = number % 10;
  3420  00089A  C065  F060         	movff	DisplayValue@number,___lwmod@dividend
  3421  00089E  C066  F061         	movff	DisplayValue@number+1,___lwmod@dividend+1
  3422  0008A2  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  3423  0008A4  0E0A               	movlw	10
  3424  0008A6  6F62               	movwf	___lwmod@divisor& (0+255),b
  3425  0008A8  EC09  F006         	call	___lwmod	;wreg free
  3426  0008AC  5160               	movf	?___lwmod& (0+255),w,b
  3427  0008AE  6F6A               	movwf	DisplayValue@ones& (0+255),b
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;display.c: 64: maxBuffer[0] = digitsArray[hund];
  3431  0008B0  5168               	movf	DisplayValue@hund& (0+255),w,b
  3432  0008B2  D80B               	call	PL6	;call to abstracted procedure
  3433  0008B4  CFF5 F001          	movff	tablat,_maxBuffer	;volatile
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;display.c: 65: maxBuffer[1] = digitsArray[tens];
  3437  0008B8  5169               	movf	DisplayValue@tens& (0+255),w,b
  3438  0008BA  D807               	call	PL6	;call to abstracted procedure
  3439  0008BC  CFF5 F002          	movff	tablat,_maxBuffer+1	;volatile
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;display.c: 66: maxBuffer[2] = digitsArray[ones];
  3443  0008C0  516A               	movf	DisplayValue@ones& (0+255),w,b
  3444  0008C2  D803               	call	PL6	;call to abstracted procedure
  3445  0008C4  CFF5 F003          	movff	tablat,_maxBuffer+2	;volatile
  3446                           
  3447                           ; BSR set to: 0
  3448  0008C8  0012               	return	
  3449  0008CA                     __end_of_DisplayValue:
  3450                           	opt stack 0
  3451  0008CA                     PL6:
  3452                           	opt stack 19
  3453  0008CA  0F76               	addlw	low _digitsArray
  3454  0008CC  6F67               	movwf	??_DisplayValue& (0+255),b
  3455  0008CE  C067  FFF6         	movff	??_DisplayValue,tblptrl
  3456  0008D2                     	if	1	;There is more than 1 active tblptr byte
  3457  0008D2  0E02               	movlw	high __smallconst
  3458  0008D4  6EF7               	movwf	tblptrh,c
  3459  0008D6                     	endif
  3460  0008D6                     	if	0	;tblptru may be non-zero
  3461  0008D6                     	endif
  3462  0008D6                     	if	0	;tblptru may be non-zero
  3463  0008D6                     	endif
  3464  0008D6  0008               	tblrd		*
  3465  0008D8  0012               	return	
  3466  0008DA                     __end_ofPL6:
  3467                           	opt stack 0
  3468  0008DA                     PL10:
  3469                           	opt stack 19
  3470  0008DA  C03E  F060         	movff	?___lwdiv,___lwmod@dividend
  3471  0008DE  C03F  F061         	movff	?___lwdiv+1,___lwmod@dividend+1
  3472  0008E2  0100               	movlb	0	; () banked
  3473  0008E4  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  3474  0008E6  0E0A               	movlw	10
  3475  0008E8  6F62               	movwf	___lwmod@divisor& (0+255),b
  3476  0008EA  0C0A               	retlw	10
  3477  0008EC                     __end_ofPL10:
  3478                           	opt stack 0
  3479                           tblptru	equ	0xFF8
  3480                           tblptrh	equ	0xFF7
  3481                           tblptrl	equ	0xFF6
  3482                           tablat	equ	0xFF5
  3483                           prodh	equ	0xFF4
  3484                           prodl	equ	0xFF3
  3485                           intcon	equ	0xFF2
  3486                           intcon2	equ	0xFF1
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           indf1	equ	0xFE7
  3490                           fsr1h	equ	0xFE2
  3491                           fsr1l	equ	0xFE1
  3492                           indf2	equ	0xFDF
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           plusw2	equ	0xFDB
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function ___lwmod *****************
  3501 ;; Defined at:
  3502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  dividend        2    0[BANK0 ] unsigned int 
  3505 ;;  divisor         2    2[BANK0 ] unsigned int 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  counter         1    4[BANK0 ] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  2    0[BANK0 ] unsigned int 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : F/0
  3514 ;;		On exit  : F/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1
  3517 ;;      Params:         0       4       0
  3518 ;;      Locals:         0       1       0
  3519 ;;      Temps:          0       0       0
  3520 ;;      Totals:         0       5       0
  3521 ;;Total ram usage:        5 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    9
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_DisplayValue
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text17
  3532  000C12                     __ptext17:
  3533                           	opt stack 0
  3534  000C12                     ___lwmod:
  3535                           	opt stack 19
  3536                           
  3537                           ; BSR set to: 0
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;incstack = 0
  3541  000C12  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3542  000C14  1162               	iorwf	___lwmod@divisor& (0+255),w,b
  3543  000C16  E017               	bz	l1399
  3544                           
  3545                           ; BSR set to: 0
  3546  000C18  0E01               	movlw	1
  3547  000C1A  6F64               	movwf	___lwmod@counter& (0+255),b
  3548  000C1C  D004               	goto	l2772
  3549  000C1E                     l2770:
  3550                           
  3551                           ; BSR set to: 0
  3552  000C1E  90D8               	bcf	status,0,c
  3553  000C20  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  3554  000C22  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3555  000C24  2B64               	incf	___lwmod@counter& (0+255),f,b
  3556  000C26                     l2772:
  3557                           
  3558                           ; BSR set to: 0
  3559  000C26  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3560  000C28  D7FA               	goto	l2770
  3561  000C2A                     l2774:
  3562                           
  3563                           ; BSR set to: 0
  3564  000C2A  5162               	movf	___lwmod@divisor& (0+255),w,b
  3565  000C2C  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  3566  000C2E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3567  000C30  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3568  000C32  E304               	bnc	l2778
  3569                           
  3570                           ; BSR set to: 0
  3571  000C34  5162               	movf	___lwmod@divisor& (0+255),w,b
  3572  000C36  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  3573  000C38  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3574  000C3A  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3575  000C3C                     l2778:
  3576                           
  3577                           ; BSR set to: 0
  3578  000C3C  90D8               	bcf	status,0,c
  3579  000C3E  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3580  000C40  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  3581                           
  3582                           ; BSR set to: 0
  3583  000C42  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  3584  000C44  D7F2               	goto	l2774
  3585  000C46                     l1399:
  3586                           
  3587                           ; BSR set to: 0
  3588  000C46  C060  F060         	movff	___lwmod@dividend,?___lwmod
  3589  000C4A  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  3590                           
  3591                           ; BSR set to: 0
  3592  000C4E  0012               	return	
  3593  000C50                     __end_of___lwmod:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           intcon2	equ	0xFF1
  3603                           postinc0	equ	0xFEE
  3604                           wreg	equ	0xFE8
  3605                           indf1	equ	0xFE7
  3606                           fsr1h	equ	0xFE2
  3607                           fsr1l	equ	0xFE1
  3608                           indf2	equ	0xFDF
  3609                           postinc2	equ	0xFDE
  3610                           postdec2	equ	0xFDD
  3611                           plusw2	equ	0xFDB
  3612                           fsr2h	equ	0xFDA
  3613                           fsr2l	equ	0xFD9
  3614                           status	equ	0xFD8
  3615                           
  3616 ;; *************** function ___lwdiv *****************
  3617 ;; Defined at:
  3618 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;  dividend        2   21[COMRAM] unsigned int 
  3621 ;;  divisor         2   23[COMRAM] unsigned int 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  quotient        2   25[COMRAM] unsigned int 
  3624 ;;  counter         1   27[COMRAM] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  2   21[COMRAM] unsigned int 
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1
  3634 ;;      Params:         4       0       0
  3635 ;;      Locals:         3       0       0
  3636 ;;      Temps:          0       0       0
  3637 ;;      Totals:         7       0       0
  3638 ;;Total ram usage:        7 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:    9
  3641 ;; This function calls:
  3642 ;;		Nothing
  3643 ;; This function is called by:
  3644 ;;		_DisplayValue
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text18
  3649  000B42                     __ptext18:
  3650                           	opt stack 0
  3651  000B42                     ___lwdiv:
  3652                           	opt stack 19
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;incstack = 0
  3656  000B42  6A42               	clrf	___lwdiv@quotient,c
  3657  000B44  6A43               	clrf	___lwdiv@quotient+1,c
  3658  000B46  5041               	movf	___lwdiv@divisor+1,w,c
  3659  000B48  1040               	iorwf	___lwdiv@divisor,w,c
  3660  000B4A  E01B               	bz	l1389
  3661  000B4C  0E01               	movlw	1
  3662  000B4E  6E44               	movwf	___lwdiv@counter,c
  3663  000B50  D004               	goto	l2752
  3664  000B52                     l2750:
  3665  000B52  90D8               	bcf	status,0,c
  3666  000B54  3640               	rlcf	___lwdiv@divisor,f,c
  3667  000B56  3641               	rlcf	___lwdiv@divisor+1,f,c
  3668  000B58  2A44               	incf	___lwdiv@counter,f,c
  3669  000B5A                     l2752:
  3670  000B5A  AE41               	btfss	___lwdiv@divisor+1,7,c
  3671  000B5C  D7FA               	goto	l2750
  3672  000B5E                     l2754:
  3673  000B5E  90D8               	bcf	status,0,c
  3674  000B60  3642               	rlcf	___lwdiv@quotient,f,c
  3675  000B62  3643               	rlcf	___lwdiv@quotient+1,f,c
  3676  000B64  5040               	movf	___lwdiv@divisor,w,c
  3677  000B66  5C3E               	subwf	___lwdiv@dividend,w,c
  3678  000B68  5041               	movf	___lwdiv@divisor+1,w,c
  3679  000B6A  583F               	subwfb	___lwdiv@dividend+1,w,c
  3680  000B6C  E305               	bnc	l2762
  3681  000B6E  5040               	movf	___lwdiv@divisor,w,c
  3682  000B70  5E3E               	subwf	___lwdiv@dividend,f,c
  3683  000B72  5041               	movf	___lwdiv@divisor+1,w,c
  3684  000B74  5A3F               	subwfb	___lwdiv@dividend+1,f,c
  3685  000B76  8042               	bsf	___lwdiv@quotient,0,c
  3686  000B78                     l2762:
  3687  000B78  90D8               	bcf	status,0,c
  3688  000B7A  3241               	rrcf	___lwdiv@divisor+1,f,c
  3689  000B7C  3240               	rrcf	___lwdiv@divisor,f,c
  3690  000B7E  2E44               	decfsz	___lwdiv@counter,f,c
  3691  000B80  D7EE               	goto	l2754
  3692  000B82                     l1389:
  3693  000B82  C042  F03E         	movff	___lwdiv@quotient,?___lwdiv
  3694  000B86  C043  F03F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3695  000B8A  0012               	return	
  3696  000B8C                     __end_of___lwdiv:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           intcon2	equ	0xFF1
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           indf1	equ	0xFE7
  3709                           fsr1h	equ	0xFE2
  3710                           fsr1l	equ	0xFE1
  3711                           indf2	equ	0xFDF
  3712                           postinc2	equ	0xFDE
  3713                           postdec2	equ	0xFDD
  3714                           plusw2	equ	0xFDB
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _DisplayMsg *****************
  3720 ;; Defined at:
  3721 ;;		line 76 in file "display.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  msg             1    wreg     PTR const unsigned char 
  3724 ;;		 -> STR_5(4), STR_3(4), 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  msg             1   25[COMRAM] PTR const unsigned char 
  3727 ;;		 -> STR_5(4), STR_3(4), 
  3728 ;;  i               1   26[COMRAM] unsigned char 
  3729 ;;  fValue          1   24[COMRAM] unsigned char 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;		None               void
  3732 ;; Registers used:
  3733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1
  3739 ;;      Params:         0       0       0
  3740 ;;      Locals:         3       0       0
  3741 ;;      Temps:          3       0       0
  3742 ;;      Totals:         6       0       0
  3743 ;;Total ram usage:        6 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    9
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_TimerOn
  3750 ;;		_SetTimer
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text19
  3755  000B8C                     __ptext19:
  3756                           	opt stack 0
  3757  000B8C                     _DisplayMsg:
  3758                           	opt stack 20
  3759                           
  3760                           ;incstack = 0
  3761                           ;DisplayMsg@msg stored from wreg
  3762  000B8C  6E42               	movwf	DisplayMsg@msg,c
  3763                           
  3764                           ;display.c: 78: uint8_t fValue;
  3765                           ;display.c: 79: for (uint8_t i = 0; i < 3; i++) {
  3766  000B8E  6A43               	clrf	DisplayMsg@i,c
  3767  000B90                     l2814:
  3768                           
  3769                           ;display.c: 80: fValue = segmentFont[*(msg + i) - 32];
  3770  000B90  5042               	movf	DisplayMsg@msg,w,c
  3771  000B92  2443               	addwf	DisplayMsg@i,w,c
  3772  000B94  6E3E               	movwf	??_DisplayMsg& (0+255),c
  3773  000B96  C03E  FFF6         	movff	??_DisplayMsg,tblptrl
  3774  000B9A                     	if	1	;There is more than 1 active tblptr byte
  3775  000B9A  0E02               	movlw	high __smallconst
  3776  000B9C  6EF7               	movwf	tblptrh,c
  3777  000B9E                     	endif
  3778  000B9E                     	if	0	;tblptru may be non-zero
  3779  000B9E                     	endif
  3780  000B9E                     	if	0	;tblptru may be non-zero
  3781  000B9E                     	endif
  3782  000B9E  0008               	tblrd		*
  3783  000BA0  CFF5 F03F          	movff	tablat,??_DisplayMsg+1
  3784  000BA4  0EE0               	movlw	224
  3785  000BA6  263F               	addwf	??_DisplayMsg+1,f,c
  3786  000BA8  503F               	movf	??_DisplayMsg+1,w,c
  3787  000BAA  0F01               	addlw	low _segmentFont
  3788  000BAC  6E40               	movwf	(??_DisplayMsg+2)& (0+255),c
  3789  000BAE  C040  FFF6         	movff	??_DisplayMsg+2,tblptrl
  3790  000BB2                     	if	1	;There is more than 1 active tblptr byte
  3791  000BB2  0E02               	movlw	high __smallconst
  3792  000BB4  6EF7               	movwf	tblptrh,c
  3793  000BB6                     	endif
  3794  000BB6                     	if	0	;tblptru may be non-zero
  3795  000BB6                     	endif
  3796  000BB6                     	if	0	;tblptru may be non-zero
  3797  000BB6                     	endif
  3798  000BB6  0008               	tblrd		*
  3799  000BB8  CFF5 F041          	movff	tablat,DisplayMsg@fValue
  3800                           
  3801                           ;display.c: 81: maxBuffer[i] = fValue;
  3802  000BBC  5043               	movf	DisplayMsg@i,w,c
  3803  000BBE  0F01               	addlw	low _maxBuffer	;volatile
  3804  000BC0  6ED9               	movwf	fsr2l,c
  3805  000BC2  6ADA               	clrf	fsr2h,c
  3806  000BC4  C041  FFDF         	movff	DisplayMsg@fValue,indf2
  3807  000BC8  2A43               	incf	DisplayMsg@i,f,c
  3808  000BCA  0E02               	movlw	2
  3809  000BCC  6443               	cpfsgt	DisplayMsg@i,c
  3810  000BCE  D7E0               	goto	l2814
  3811  000BD0  0C02               	retlw	2
  3812  000BD2                     __end_of_DisplayMsg:
  3813                           	opt stack 0
  3814                           tblptru	equ	0xFF8
  3815                           tblptrh	equ	0xFF7
  3816                           tblptrl	equ	0xFF6
  3817                           tablat	equ	0xFF5
  3818                           prodh	equ	0xFF4
  3819                           prodl	equ	0xFF3
  3820                           intcon	equ	0xFF2
  3821                           intcon2	equ	0xFF1
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           indf1	equ	0xFE7
  3825                           fsr1h	equ	0xFE2
  3826                           fsr1l	equ	0xFE1
  3827                           indf2	equ	0xFDF
  3828                           postinc2	equ	0xFDE
  3829                           postdec2	equ	0xFDD
  3830                           plusw2	equ	0xFDB
  3831                           fsr2h	equ	0xFDA
  3832                           fsr2l	equ	0xFD9
  3833                           status	equ	0xFD8
  3834                           
  3835 ;; *************** function _DisplayDP *****************
  3836 ;; Defined at:
  3837 ;;		line 46 in file "display.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  digit           1    wreg     unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  digit           1   21[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : F/0
  3848 ;;		On exit  : F/0
  3849 ;;		Unchanged: F/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1
  3851 ;;      Params:         0       0       0
  3852 ;;      Locals:         1       0       0
  3853 ;;      Temps:          0       0       0
  3854 ;;      Totals:         1       0       0
  3855 ;;Total ram usage:        1 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    9
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_SetTimer
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text20
  3866  001030                     __ptext20:
  3867                           	opt stack 0
  3868  001030                     _DisplayDP:
  3869                           	opt stack 20
  3870                           
  3871                           ;incstack = 0
  3872                           ;DisplayDP@digit stored from wreg
  3873  001030  6E3E               	movwf	DisplayDP@digit,c
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;display.c: 48: (((maxBuffer[digit])) |= 1UL << (7));
  3877  001032  503E               	movf	DisplayDP@digit,w,c
  3878  001034  0F01               	addlw	low _maxBuffer	;volatile
  3879  001036  6ED9               	movwf	fsr2l,c
  3880  001038  6ADA               	clrf	fsr2h,c
  3881  00103A  0E00               	movlw	0
  3882  00103C  8EDB               	bsf	plusw2,7,c
  3883                           
  3884                           ; BSR set to: 0
  3885  00103E  0C00               	retlw	0
  3886  001040                     __end_of_DisplayDP:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           intcon2	equ	0xFF1
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           indf1	equ	0xFE7
  3899                           fsr1h	equ	0xFE2
  3900                           fsr1l	equ	0xFE1
  3901                           indf2	equ	0xFDF
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           plusw2	equ	0xFDB
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _NoTimer *****************
  3910 ;; Defined at:
  3911 ;;		line 163 in file "main.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;		None               void
  3918 ;; Registers used:
  3919 ;;		None
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1
  3925 ;;      Params:         0       0       0
  3926 ;;      Locals:         0       0       0
  3927 ;;      Temps:          0       0       0
  3928 ;;      Totals:         0       0       0
  3929 ;;Total ram usage:        0 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    9
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_main
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text21
  3940  000FBC                     __ptext21:
  3941                           	opt stack 0
  3942  000FBC                     _NoTimer:
  3943                           	opt stack 21
  3944                           
  3945                           ;main.c: 164: if(flag.on){
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;incstack = 0
  3949  000FBC  A619               	btfss	_flag,3,c	;volatile
  3950  000FBE  D005               	goto	l326
  3951                           
  3952                           ;main.c: 165: flag.on = 0;
  3953  000FC0  9619               	bcf	_flag,3,c	;volatile
  3954                           
  3955                           ;main.c: 166: do {hwflag.relay = 1;LATB7 = 1;} while(0);
  3956  000FC2  861A               	bsf	_hwflag,3,c	;volatile
  3957  000FC4  8E8A               	bsf	3978,7,c	;volatile
  3958                           
  3959                           ;main.c: 167: flag.blinkled = 1;
  3960  000FC6  8E19               	bsf	_flag,7,c	;volatile
  3961                           
  3962                           ;main.c: 168: return;
  3963  000FC8  0012               	return	
  3964  000FCA                     l326:
  3965                           
  3966                           ;main.c: 169: }
  3967                           ;main.c: 170: if (flag.secTick == 1)
  3968  000FCA  B019               	btfsc	_flag,0,c	;volatile
  3969                           
  3970                           ;main.c: 171: flag.secTick = 0;
  3971  000FCC  9019               	bcf	_flag,0,c	;volatile
  3972  000FCE  0012               	return	
  3973  000FD0                     __end_of_NoTimer:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           intcon	equ	0xFF2
  3982                           intcon2	equ	0xFF1
  3983                           postinc0	equ	0xFEE
  3984                           wreg	equ	0xFE8
  3985                           indf1	equ	0xFE7
  3986                           fsr1h	equ	0xFE2
  3987                           fsr1l	equ	0xFE1
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           plusw2	equ	0xFDB
  3992                           fsr2h	equ	0xFDA
  3993                           fsr2l	equ	0xFD9
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function _InitSystem *****************
  3997 ;; Defined at:
  3998 ;;		line 40 in file "system.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;		None               void
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMRAM   BANK0   BANK1
  4012 ;;      Params:         0       0       0
  4013 ;;      Locals:         0       0       0
  4014 ;;      Temps:          0       0       0
  4015 ;;      Totals:         0       0       0
  4016 ;;Total ram usage:        0 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:   11
  4019 ;; This function calls:
  4020 ;;		_InitButtons
  4021 ;;		_InitBuzzer
  4022 ;;		_InitEncoder
  4023 ;;		_InitInterrupt
  4024 ;;		_InitOscillator
  4025 ;;		_InitPins
  4026 ;;		_InitRelay
  4027 ;;		_InitStuctures
  4028 ;;		_InitTMR0
  4029 ;;		_InitTMR1
  4030 ;;		_InitTMR3
  4031 ;; This function is called by:
  4032 ;;		_main
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text22
  4037  000C50                     __ptext22:
  4038                           	opt stack 0
  4039  000C50                     _InitSystem:
  4040                           	opt stack 19
  4041                           
  4042                           ;system.c: 43: CCP1CON = 0x00;SSPCON1bits.SSPEN = 0x00;RCSTAbits.SPEN = 0x00;ADCON0bits.
      +                          ADON = 0x00;CM1CON0bits.C1ON = 0x00; CM2CON0bits.C2ON = 0x00;SRCON0bits.SRLEN = 0x00; VR
      +                          EFCON0bits.FVR1EN = 0x00;VREFCON1bits.D1EN = 0x00;
  4043                           
  4044                           ;incstack = 0
  4045  000C50  6ABD               	clrf	4029,c	;volatile
  4046  000C52  9AC6               	bcf	4038,5,c	;volatile
  4047  000C54  9EAB               	bcf	4011,7,c	;volatile
  4048  000C56  90C2               	bcf	4034,0,c	;volatile
  4049  000C58  9E6D               	bcf	3949,7,c	;volatile
  4050  000C5A  9E6B               	bcf	3947,7,c	;volatile
  4051  000C5C  9E68               	bcf	3944,7,c	;volatile
  4052  000C5E  9EBA               	bcf	4026,7,c	;volatile
  4053  000C60  9EBB               	bcf	4027,7,c	;volatile
  4054                           
  4055                           ;system.c: 44: InitOscillator();
  4056  000C62  ECF2  F007         	call	_InitOscillator	;wreg free
  4057                           
  4058                           ;system.c: 45: InitInterrupt();
  4059  000C66  EC36  F008         	call	_InitInterrupt	;wreg free
  4060                           
  4061                           ;system.c: 46: InitPins();
  4062  000C6A  EC9A  F007         	call	_InitPins	;wreg free
  4063                           
  4064                           ;system.c: 47: InitTMR0();
  4065  000C6E  EC0F  F008         	call	_InitTMR0	;wreg free
  4066                           
  4067                           ;system.c: 48: InitTMR1();
  4068  000C72  EC20  F008         	call	_InitTMR1	;wreg free
  4069                           
  4070                           ;system.c: 49: InitTMR3();
  4071  000C76  ECE8  F007         	call	_InitTMR3	;wreg free
  4072                           
  4073                           ;system.c: 50: InitEncoder();
  4074  000C7A  EC9A  F006         	call	_InitEncoder	;wreg free
  4075                           
  4076                           ;system.c: 51: InitButtons();
  4077  000C7E  EC42  F008         	call	_InitButtons	;wreg free
  4078                           
  4079                           ;system.c: 52: InitBuzzer();
  4080  000C82  EC71  F007         	call	_InitBuzzer	;wreg free
  4081                           
  4082                           ;system.c: 53: InitRelay();
  4083  000C86  EC68  F008         	call	_InitRelay	;wreg free
  4084                           
  4085                           ;system.c: 54: InitStuctures();
  4086  000C8A  EF80  F006         	goto	_InitStuctures	;wreg free
  4087  000C8E                     __end_of_InitSystem:
  4088                           	opt stack 0
  4089                           tblptru	equ	0xFF8
  4090                           tblptrh	equ	0xFF7
  4091                           tblptrl	equ	0xFF6
  4092                           tablat	equ	0xFF5
  4093                           prodh	equ	0xFF4
  4094                           prodl	equ	0xFF3
  4095                           intcon	equ	0xFF2
  4096                           intcon2	equ	0xFF1
  4097                           postinc0	equ	0xFEE
  4098                           wreg	equ	0xFE8
  4099                           indf1	equ	0xFE7
  4100                           fsr1h	equ	0xFE2
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           postdec2	equ	0xFDD
  4105                           plusw2	equ	0xFDB
  4106                           fsr2h	equ	0xFDA
  4107                           fsr2l	equ	0xFD9
  4108                           status	equ	0xFD8
  4109                           
  4110 ;; *************** function _InitTMR3 *****************
  4111 ;; Defined at:
  4112 ;;		line 200 in file "timers.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;		None
  4117 ;; Return value:  Size  Location     Type
  4118 ;;		None               void
  4119 ;; Registers used:
  4120 ;;		wreg, status,2
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1
  4126 ;;      Params:         0       0       0
  4127 ;;      Locals:         0       0       0
  4128 ;;      Temps:          0       0       0
  4129 ;;      Totals:         0       0       0
  4130 ;;Total ram usage:        0 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    9
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_InitSystem
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text23
  4141  000FD0                     __ptext23:
  4142                           	opt stack 0
  4143  000FD0                     _InitTMR3:
  4144                           	opt stack 20
  4145                           
  4146                           ;timers.c: 209: T3CON = 0b10000000;
  4147                           
  4148                           ;incstack = 0
  4149  000FD0  0E80               	movlw	128
  4150  000FD2  6EB1               	movwf	4017,c	;volatile
  4151                           
  4152                           ;timers.c: 212: TMR3 = (0x63C0);
  4153  000FD4  0E63               	movlw	99
  4154  000FD6  6EB3               	movwf	4019,c	;volatile
  4155  000FD8  0EC0               	movlw	192
  4156  000FDA  6EB2               	movwf	4018,c	;volatile
  4157                           
  4158                           ;timers.c: 215: PIR2bits.TMR3IF = 0;
  4159  000FDC  92A1               	bcf	4001,1,c	;volatile
  4160                           
  4161                           ;timers.c: 216: PIE2bits.TMR3IE = 1;
  4162  000FDE  82A0               	bsf	4000,1,c	;volatile
  4163  000FE0  80B1               	bsf	4017,0,c	;volatile
  4164  000FE2  0CC0               	retlw	192
  4165  000FE4                     __end_of_InitTMR3:
  4166                           	opt stack 0
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           intcon	equ	0xFF2
  4174                           intcon2	equ	0xFF1
  4175                           postinc0	equ	0xFEE
  4176                           wreg	equ	0xFE8
  4177                           indf1	equ	0xFE7
  4178                           fsr1h	equ	0xFE2
  4179                           fsr1l	equ	0xFE1
  4180                           indf2	equ	0xFDF
  4181                           postinc2	equ	0xFDE
  4182                           postdec2	equ	0xFDD
  4183                           plusw2	equ	0xFDB
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function _InitTMR1 *****************
  4189 ;; Defined at:
  4190 ;;		line 110 in file "timers.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;		None
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;		None               void
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1
  4204 ;;      Params:         0       0       0
  4205 ;;      Locals:         0       0       0
  4206 ;;      Temps:          0       0       0
  4207 ;;      Totals:         0       0       0
  4208 ;;Total ram usage:        0 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:   10
  4211 ;; This function calls:
  4212 ;;		_TMR1_Start
  4213 ;; This function is called by:
  4214 ;;		_InitSystem
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text24
  4219  001040                     __ptext24:
  4220                           	opt stack 0
  4221  001040                     _InitTMR1:
  4222                           	opt stack 19
  4223                           
  4224                           ;timers.c: 120: T1CON = 0x0E;
  4225                           
  4226                           ;incstack = 0
  4227  001040  0E0E               	movlw	14
  4228  001042  6ECD               	movwf	4045,c	;volatile
  4229                           
  4230                           ;timers.c: 122: TMR1H = 0x80;
  4231  001044  0E80               	movlw	128
  4232  001046  6ECF               	movwf	4047,c	;volatile
  4233                           
  4234                           ;timers.c: 125: PIR1bits.TMR1IF = 0;
  4235  001048  909E               	bcf	3998,0,c	;volatile
  4236                           
  4237                           ;timers.c: 128: PIE1bits.TMR1IE = 1;
  4238  00104A  809D               	bsf	3997,0,c	;volatile
  4239                           
  4240                           ;timers.c: 131: TMR1_Start();
  4241  00104C  EF6D  F008         	goto	_TMR1_Start	;wreg free
  4242  001050                     __end_of_InitTMR1:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           intcon	equ	0xFF2
  4251                           intcon2	equ	0xFF1
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           fsr1h	equ	0xFE2
  4256                           fsr1l	equ	0xFE1
  4257                           indf2	equ	0xFDF
  4258                           postinc2	equ	0xFDE
  4259                           postdec2	equ	0xFDD
  4260                           plusw2	equ	0xFDB
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _TMR1_Start *****************
  4266 ;; Defined at:
  4267 ;;		line 134 in file "timers.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;		None               void
  4274 ;; Registers used:
  4275 ;;		None
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1
  4281 ;;      Params:         0       0       0
  4282 ;;      Locals:         0       0       0
  4283 ;;      Temps:          0       0       0
  4284 ;;      Totals:         0       0       0
  4285 ;;Total ram usage:        0 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    9
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_InitTMR1
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text25
  4296  0010DA                     __ptext25:
  4297                           	opt stack 0
  4298  0010DA                     _TMR1_Start:
  4299                           	opt stack 19
  4300                           
  4301                           ;timers.c: 136: T1CONbits.TMR1ON = 1;
  4302                           
  4303                           ;incstack = 0
  4304  0010DA  80CD               	bsf	4045,0,c	;volatile
  4305  0010DC  0012               	return	
  4306  0010DE                     __end_of_TMR1_Start:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           indf1	equ	0xFE7
  4319                           fsr1h	equ	0xFE2
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           plusw2	equ	0xFDB
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function _InitTMR0 *****************
  4330 ;; Defined at:
  4331 ;;		line 40 in file "timers.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;		None               void
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1
  4345 ;;      Params:         0       0       0
  4346 ;;      Locals:         0       0       0
  4347 ;;      Temps:          0       0       0
  4348 ;;      Totals:         0       0       0
  4349 ;;Total ram usage:        0 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:   10
  4352 ;; This function calls:
  4353 ;;		_TMR0_Start
  4354 ;; This function is called by:
  4355 ;;		_InitSystem
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text26
  4360  00101E                     __ptext26:
  4361                           	opt stack 0
  4362  00101E                     _InitTMR0:
  4363                           	opt stack 19
  4364                           
  4365                           ;timers.c: 45: T0CON = 0x52;
  4366                           
  4367                           ;incstack = 0
  4368  00101E  0E52               	movlw	82
  4369  001020  6ED5               	movwf	4053,c	;volatile
  4370                           
  4371                           ;timers.c: 48: TMR0H = 0x00;
  4372  001022  6AD7               	clrf	4055,c	;volatile
  4373                           
  4374                           ;timers.c: 52: TMR0L = (0x06);
  4375  001024  0E06               	movlw	6
  4376  001026  6ED6               	movwf	4054,c	;volatile
  4377                           
  4378                           ;timers.c: 55: INTCONbits.TMR0IF = 0;
  4379  001028  94F2               	bcf	intcon,2,c	;volatile
  4380                           
  4381                           ;timers.c: 58: INTCONbits.TMR0IE = 1;
  4382  00102A  8AF2               	bsf	intcon,5,c	;volatile
  4383                           
  4384                           ;timers.c: 61: TMR0_Start();
  4385  00102C  EF6F  F008         	goto	_TMR0_Start	;wreg free
  4386  001030                     __end_of_InitTMR0:
  4387                           	opt stack 0
  4388                           tblptru	equ	0xFF8
  4389                           tblptrh	equ	0xFF7
  4390                           tblptrl	equ	0xFF6
  4391                           tablat	equ	0xFF5
  4392                           prodh	equ	0xFF4
  4393                           prodl	equ	0xFF3
  4394                           intcon	equ	0xFF2
  4395                           intcon2	equ	0xFF1
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           fsr1h	equ	0xFE2
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           plusw2	equ	0xFDB
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _TMR0_Start *****************
  4410 ;; Defined at:
  4411 ;;		line 64 in file "timers.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;		None
  4416 ;; Return value:  Size  Location     Type
  4417 ;;		None               void
  4418 ;; Registers used:
  4419 ;;		None
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1
  4425 ;;      Params:         0       0       0
  4426 ;;      Locals:         0       0       0
  4427 ;;      Temps:          0       0       0
  4428 ;;      Totals:         0       0       0
  4429 ;;Total ram usage:        0 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    9
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_InitTMR0
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text27
  4440  0010DE                     __ptext27:
  4441                           	opt stack 0
  4442  0010DE                     _TMR0_Start:
  4443                           	opt stack 19
  4444                           
  4445                           ;timers.c: 66: T0CONbits.TMR0ON = 1;
  4446                           
  4447                           ;incstack = 0
  4448  0010DE  8ED5               	bsf	4053,7,c	;volatile
  4449  0010E0  0012               	return	
  4450  0010E2                     __end_of_TMR0_Start:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           intcon2	equ	0xFF1
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           indf1	equ	0xFE7
  4463                           fsr1h	equ	0xFE2
  4464                           fsr1l	equ	0xFE1
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           plusw2	equ	0xFDB
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function _InitStuctures *****************
  4474 ;; Defined at:
  4475 ;;		line 64 in file "globals.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1
  4489 ;;      Params:         0       0       0
  4490 ;;      Locals:         0       0       0
  4491 ;;      Temps:          0       0       0
  4492 ;;      Totals:         0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    9
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_InitSystem
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text28
  4504  000D00                     __ptext28:
  4505                           	opt stack 0
  4506  000D00                     _InitStuctures:
  4507                           	opt stack 20
  4508                           
  4509                           ;globals.c: 65: encoderButton.down = 0;
  4510                           
  4511                           ;incstack = 0
  4512  000D00  901D               	bcf	_encoderButton,0,c	;volatile
  4513                           
  4514                           ;globals.c: 66: encoderButton.latched = 0;
  4515  000D02  921D               	bcf	_encoderButton,1,c	;volatile
  4516                           
  4517                           ;globals.c: 67: encoderButton.pressed = 0;
  4518  000D04  941D               	bcf	_encoderButton,2,c	;volatile
  4519                           
  4520                           ;globals.c: 68: encoderButton.port = &PORTB;
  4521  000D06  0E0F               	movlw	15	;volatile
  4522  000D08  6E1F               	movwf	_encoderButton+2,c	;volatile
  4523  000D0A  0E81               	movlw	129	;volatile
  4524  000D0C  6E1E               	movwf	_encoderButton+1,c	;volatile
  4525                           
  4526                           ;globals.c: 69: encoderButton.pin = 6;
  4527  000D0E  0E06               	movlw	6
  4528  000D10  6E20               	movwf	_encoderButton+3,c	;volatile
  4529                           
  4530                           ;globals.c: 70: encoderButton.debounce = 0;
  4531  000D12  6A21               	clrf	_encoderButton+4,c	;volatile
  4532  000D14  6A22               	clrf	_encoderButton+5,c	;volatile
  4533                           
  4534                           ;globals.c: 72: ledButton.down = 0;
  4535  000D16  9023               	bcf	_ledButton,0,c	;volatile
  4536                           
  4537                           ;globals.c: 73: ledButton.latched = 0;
  4538  000D18  9223               	bcf	_ledButton,1,c	;volatile
  4539                           
  4540                           ;globals.c: 74: ledButton.pressed = 0;
  4541  000D1A  9423               	bcf	_ledButton,2,c	;volatile
  4542                           
  4543                           ;globals.c: 75: ledButton.port = &PORTC;
  4544  000D1C  0E0F               	movlw	15	;volatile
  4545  000D1E  6E25               	movwf	_ledButton+2,c	;volatile
  4546  000D20  0E82               	movlw	130	;volatile
  4547  000D22  6E24               	movwf	_ledButton+1,c	;volatile
  4548                           
  4549                           ;globals.c: 76: ledButton.pin = 0;
  4550  000D24  6A26               	clrf	_ledButton+3,c	;volatile
  4551                           
  4552                           ;globals.c: 77: ledButton.debounce = 0;
  4553  000D26  6A27               	clrf	_ledButton+4,c	;volatile
  4554  000D28  6A28               	clrf	_ledButton+5,c	;volatile
  4555                           
  4556                           ;globals.c: 86: buts[0] = &encoderButton;
  4557  000D2A  0E1D               	movlw	low _encoderButton	;volatile
  4558  000D2C  6E0D               	movwf	_buts,c
  4559                           
  4560                           ;globals.c: 87: buts[1] = &ledButton;
  4561  000D2E  0E23               	movlw	low _ledButton	;volatile
  4562  000D30  6E0E               	movwf	_buts+1,c
  4563  000D32  0012               	return	
  4564  000D34                     __end_of_InitStuctures:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           intcon2	equ	0xFF1
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           indf1	equ	0xFE7
  4577                           fsr1h	equ	0xFE2
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           plusw2	equ	0xFDB
  4583                           fsr2h	equ	0xFDA
  4584                           fsr2l	equ	0xFD9
  4585                           status	equ	0xFD8
  4586                           
  4587 ;; *************** function _InitRelay *****************
  4588 ;; Defined at:
  4589 ;;		line 76 in file "pins.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;		None
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;		None               void
  4596 ;; Registers used:
  4597 ;;		None
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1
  4603 ;;      Params:         0       0       0
  4604 ;;      Locals:         0       0       0
  4605 ;;      Temps:          0       0       0
  4606 ;;      Totals:         0       0       0
  4607 ;;Total ram usage:        0 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    9
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_InitSystem
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text29
  4618  0010D0                     __ptext29:
  4619                           	opt stack 0
  4620  0010D0                     _InitRelay:
  4621                           	opt stack 20
  4622                           
  4623                           ;pins.c: 78: LATB7 = 0;
  4624                           
  4625                           ;incstack = 0
  4626  0010D0  9E8A               	bcf	3978,7,c	;volatile
  4627                           
  4628                           ;pins.c: 79: TRISB7 = 0;
  4629  0010D2  9E93               	bcf	3987,7,c	;volatile
  4630  0010D4  0012               	return	
  4631  0010D6                     __end_of_InitRelay:
  4632                           	opt stack 0
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           intcon2	equ	0xFF1
  4641                           postinc0	equ	0xFEE
  4642                           wreg	equ	0xFE8
  4643                           indf1	equ	0xFE7
  4644                           fsr1h	equ	0xFE2
  4645                           fsr1l	equ	0xFE1
  4646                           indf2	equ	0xFDF
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           plusw2	equ	0xFDB
  4650                           fsr2h	equ	0xFDA
  4651                           fsr2l	equ	0xFD9
  4652                           status	equ	0xFD8
  4653                           
  4654 ;; *************** function _InitPins *****************
  4655 ;; Defined at:
  4656 ;;		line 41 in file "pins.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;		None               void
  4663 ;; Registers used:
  4664 ;;		None
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1
  4670 ;;      Params:         0       0       0
  4671 ;;      Locals:         0       0       0
  4672 ;;      Temps:          0       0       0
  4673 ;;      Totals:         0       0       0
  4674 ;;Total ram usage:        0 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    9
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_InitSystem
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text30
  4685  000F34                     __ptext30:
  4686                           	opt stack 0
  4687  000F34                     _InitPins:
  4688                           	opt stack 20
  4689                           
  4690                           ;pins.c: 42: LATA = 0x00;LATB = 0x00;LATC = 0x00;TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;
  4691                           
  4692                           ;incstack = 0
  4693  000F34  6A89               	clrf	3977,c	;volatile
  4694  000F36  6A8A               	clrf	3978,c	;volatile
  4695  000F38  6A8B               	clrf	3979,c	;volatile
  4696  000F3A  6892               	setf	3986,c	;volatile
  4697  000F3C  6893               	setf	3987,c	;volatile
  4698  000F3E  6894               	setf	3988,c	;volatile
  4699                           
  4700                           ;pins.c: 43: ANSEL = 0x00; ANSELH = 0x00;
  4701  000F40  6A7E               	clrf	3966,c	;volatile
  4702  000F42  6A7F               	clrf	3967,c	;volatile
  4703                           
  4704                           ;pins.c: 44: WPUB = 0x00; WPUA =0x00; INTCON2bits.nRBPU = 1;
  4705  000F44  6A78               	clrf	3960,c	;volatile
  4706  000F46  6A77               	clrf	3959,c	;volatile
  4707  000F48  8EF1               	bsf	intcon2,7,c	;volatile
  4708  000F4A  0012               	return	
  4709  000F4C                     __end_of_InitPins:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           prodh	equ	0xFF4
  4716                           prodl	equ	0xFF3
  4717                           intcon	equ	0xFF2
  4718                           intcon2	equ	0xFF1
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           indf1	equ	0xFE7
  4722                           fsr1h	equ	0xFE2
  4723                           fsr1l	equ	0xFE1
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           plusw2	equ	0xFDB
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732 ;; *************** function _InitOscillator *****************
  4733 ;; Defined at:
  4734 ;;		line 59 in file "system.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;		None
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;		None
  4739 ;; Return value:  Size  Location     Type
  4740 ;;		None               void
  4741 ;; Registers used:
  4742 ;;		wreg, status,2
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1
  4748 ;;      Params:         0       0       0
  4749 ;;      Locals:         0       0       0
  4750 ;;      Temps:          0       0       0
  4751 ;;      Totals:         0       0       0
  4752 ;;Total ram usage:        0 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    9
  4755 ;; This function calls:
  4756 ;;		Nothing
  4757 ;; This function is called by:
  4758 ;;		_InitSystem
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text31
  4763  000FE4                     __ptext31:
  4764                           	opt stack 0
  4765  000FE4                     _InitOscillator:
  4766                           	opt stack 20
  4767                           
  4768                           ;system.c: 62: OSCCONbits.IRCF = 0x06;
  4769                           
  4770                           ;incstack = 0
  4771  000FE4  50D3               	movf	4051,w,c	;volatile
  4772  000FE6  0B8F               	andlw	-113
  4773  000FE8  0960               	iorlw	96
  4774  000FEA  6ED3               	movwf	4051,c	;volatile
  4775                           
  4776                           ;system.c: 64: OSCCONbits.SCS = 0x00;
  4777  000FEC  0EFC               	movlw	-4
  4778  000FEE  16D3               	andwf	4051,f,c	;volatile
  4779                           
  4780                           ;system.c: 69: OSCCON2bits.PRI_SD = 0;
  4781  000FF0  94D2               	bcf	4050,2,c	;volatile
  4782                           
  4783                           ;system.c: 71: OSCTUNEbits.PLLEN = 0;
  4784  000FF2  9C9B               	bcf	3995,6,c	;volatile
  4785                           
  4786                           ;system.c: 72: OSCTUNEbits.INTSRC = 0;
  4787  000FF4  9E9B               	bcf	3995,7,c	;volatile
  4788  000FF6  0CFC               	retlw	252
  4789  000FF8                     __end_of_InitOscillator:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           intcon2	equ	0xFF1
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           indf1	equ	0xFE7
  4802                           fsr1h	equ	0xFE2
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           plusw2	equ	0xFDB
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _InitInterrupt *****************
  4813 ;; Defined at:
  4814 ;;		line 40 in file "interrupt.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;		None               void
  4821 ;; Registers used:
  4822 ;;		None
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1
  4828 ;;      Params:         0       0       0
  4829 ;;      Locals:         0       0       0
  4830 ;;      Temps:          0       0       0
  4831 ;;      Totals:         0       0       0
  4832 ;;Total ram usage:        0 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    9
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_InitSystem
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text32
  4843  00106C                     __ptext32:
  4844                           	opt stack 0
  4845  00106C                     _InitInterrupt:
  4846                           	opt stack 20
  4847                           
  4848                           ;interrupt.c: 43: RCONbits.IPEN = 1;
  4849                           
  4850                           ;incstack = 0
  4851  00106C  8ED0               	bsf	4048,7,c	;volatile
  4852                           
  4853                           ;interrupt.c: 48: IPR1bits.TMR1IP = 1;
  4854  00106E  809F               	bsf	3999,0,c	;volatile
  4855                           
  4856                           ;interrupt.c: 51: INTCON2bits.TMR0IP = 0;
  4857  001070  94F1               	bcf	intcon2,2,c	;volatile
  4858                           
  4859                           ;interrupt.c: 54: IPR2bits.TMR3IP = 1;
  4860  001072  82A2               	bsf	4002,1,c	;volatile
  4861                           
  4862                           ;interrupt.c: 57: INTCON2bits.RABIP = 0;
  4863  001074  90F1               	bcf	intcon2,0,c	;volatile
  4864  001076  0012               	return	
  4865  001078                     __end_of_InitInterrupt:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           intcon2	equ	0xFF1
  4875                           postinc0	equ	0xFEE
  4876                           wreg	equ	0xFE8
  4877                           indf1	equ	0xFE7
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           indf2	equ	0xFDF
  4881                           postinc2	equ	0xFDE
  4882                           postdec2	equ	0xFDD
  4883                           plusw2	equ	0xFDB
  4884                           fsr2h	equ	0xFDA
  4885                           fsr2l	equ	0xFD9
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _InitEncoder *****************
  4889 ;; Defined at:
  4890 ;;		line 84 in file "encoder.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;		None               void
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1
  4904 ;;      Params:         0       0       0
  4905 ;;      Locals:         0       0       0
  4906 ;;      Temps:          0       0       0
  4907 ;;      Totals:         0       0       0
  4908 ;;Total ram usage:        0 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    9
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_InitSystem
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text33
  4919  000D34                     __ptext33:
  4920                           	opt stack 0
  4921  000D34                     _InitEncoder:
  4922                           	opt stack 20
  4923                           
  4924                           ;encoder.c: 86: TRISBbits.RB4 = 1;
  4925                           
  4926                           ;incstack = 0
  4927  000D34  8893               	bsf	3987,4,c	;volatile
  4928                           
  4929                           ;encoder.c: 87: TRISBbits.RB5 = 1;
  4930  000D36  8A93               	bsf	3987,5,c	;volatile
  4931                           
  4932                           ;encoder.c: 88: TRISBbits.RB6 = 1;
  4933  000D38  8C93               	bsf	3987,6,c	;volatile
  4934                           
  4935                           ;encoder.c: 90: WPUBbits.WPUB4 = 1;
  4936  000D3A  8878               	bsf	3960,4,c	;volatile
  4937                           
  4938                           ;encoder.c: 91: WPUBbits.WPUB5 = 1;
  4939  000D3C  8A78               	bsf	3960,5,c	;volatile
  4940                           
  4941                           ;encoder.c: 92: WPUBbits.WPUB6 = 1;
  4942  000D3E  8C78               	bsf	3960,6,c	;volatile
  4943                           
  4944                           ;encoder.c: 93: (INTCON2bits.nRBPU = 0);
  4945  000D40  9EF1               	bcf	intcon2,7,c	;volatile
  4946                           
  4947                           ;encoder.c: 95: IOCBbits.IOCB4 = 1;
  4948  000D42  887A               	bsf	3962,4,c	;volatile
  4949                           
  4950                           ;encoder.c: 96: IOCBbits.IOCB5 = 1;
  4951  000D44  8A7A               	bsf	3962,5,c	;volatile
  4952                           
  4953                           ;encoder.c: 98: coder.newstate = ((PORTB >> 4) & 0x03);
  4954  000D46  3881               	swapf	3969,w,c	;volatile
  4955  000D48  0B0F               	andlw	15
  4956  000D4A  0B03               	andlw	3
  4957  000D4C  6E45               	movwf	_coder,c	;volatile
  4958                           
  4959                           ;encoder.c: 99: coder.oldstate = coder.newstate;
  4960  000D4E  C045  F046         	movff	_coder,_coder+1	;volatile
  4961                           
  4962                           ;encoder.c: 100: coder.direction = 0;
  4963  000D52  6A48               	clrf	_coder+3,c	;volatile
  4964                           
  4965                           ;encoder.c: 101: coder.count = 0;
  4966  000D54  6A49               	clrf	_coder+4,c	;volatile
  4967  000D56  6A4A               	clrf	_coder+5,c	;volatile
  4968                           
  4969                           ;encoder.c: 103: INTCONbits.RABIF = 0;
  4970  000D58  90F2               	bcf	intcon,0,c	;volatile
  4971                           
  4972                           ;encoder.c: 107: INTCONbits.RABIE = 1;
  4973  000D5A  86F2               	bsf	intcon,3,c	;volatile
  4974  000D5C  0012               	return	
  4975  000D5E                     __end_of_InitEncoder:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           intcon2	equ	0xFF1
  4985                           postinc0	equ	0xFEE
  4986                           wreg	equ	0xFE8
  4987                           indf1	equ	0xFE7
  4988                           fsr1h	equ	0xFE2
  4989                           fsr1l	equ	0xFE1
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           plusw2	equ	0xFDB
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function _InitBuzzer *****************
  4999 ;; Defined at:
  5000 ;;		line 55 in file "pins.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;		None               void
  5007 ;; Registers used:
  5008 ;;		wreg, status,2
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1
  5014 ;;      Params:         0       0       0
  5015 ;;      Locals:         0       0       0
  5016 ;;      Temps:          0       0       0
  5017 ;;      Totals:         0       0       0
  5018 ;;Total ram usage:        0 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    9
  5021 ;; This function calls:
  5022 ;;		Nothing
  5023 ;; This function is called by:
  5024 ;;		_InitSystem
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text34
  5029  000EE2                     __ptext34:
  5030                           	opt stack 0
  5031  000EE2                     _InitBuzzer:
  5032                           	opt stack 20
  5033                           
  5034                           ;pins.c: 56: TRISC5 = 0;
  5035                           
  5036                           ;incstack = 0
  5037  000EE2  9A94               	bcf	3988,5,c	;volatile
  5038                           
  5039                           ;pins.c: 58: ECCP1ASbits.ECCPAS = 0x00;
  5040  000EE4  0E8F               	movlw	-113
  5041  000EE6  16B6               	andwf	4022,f,c	;volatile
  5042                           
  5043                           ;pins.c: 60: PSTRCON = 0x10;
  5044  000EE8  0E10               	movlw	16
  5045  000EEA  6EB9               	movwf	4025,c	;volatile
  5046                           
  5047                           ;pins.c: 69: PR2 = 0b10110110;
  5048  000EEC  0EB6               	movlw	182
  5049  000EEE  6ECB               	movwf	4043,c	;volatile
  5050                           
  5051                           ;pins.c: 70: T2CON = 0b00000101;
  5052  000EF0  0E05               	movlw	5
  5053  000EF2  6ECA               	movwf	4042,c	;volatile
  5054                           
  5055                           ;pins.c: 72: CCPR1L = 0b00010010;
  5056  000EF4  0E12               	movlw	18
  5057  000EF6  6EBE               	movwf	4030,c	;volatile
  5058                           
  5059                           ;pins.c: 73: CCP1CON = 0b00111100;
  5060  000EF8  0E3C               	movlw	60
  5061  000EFA  6EBD               	movwf	4029,c	;volatile
  5062  000EFC  0C3C               	retlw	60
  5063  000EFE                     __end_of_InitBuzzer:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           intcon2	equ	0xFF1
  5073                           postinc0	equ	0xFEE
  5074                           wreg	equ	0xFE8
  5075                           indf1	equ	0xFE7
  5076                           fsr1h	equ	0xFE2
  5077                           fsr1l	equ	0xFE1
  5078                           indf2	equ	0xFDF
  5079                           postinc2	equ	0xFDE
  5080                           postdec2	equ	0xFDD
  5081                           plusw2	equ	0xFDB
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _InitButtons *****************
  5087 ;; Defined at:
  5088 ;;		line 47 in file "pins.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;		None               void
  5095 ;; Registers used:
  5096 ;;		None
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1
  5102 ;;      Params:         0       0       0
  5103 ;;      Locals:         0       0       0
  5104 ;;      Temps:          0       0       0
  5105 ;;      Totals:         0       0       0
  5106 ;;Total ram usage:        0 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    9
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_InitSystem
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text35
  5117  001084                     __ptext35:
  5118                           	opt stack 0
  5119  001084                     _InitButtons:
  5120                           	opt stack 20
  5121                           
  5122                           ;pins.c: 48: TRISC0 = 1;
  5123                           
  5124                           ;incstack = 0
  5125  001084  8094               	bsf	3988,0,c	;volatile
  5126                           
  5127                           ;pins.c: 49: TRISC1 = 0;
  5128  001086  9294               	bcf	3988,1,c	;volatile
  5129                           
  5130                           ;pins.c: 52: do {hwflag.bled = 1;LATC1 = 1;} while(0);
  5131  001088  881A               	bsf	_hwflag,4,c	;volatile
  5132  00108A  828B               	bsf	3979,1,c	;volatile
  5133  00108C  0012               	return	
  5134  00108E                     __end_of_InitButtons:
  5135                           	opt stack 0
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodh	equ	0xFF4
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           intcon2	equ	0xFF1
  5144                           postinc0	equ	0xFEE
  5145                           wreg	equ	0xFE8
  5146                           indf1	equ	0xFE7
  5147                           fsr1h	equ	0xFE2
  5148                           fsr1l	equ	0xFE1
  5149                           indf2	equ	0xFDF
  5150                           postinc2	equ	0xFDE
  5151                           postdec2	equ	0xFDD
  5152                           plusw2	equ	0xFDB
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _InitDisplay *****************
  5158 ;; Defined at:
  5159 ;;		line 41 in file "display.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;		None               void
  5166 ;; Registers used:
  5167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1
  5173 ;;      Params:         0       0       0
  5174 ;;      Locals:         0       0       0
  5175 ;;      Temps:          0       0       0
  5176 ;;      Totals:         0       0       0
  5177 ;;Total ram usage:        0 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:   14
  5180 ;; This function calls:
  5181 ;;		_MAX7219_New
  5182 ;; This function is called by:
  5183 ;;		_main
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text36
  5188  0010A2                     __ptext36:
  5189                           	opt stack 0
  5190  0010A2                     _InitDisplay:
  5191                           	opt stack 16
  5192                           
  5193                           ;display.c: 42: MAX7219_New();
  5194                           
  5195                           ;incstack = 0
  5196  0010A2  ECFC  F007         	call	_MAX7219_New	;wreg free
  5197                           
  5198                           ;display.c: 43: hwflag.disp_on = 1;
  5199  0010A6  821A               	bsf	_hwflag,1,c	;volatile
  5200  0010A8  0012               	return	
  5201  0010AA                     __end_of_InitDisplay:
  5202                           	opt stack 0
  5203                           tblptru	equ	0xFF8
  5204                           tblptrh	equ	0xFF7
  5205                           tblptrl	equ	0xFF6
  5206                           tablat	equ	0xFF5
  5207                           prodh	equ	0xFF4
  5208                           prodl	equ	0xFF3
  5209                           intcon	equ	0xFF2
  5210                           intcon2	equ	0xFF1
  5211                           postinc0	equ	0xFEE
  5212                           wreg	equ	0xFE8
  5213                           indf1	equ	0xFE7
  5214                           fsr1h	equ	0xFE2
  5215                           fsr1l	equ	0xFE1
  5216                           indf2	equ	0xFDF
  5217                           postinc2	equ	0xFDE
  5218                           postdec2	equ	0xFDD
  5219                           plusw2	equ	0xFDB
  5220                           fsr2h	equ	0xFDA
  5221                           fsr2l	equ	0xFD9
  5222                           status	equ	0xFD8
  5223                           
  5224 ;; *************** function _MAX7219_New *****************
  5225 ;; Defined at:
  5226 ;;		line 42 in file "max7219.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  codeMask        1    0        unsigned char 
  5231 ;;  numberDigits    1    0        unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1
  5241 ;;      Params:         0       0       0
  5242 ;;      Locals:         0       2       0
  5243 ;;      Temps:          0       0       0
  5244 ;;      Totals:         0       2       0
  5245 ;;Total ram usage:        2 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:   13
  5248 ;; This function calls:
  5249 ;;		_MAX7219_Init
  5250 ;;		_MAX7219_SetDecode
  5251 ;;		_MAX7219_SetIntensity
  5252 ;;		_MAX7219_SetScanLimit
  5253 ;;		_MAX7219_TurnOn
  5254 ;; This function is called by:
  5255 ;;		_InitDisplay
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text37
  5260  000FF8                     __ptext37:
  5261                           	opt stack 0
  5262  000FF8                     _MAX7219_New:
  5263                           	opt stack 16
  5264                           
  5265                           ;max7219.c: 46: MAX7219_Init();
  5266                           
  5267                           ;incstack = 0
  5268  000FF8  EC8D  F007         	call	_MAX7219_Init	;wreg free
  5269                           
  5270                           ;max7219.c: 47: MAX7219_SetScanLimit(numberDigits);
  5271  000FFC  0E02               	movlw	2
  5272  000FFE  EC28  F008         	call	_MAX7219_SetScanLimit
  5273                           
  5274                           ;max7219.c: 56: }
  5275                           ;max7219.c: 58: MAX7219_SetIntensity(7);
  5276                           
  5277                           ;max7219.c: 49: if(0){
  5278  001002  0E07               	movlw	7
  5279  001004  EC2F  F008         	call	_MAX7219_SetIntensity
  5280                           
  5281                           ;max7219.c: 60: MAX7219_TurnOn();
  5282  001008  EF47  F008         	goto	_MAX7219_TurnOn	;wreg free
  5283  00100C                     __end_of_MAX7219_New:
  5284                           	opt stack 0
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           intcon	equ	0xFF2
  5292                           intcon2	equ	0xFF1
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           indf1	equ	0xFE7
  5296                           fsr1h	equ	0xFE2
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           postdec2	equ	0xFDD
  5301                           plusw2	equ	0xFDB
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _MAX7219_SetScanLimit *****************
  5307 ;; Defined at:
  5308 ;;		line 159 in file "max7219.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  limit           1    wreg     unsigned char 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  limit           1   25[COMRAM] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;		None               void
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1
  5322 ;;      Params:         0       0       0
  5323 ;;      Locals:         1       0       0
  5324 ;;      Temps:          0       0       0
  5325 ;;      Totals:         1       0       0
  5326 ;;Total ram usage:        1 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:   11
  5329 ;; This function calls:
  5330 ;;		_MAX7219_SetRegister
  5331 ;; This function is called by:
  5332 ;;		_MAX7219_New
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           	psect	text38
  5337  001050                     __ptext38:
  5338                           	opt stack 0
  5339  001050                     _MAX7219_SetScanLimit:
  5340                           	opt stack 17
  5341                           
  5342                           ;incstack = 0
  5343                           ;MAX7219_SetScanLimit@limit stored from wreg
  5344  001050  6E42               	movwf	MAX7219_SetScanLimit@limit,c
  5345                           
  5346                           ;max7219.c: 161: MAX7219_SetRegister(0x0B, limit & 0x07);
  5347  001052  5042               	movf	MAX7219_SetScanLimit@limit,w,c
  5348  001054  0B07               	andlw	7
  5349  001056  6E40               	movwf	MAX7219_SetRegister@data,c
  5350  001058  0E0B               	movlw	11
  5351  00105A  EFC8  F007         	goto	_MAX7219_SetRegister
  5352  00105E                     __end_of_MAX7219_SetScanLimit:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           intcon2	equ	0xFF1
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           indf1	equ	0xFE7
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           plusw2	equ	0xFDB
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375 ;; *************** function _MAX7219_SetIntensity *****************
  5376 ;; Defined at:
  5377 ;;		line 164 in file "max7219.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  intensity       1    wreg     unsigned char 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  intensity       1   25[COMRAM] unsigned char 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;		None               void
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1
  5391 ;;      Params:         0       0       0
  5392 ;;      Locals:         1       0       0
  5393 ;;      Temps:          0       0       0
  5394 ;;      Totals:         1       0       0
  5395 ;;Total ram usage:        1 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:   11
  5398 ;; This function calls:
  5399 ;;		_MAX7219_SetRegister
  5400 ;; This function is called by:
  5401 ;;		_MAX7219_New
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text39
  5406  00105E                     __ptext39:
  5407                           	opt stack 0
  5408  00105E                     _MAX7219_SetIntensity:
  5409                           	opt stack 17
  5410                           
  5411                           ;incstack = 0
  5412                           ;MAX7219_SetIntensity@intensity stored from wreg
  5413  00105E  6E42               	movwf	MAX7219_SetIntensity@intensity,c
  5414                           
  5415                           ;max7219.c: 166: MAX7219_SetRegister(0x0A, intensity & 0x0F);
  5416  001060  5042               	movf	MAX7219_SetIntensity@intensity,w,c
  5417  001062  0B0F               	andlw	15
  5418  001064  6E40               	movwf	MAX7219_SetRegister@data,c
  5419  001066  0E0A               	movlw	10
  5420  001068  EFC8  F007         	goto	_MAX7219_SetRegister
  5421  00106C                     __end_of_MAX7219_SetIntensity:
  5422                           	opt stack 0
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           prodh	equ	0xFF4
  5428                           prodl	equ	0xFF3
  5429                           intcon	equ	0xFF2
  5430                           intcon2	equ	0xFF1
  5431                           postinc0	equ	0xFEE
  5432                           wreg	equ	0xFE8
  5433                           indf1	equ	0xFE7
  5434                           fsr1h	equ	0xFE2
  5435                           fsr1l	equ	0xFE1
  5436                           indf2	equ	0xFDF
  5437                           postinc2	equ	0xFDE
  5438                           postdec2	equ	0xFDD
  5439                           plusw2	equ	0xFDB
  5440                           fsr2h	equ	0xFDA
  5441                           fsr2l	equ	0xFD9
  5442                           status	equ	0xFD8
  5443                           
  5444 ;; *************** function _MAX7219_SetDecode *****************
  5445 ;; Defined at:
  5446 ;;		line 97 in file "max7219.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  digits          1    wreg     unsigned char 
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;  digits          1   25[COMRAM] unsigned char 
  5451 ;; Return value:  Size  Location     Type
  5452 ;;		None               void
  5453 ;; Registers used:
  5454 ;;		wreg, status,2, status,0, cstack
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMRAM   BANK0   BANK1
  5460 ;;      Params:         0       0       0
  5461 ;;      Locals:         1       0       0
  5462 ;;      Temps:          0       0       0
  5463 ;;      Totals:         1       0       0
  5464 ;;Total ram usage:        1 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:   11
  5467 ;; This function calls:
  5468 ;;		_MAX7219_SetRegister
  5469 ;; This function is called by:
  5470 ;;		_MAX7219_New
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           	psect	text40
  5475  001078                     __ptext40:
  5476                           	opt stack 0
  5477  001078                     _MAX7219_SetDecode:
  5478                           	opt stack 17
  5479                           
  5480                           ;incstack = 0
  5481                           ;MAX7219_SetDecode@digits stored from wreg
  5482  001078  6E42               	movwf	MAX7219_SetDecode@digits,c
  5483                           
  5484                           ;max7219.c: 99: MAX7219_SetRegister(0x09, digits);
  5485  00107A  C042  F040         	movff	MAX7219_SetDecode@digits,MAX7219_SetRegister@data
  5486  00107E  0E09               	movlw	9
  5487  001080  EFC8  F007         	goto	_MAX7219_SetRegister
  5488  001084                     __end_of_MAX7219_SetDecode:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           intcon	equ	0xFF2
  5497                           intcon2	equ	0xFF1
  5498                           postinc0	equ	0xFEE
  5499                           wreg	equ	0xFE8
  5500                           indf1	equ	0xFE7
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           plusw2	equ	0xFDB
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _MAX7219_Init *****************
  5512 ;; Defined at:
  5513 ;;		line 63 in file "max7219.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1
  5527 ;;      Params:         0       0       0
  5528 ;;      Locals:         0       0       0
  5529 ;;      Temps:          0       0       0
  5530 ;;      Totals:         0       0       0
  5531 ;;Total ram usage:        0 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:   12
  5534 ;; This function calls:
  5535 ;;		_MAX7219_Clear
  5536 ;;		_MAX7219_NormalMode
  5537 ;; This function is called by:
  5538 ;;		_MAX7219_New
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text41
  5543  000F1A                     __ptext41:
  5544                           	opt stack 0
  5545  000F1A                     _MAX7219_Init:
  5546                           	opt stack 16
  5547                           
  5548                           ;max7219.c: 66: LATC6 = 0;
  5549                           
  5550                           ;incstack = 0
  5551  000F1A  9C8B               	bcf	3979,6,c	;volatile
  5552                           
  5553                           ;max7219.c: 67: LATC3 = 0;
  5554  000F1C  968B               	bcf	3979,3,c	;volatile
  5555                           
  5556                           ;max7219.c: 68: LATC7 = 0;
  5557  000F1E  9E8B               	bcf	3979,7,c	;volatile
  5558                           
  5559                           ;max7219.c: 69: __nop();
  5560  000F20  F000               	nop	
  5561                           
  5562                           ;max7219.c: 72: TRISC7 = 0;
  5563  000F22  9E94               	bcf	3988,7,c	;volatile
  5564                           
  5565                           ;max7219.c: 73: TRISC3 = 0;
  5566  000F24  9694               	bcf	3988,3,c	;volatile
  5567                           
  5568                           ;max7219.c: 74: TRISC6 = 0;
  5569  000F26  9C94               	bcf	3988,6,c	;volatile
  5570                           
  5571                           ;max7219.c: 75: __nop();
  5572  000F28  F000               	nop	
  5573                           
  5574                           ;max7219.c: 78: LATC6 = 1;
  5575  000F2A  8C8B               	bsf	3979,6,c	;volatile
  5576                           
  5577                           ;max7219.c: 82: MAX7219_NormalMode();
  5578  000F2C  EC55  F008         	call	_MAX7219_NormalMode	;wreg free
  5579                           
  5580                           ;max7219.c: 84: MAX7219_Clear();
  5581  000F30  EFAF  F006         	goto	_MAX7219_Clear	;wreg free
  5582  000F34                     __end_of_MAX7219_Init:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           intcon2	equ	0xFF1
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           indf1	equ	0xFE7
  5595                           fsr1h	equ	0xFE2
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           plusw2	equ	0xFDB
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function _MAX7219_NormalMode *****************
  5606 ;; Defined at:
  5607 ;;		line 102 in file "max7219.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, status,0, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1
  5621 ;;      Params:         0       0       0
  5622 ;;      Locals:         0       0       0
  5623 ;;      Temps:          0       0       0
  5624 ;;      Totals:         0       0       0
  5625 ;;Total ram usage:        0 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:   11
  5628 ;; This function calls:
  5629 ;;		_MAX7219_SetRegister
  5630 ;; This function is called by:
  5631 ;;		_MAX7219_Init
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text42
  5636  0010AA                     __ptext42:
  5637                           	opt stack 0
  5638  0010AA                     _MAX7219_NormalMode:
  5639                           	opt stack 16
  5640                           
  5641                           ;max7219.c: 104: MAX7219_SetRegister(0x0F, 0x00);
  5642                           
  5643                           ;incstack = 0
  5644  0010AA  6A40               	clrf	MAX7219_SetRegister@data,c
  5645  0010AC  0E0F               	movlw	15
  5646  0010AE  EFC8  F007         	goto	_MAX7219_SetRegister
  5647  0010B2                     __end_of_MAX7219_NormalMode:
  5648                           	opt stack 0
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           prodh	equ	0xFF4
  5654                           prodl	equ	0xFF3
  5655                           intcon	equ	0xFF2
  5656                           intcon2	equ	0xFF1
  5657                           postinc0	equ	0xFEE
  5658                           wreg	equ	0xFE8
  5659                           indf1	equ	0xFE7
  5660                           fsr1h	equ	0xFE2
  5661                           fsr1l	equ	0xFE1
  5662                           indf2	equ	0xFDF
  5663                           postinc2	equ	0xFDE
  5664                           postdec2	equ	0xFDD
  5665                           plusw2	equ	0xFDB
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670 ;; *************** function _MAX7219_Clear *****************
  5671 ;; Defined at:
  5672 ;;		line 170 in file "max7219.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  i               1   26[COMRAM] unsigned char 
  5677 ;;  i               1   25[COMRAM] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;		None               void
  5680 ;; Registers used:
  5681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMRAM   BANK0   BANK1
  5687 ;;      Params:         0       0       0
  5688 ;;      Locals:         2       0       0
  5689 ;;      Temps:          0       0       0
  5690 ;;      Totals:         2       0       0
  5691 ;;Total ram usage:        2 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:   11
  5694 ;; This function calls:
  5695 ;;		_MAX7219_SetRegister
  5696 ;; This function is called by:
  5697 ;;		_MAX7219_Init
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text43
  5702  000D5E                     __ptext43:
  5703                           	opt stack 0
  5704  000D5E                     _MAX7219_Clear:
  5705                           	opt stack 16
  5706                           
  5707                           ;max7219.c: 172: for (uint8_t i = 0; i < 3; i++) {
  5708                           
  5709                           ;incstack = 0
  5710  000D5E  6A42               	clrf	MAX7219_Clear@i,c
  5711  000D60                     l2568:
  5712                           
  5713                           ;max7219.c: 173: maxBuffer[i] = 0x00;
  5714  000D60  5042               	movf	MAX7219_Clear@i,w,c
  5715  000D62  0F01               	addlw	low _maxBuffer	;volatile
  5716  000D64  6ED9               	movwf	fsr2l,c
  5717  000D66  6ADA               	clrf	fsr2h,c
  5718  000D68  6ADF               	clrf	indf2,c
  5719  000D6A  2A42               	incf	MAX7219_Clear@i,f,c
  5720  000D6C  0E02               	movlw	2
  5721  000D6E  6442               	cpfsgt	MAX7219_Clear@i,c
  5722  000D70  D7F7               	goto	l2568
  5723                           
  5724                           ;max7219.c: 174: }
  5725                           ;max7219.c: 175: for (uint8_t i = 0; i< 3; ++i){
  5726  000D72  6A43               	clrf	MAX7219_Clear@i_1175,c
  5727  000D74                     l2578:
  5728                           
  5729                           ;max7219.c: 176: MAX7219_SetRegister((i+1),0x00);
  5730  000D74  6A40               	clrf	MAX7219_SetRegister@data,c
  5731  000D76  2843               	incf	MAX7219_Clear@i_1175,w,c
  5732  000D78  ECC8  F007         	call	_MAX7219_SetRegister
  5733  000D7C  2A43               	incf	MAX7219_Clear@i_1175,f,c
  5734  000D7E  0E02               	movlw	2
  5735  000D80  6443               	cpfsgt	MAX7219_Clear@i_1175,c
  5736  000D82  D7F8               	goto	l2578
  5737  000D84  0C02               	retlw	2
  5738  000D86                     __end_of_MAX7219_Clear:
  5739                           	opt stack 0
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           prodh	equ	0xFF4
  5745                           prodl	equ	0xFF3
  5746                           intcon	equ	0xFF2
  5747                           intcon2	equ	0xFF1
  5748                           postinc0	equ	0xFEE
  5749                           wreg	equ	0xFE8
  5750                           indf1	equ	0xFE7
  5751                           fsr1h	equ	0xFE2
  5752                           fsr1l	equ	0xFE1
  5753                           indf2	equ	0xFDF
  5754                           postinc2	equ	0xFDE
  5755                           postdec2	equ	0xFDD
  5756                           plusw2	equ	0xFDB
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _HandleButtons *****************
  5762 ;; Defined at:
  5763 ;;		line 227 in file "user.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  wait            2   25[COMRAM] unsigned int 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;		None               void
  5770 ;; Registers used:
  5771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1
  5777 ;;      Params:         0       0       0
  5778 ;;      Locals:         2       0       0
  5779 ;;      Temps:          0       0       0
  5780 ;;      Totals:         2       0       0
  5781 ;;Total ram usage:        2 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:   13
  5784 ;; This function calls:
  5785 ;;		_ClearButtonsAndTimers
  5786 ;;		_DisplayClear
  5787 ;;		_DisplayOn
  5788 ;; This function is called by:
  5789 ;;		_main
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text44
  5794  0005A0                     __ptext44:
  5795                           	opt stack 0
  5796  0005A0                     _HandleButtons:
  5797                           	opt stack 17
  5798                           
  5799                           ;user.c: 228: static uint16_t holdCount = 0;
  5800                           ;user.c: 230: if (LATB7 == 1 || hwflag.relay == 1) {
  5801                           
  5802                           ;incstack = 0
  5803  0005A0  BE8A               	btfsc	3978,7,c	;volatile
  5804  0005A2  D002               	goto	l809
  5805  0005A4  A61A               	btfss	_hwflag,3,c	;volatile
  5806  0005A6  D054               	goto	l3148
  5807  0005A8                     l809:
  5808                           
  5809                           ;user.c: 231: if (ledButton.pressed || encoderButton.pressed) {
  5810  0005A8  B423               	btfsc	_ledButton,2,c	;volatile
  5811  0005AA  D002               	goto	l813
  5812  0005AC  A41D               	btfss	_encoderButton,2,c	;volatile
  5813  0005AE  0012               	return	
  5814  0005B0                     l813:
  5815  0005B0  961A               	bcf	_hwflag,3,c	;volatile
  5816  0005B2  9E8A               	bcf	3978,7,c	;volatile
  5817                           
  5818                           ;user.c: 233: do {hwflag.bled = 1;LATC1 = 1;} while(0);
  5819  0005B4  881A               	bsf	_hwflag,4,c	;volatile
  5820  0005B6  828B               	bsf	3979,1,c	;volatile
  5821                           
  5822                           ;user.c: 234: ClearButtonsAndTimers();
  5823  0005B8  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  5824                           
  5825                           ;user.c: 235: flag.blinkled = 0;
  5826  0005BC  9E19               	bcf	_flag,7,c	;volatile
  5827                           
  5828                           ;user.c: 236: flag.stop = 1;
  5829  0005BE  8A19               	bsf	_flag,5,c	;volatile
  5830                           
  5831                           ;user.c: 237: mainState = STOP_CALLED;
  5832  0005C0  0E05               	movlw	5
  5833  0005C2  6E1B               	movwf	_mainState,c	;volatile
  5834  0005C4  0C05               	retlw	5
  5835  0005C6                     l819:
  5836                           
  5837                           ;user.c: 242: if (ledButton.pressed) {
  5838  0005C6  A423               	btfss	_ledButton,2,c	;volatile
  5839  0005C8  0012               	return	
  5840                           
  5841                           ;user.c: 243: ClearButtonsAndTimers();
  5842  0005CA  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  5843                           
  5844                           ;user.c: 244: flag.ready = 0;
  5845  0005CE  9C19               	bcf	_flag,6,c	;volatile
  5846  0005D0                     l3106:
  5847                           
  5848                           ;user.c: 245: mainState = SET_TIMER;
  5849  0005D0  0E01               	movlw	1
  5850  0005D2  6E1B               	movwf	_mainState,c	;volatile
  5851  0005D4  0C01               	retlw	1
  5852  0005D6                     l822:
  5853                           
  5854                           ;user.c: 249: if (ledButton.pressed) {
  5855  0005D6  A423               	btfss	_ledButton,2,c	;volatile
  5856  0005D8  0012               	return	
  5857                           
  5858                           ;user.c: 250: ClearButtonsAndTimers();
  5859  0005DA  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  5860                           
  5861                           ;user.c: 251: if (hwflag.disp_on == 0) {
  5862  0005DE  A21A               	btfss	_hwflag,1,c	;volatile
  5863                           
  5864                           ;user.c: 252: DisplayOn();
  5865  0005E0  EC59  F008         	call	_DisplayOn	;wreg free
  5866                           
  5867                           ;user.c: 253: }
  5868                           ;user.c: 254: flag.on = 1;
  5869  0005E4  8619               	bsf	_flag,3,c	;volatile
  5870                           
  5871                           ;user.c: 255: mainState = TIMER_ON;
  5872  0005E6  0E03               	movlw	3
  5873  0005E8  6E1B               	movwf	_mainState,c	;volatile
  5874  0005EA  0C03               	retlw	3
  5875  0005EC                     l825:
  5876                           
  5877                           ;user.c: 259: if (ledButton.pressed) {
  5878  0005EC  A423               	btfss	_ledButton,2,c	;volatile
  5879  0005EE  0012               	return	
  5880                           
  5881                           ;user.c: 260: ClearButtonsAndTimers();
  5882  0005F0  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  5883                           
  5884                           ;user.c: 261: if (hwflag.disp_on == 0)
  5885  0005F4  A21A               	btfss	_hwflag,1,c	;volatile
  5886                           
  5887                           ;user.c: 262: DisplayOn();
  5888  0005F6  EC59  F008         	call	_DisplayOn	;wreg free
  5889                           
  5890                           ;user.c: 263: if (hwflag.buzzer)
  5891  0005FA  A41A               	btfss	_hwflag,2,c	;volatile
  5892  0005FC  D7E9               	goto	l3106
  5893                           
  5894                           ;user.c: 264: do {hwflag.buzzer = 0;PSTRCONbits.STRA = 0;} while(0);
  5895  0005FE  941A               	bcf	_hwflag,2,c	;volatile
  5896  000600  90B9               	bcf	4025,0,c	;volatile
  5897  000602  D7E6               	goto	l3106
  5898  000604                     l831:
  5899                           
  5900                           ;user.c: 270: if (ledButton.latched && (holdCount < tmrCount)) {
  5901  000604  A223               	btfss	_ledButton,1,c	;volatile
  5902  000606  D01B               	goto	l832
  5903  000608  5015               	movf	_tmrCount,w,c	;volatile
  5904  00060A  5C09               	subwf	HandleButtons@holdCount,w,c
  5905  00060C  5016               	movf	_tmrCount+1,w,c	;volatile
  5906  00060E  580A               	subwfb	HandleButtons@holdCount+1,w,c
  5907  000610  E216               	bc	l832
  5908                           
  5909                           ;user.c: 271: DisplayClear();
  5910  000612  ECBD  F007         	call	_DisplayClear	;wreg free
  5911  000616                     l3132:
  5912                           
  5913                           ;user.c: 272: uint16_t wait = tmrCount + 250;
  5914  000616  0EFA               	movlw	250
  5915  000618  2415               	addwf	_tmrCount,w,c	;volatile
  5916  00061A  6E42               	movwf	HandleButtons@wait,c
  5917  00061C  0E00               	movlw	0
  5918  00061E  2016               	addwfc	_tmrCount+1,w,c	;volatile
  5919  000620  6E43               	movwf	HandleButtons@wait+1,c
  5920                           
  5921                           ;user.c: 273: while (wait > tmrCount){
  5922  000622  D002               	goto	l833
  5923  000624                     l834:
  5924                           
  5925                           ;user.c: 274: if(ledButton.latched)
  5926  000624  B223               	btfsc	_ledButton,1,c	;volatile
  5927  000626  D7F7               	goto	l3132
  5928  000628                     l833:
  5929  000628  5042               	movf	HandleButtons@wait,w,c
  5930  00062A  5C15               	subwf	_tmrCount,w,c	;volatile
  5931  00062C  5043               	movf	HandleButtons@wait+1,w,c
  5932  00062E  5816               	subwfb	_tmrCount+1,w,c	;volatile
  5933  000630  E3F9               	bnc	l834
  5934                           
  5935                           ;user.c: 276: }
  5936                           ;user.c: 277: ClearButtonsAndTimers();
  5937  000632  EC30  F007         	call	_ClearButtonsAndTimers	;wreg free
  5938                           
  5939                           ;user.c: 278: flag.stop = 0;
  5940  000636  9A19               	bcf	_flag,5,c	;volatile
  5941                           
  5942                           ;user.c: 279: flag.ready = 1;
  5943  000638  8C19               	bsf	_flag,6,c	;volatile
  5944                           
  5945                           ;user.c: 280: mainState = POWER_ON;
  5946  00063A  6A1B               	clrf	_mainState,c	;volatile
  5947                           
  5948                           ;user.c: 281: }else if (!ledButton.latched) {
  5949  00063C  0012               	return	
  5950  00063E                     l832:
  5951  00063E  B223               	btfsc	_ledButton,1,c	;volatile
  5952  000640  0012               	return	
  5953                           
  5954                           ;user.c: 282: holdCount = tmrCount + 750L;
  5955  000642  0EEE               	movlw	238
  5956  000644  2415               	addwf	_tmrCount,w,c	;volatile
  5957  000646  6E09               	movwf	HandleButtons@holdCount,c
  5958  000648  0E02               	movlw	2
  5959  00064A  2016               	addwfc	_tmrCount+1,w,c	;volatile
  5960  00064C  6E0A               	movwf	HandleButtons@holdCount+1,c
  5961  00064E  0012               	return	
  5962  000650                     l3148:
  5963  000650  501B               	movf	_mainState,w,c	;volatile
  5964                           
  5965                           ; Switch size 1, requested type "space"
  5966                           ; Number of cases is 4, Range of values is 0 to 5
  5967                           ; switch strategies available:
  5968                           ; Name         Instructions Cycles
  5969                           ; simple_byte           13     7 (average)
  5970                           ;	Chosen strategy is simple_byte
  5971  000652  E0B9               	bz	l819
  5972  000654  0A02               	xorlw	2	; case 2
  5973  000656  E0BF               	bz	l822
  5974  000658  0A06               	xorlw	6	; case 4
  5975  00065A  E0C8               	bz	l825
  5976  00065C  0A01               	xorlw	1	; case 5
  5977  00065E  A4D8               	btfss	status,2,c
  5978  000660  0012               	return	
  5979  000662  D7D0               	goto	l831
  5980  000664                     __end_of_HandleButtons:
  5981                           	opt stack 0
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           intcon2	equ	0xFF1
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           indf1	equ	0xFE7
  5993                           fsr1h	equ	0xFE2
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           postinc2	equ	0xFDE
  5997                           postdec2	equ	0xFDD
  5998                           plusw2	equ	0xFDB
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function _DisplayClear *****************
  6004 ;; Defined at:
  6005 ;;		line 148 in file "display.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;		None
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  x               1   21[COMRAM] unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;		None               void
  6012 ;; Registers used:
  6013 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1
  6019 ;;      Params:         0       0       0
  6020 ;;      Locals:         1       0       0
  6021 ;;      Temps:          0       0       0
  6022 ;;      Totals:         1       0       0
  6023 ;;Total ram usage:        1 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    9
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_ScrollMessage
  6030 ;;		_HandleButtons
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text45
  6035  000F7A                     __ptext45:
  6036                           	opt stack 0
  6037  000F7A                     _DisplayClear:
  6038                           	opt stack 19
  6039                           
  6040                           ;display.c: 151: for (uint8_t x = 0; x < 3; x++) {
  6041                           
  6042                           ;incstack = 0
  6043  000F7A  6A3E               	clrf	DisplayClear@x,c
  6044  000F7C                     l2590:
  6045                           
  6046                           ;display.c: 152: maxBuffer[x] = 0;
  6047  000F7C  503E               	movf	DisplayClear@x,w,c
  6048  000F7E  0F01               	addlw	low _maxBuffer	;volatile
  6049  000F80  6ED9               	movwf	fsr2l,c
  6050  000F82  6ADA               	clrf	fsr2h,c
  6051  000F84  6ADF               	clrf	indf2,c
  6052  000F86  2A3E               	incf	DisplayClear@x,f,c
  6053  000F88  0E02               	movlw	2
  6054  000F8A  643E               	cpfsgt	DisplayClear@x,c
  6055  000F8C  D7F7               	goto	l2590
  6056  000F8E  0C02               	retlw	2
  6057  000F90                     __end_of_DisplayClear:
  6058                           	opt stack 0
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           intcon2	equ	0xFF1
  6067                           postinc0	equ	0xFEE
  6068                           wreg	equ	0xFE8
  6069                           indf1	equ	0xFE7
  6070                           fsr1h	equ	0xFE2
  6071                           fsr1l	equ	0xFE1
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           plusw2	equ	0xFDB
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _ClearButtonsAndTimers *****************
  6081 ;; Defined at:
  6082 ;;		line 100 in file "globals.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  i               1   21[COMRAM] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1
  6096 ;;      Params:         0       0       0
  6097 ;;      Locals:         1       0       0
  6098 ;;      Temps:          0       0       0
  6099 ;;      Totals:         1       0       0
  6100 ;;Total ram usage:        1 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    9
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_main
  6107 ;;		_SetTimer
  6108 ;;		_HandleButtons
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           	psect	text46
  6113  000E60                     __ptext46:
  6114                           	opt stack 0
  6115  000E60                     _ClearButtonsAndTimers:
  6116                           	opt stack 20
  6117                           
  6118                           ;globals.c: 102: for(uint8_t i = 0; i < 2; i++){
  6119                           
  6120                           ;incstack = 0
  6121  000E60  6A3E               	clrf	ClearButtonsAndTimers@i,c
  6122  000E62                     l2882:
  6123                           
  6124                           ;globals.c: 103: buts[i]->pressed = 0;
  6125  000E62  503E               	movf	ClearButtonsAndTimers@i,w,c
  6126  000E64  ECDA  F003         	call	PL2	;call to abstracted procedure
  6127  000E68  94DF               	bcf	indf2,2,c
  6128                           
  6129                           ;globals.c: 104: buts[i]->debounce = 0;
  6130  000E6A  503E               	movf	ClearButtonsAndTimers@i,w,c
  6131  000E6C  ECDA  F003         	call	PL2	;call to abstracted procedure
  6132  000E70  0E04               	movlw	4
  6133  000E72  26D9               	addwf	fsr2l,f,c
  6134  000E74  6ADE               	clrf	postinc2,c
  6135  000E76  6ADD               	clrf	postdec2,c
  6136  000E78  2A3E               	incf	ClearButtonsAndTimers@i,f,c
  6137  000E7A  0E01               	movlw	1
  6138  000E7C  643E               	cpfsgt	ClearButtonsAndTimers@i,c
  6139  000E7E  D7F1               	goto	l2882
  6140  000E80  0C01               	retlw	1
  6141  000E82                     __end_of_ClearButtonsAndTimers:
  6142                           	opt stack 0
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           intcon	equ	0xFF2
  6150                           intcon2	equ	0xFF1
  6151                           postinc0	equ	0xFEE
  6152                           wreg	equ	0xFE8
  6153                           indf1	equ	0xFE7
  6154                           fsr1h	equ	0xFE2
  6155                           fsr1l	equ	0xFE1
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           plusw2	equ	0xFDB
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _FlashDisplay *****************
  6165 ;; Defined at:
  6166 ;;		line 126 in file "display.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1
  6180 ;;      Params:         0       0       0
  6181 ;;      Locals:         0       0       0
  6182 ;;      Temps:          0       0       0
  6183 ;;      Totals:         0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:   13
  6187 ;; This function calls:
  6188 ;;		_DisplayOff
  6189 ;;		_DisplayOn
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text47
  6196  000EFE                     __ptext47:
  6197                           	opt stack 0
  6198  000EFE                     _FlashDisplay:
  6199                           	opt stack 17
  6200                           
  6201                           ;display.c: 127: if(flag.halfsec == 1 && signal.display == 1){
  6202                           
  6203                           ;incstack = 0
  6204  000EFE  B419               	btfsc	_flag,2,c	;volatile
  6205  000F00  A61C               	btfss	_signal,3,c	;volatile
  6206  000F02  D004               	goto	l83
  6207                           
  6208                           ;display.c: 128: DisplayOff();
  6209  000F04  EC5D  F008         	call	_DisplayOff	;wreg free
  6210                           
  6211                           ;display.c: 129: signal.display = 0;
  6212  000F08  961C               	bcf	_signal,3,c	;volatile
  6213                           
  6214                           ;display.c: 130: }else if(flag.halfsec == 0 && signal.display == 0){
  6215  000F0A  0012               	return	
  6216  000F0C                     l83:
  6217  000F0C  A419               	btfss	_flag,2,c	;volatile
  6218  000F0E  B61C               	btfsc	_signal,3,c	;volatile
  6219  000F10  0012               	return	
  6220                           
  6221                           ;display.c: 131: DisplayOn();
  6222  000F12  EC59  F008         	call	_DisplayOn	;wreg free
  6223                           
  6224                           ;display.c: 132: signal.display = 1;
  6225  000F16  861C               	bsf	_signal,3,c	;volatile
  6226  000F18  0012               	return	
  6227  000F1A                     __end_of_FlashDisplay:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           intcon	equ	0xFF2
  6236                           intcon2	equ	0xFF1
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           indf1	equ	0xFE7
  6240                           fsr1h	equ	0xFE2
  6241                           fsr1l	equ	0xFE1
  6242                           indf2	equ	0xFDF
  6243                           postinc2	equ	0xFDE
  6244                           postdec2	equ	0xFDD
  6245                           plusw2	equ	0xFDB
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function _DisplayOn *****************
  6251 ;; Defined at:
  6252 ;;		line 136 in file "display.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;		None               void
  6259 ;; Registers used:
  6260 ;;		wreg, status,2, status,0, cstack
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMRAM   BANK0   BANK1
  6266 ;;      Params:         0       0       0
  6267 ;;      Locals:         0       0       0
  6268 ;;      Temps:          0       0       0
  6269 ;;      Totals:         0       0       0
  6270 ;;Total ram usage:        0 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:   12
  6273 ;; This function calls:
  6274 ;;		_MAX7219_TurnOn
  6275 ;; This function is called by:
  6276 ;;		_FlashDisplay
  6277 ;;		_main
  6278 ;;		_HandleButtons
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text48
  6283  0010B2                     __ptext48:
  6284                           	opt stack 0
  6285  0010B2                     _DisplayOn:
  6286                           	opt stack 17
  6287                           
  6288                           ;display.c: 138: MAX7219_TurnOn();
  6289                           
  6290                           ;incstack = 0
  6291  0010B2  EC47  F008         	call	_MAX7219_TurnOn	;wreg free
  6292                           
  6293                           ;display.c: 139: hwflag.disp_on = 1;
  6294  0010B6  821A               	bsf	_hwflag,1,c	;volatile
  6295  0010B8  0012               	return	
  6296  0010BA                     __end_of_DisplayOn:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           intcon2	equ	0xFF1
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           indf1	equ	0xFE7
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           plusw2	equ	0xFDB
  6315                           fsr2h	equ	0xFDA
  6316                           fsr2l	equ	0xFD9
  6317                           status	equ	0xFD8
  6318                           
  6319 ;; *************** function _MAX7219_TurnOn *****************
  6320 ;; Defined at:
  6321 ;;		line 92 in file "max7219.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;		None
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;		None               void
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1
  6335 ;;      Params:         0       0       0
  6336 ;;      Locals:         0       0       0
  6337 ;;      Temps:          0       0       0
  6338 ;;      Totals:         0       0       0
  6339 ;;Total ram usage:        0 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:   11
  6342 ;; This function calls:
  6343 ;;		_MAX7219_SetRegister
  6344 ;; This function is called by:
  6345 ;;		_DisplayOn
  6346 ;;		_MAX7219_New
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text49
  6351  00108E                     __ptext49:
  6352                           	opt stack 0
  6353  00108E                     _MAX7219_TurnOn:
  6354                           	opt stack 17
  6355                           
  6356                           ;max7219.c: 94: MAX7219_SetRegister(0x0C, 0x01);
  6357                           
  6358                           ;incstack = 0
  6359  00108E  0E01               	movlw	1
  6360  001090  6E40               	movwf	MAX7219_SetRegister@data,c
  6361  001092  0E0C               	movlw	12
  6362  001094  EFC8  F007         	goto	_MAX7219_SetRegister
  6363  001098                     __end_of_MAX7219_TurnOn:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           intcon2	equ	0xFF1
  6373                           postinc0	equ	0xFEE
  6374                           wreg	equ	0xFE8
  6375                           indf1	equ	0xFE7
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           plusw2	equ	0xFDB
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8
  6385                           
  6386 ;; *************** function _DisplayOff *****************
  6387 ;; Defined at:
  6388 ;;		line 142 in file "display.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;		None
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;		None               void
  6395 ;; Registers used:
  6396 ;;		wreg, status,2, status,0, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMRAM   BANK0   BANK1
  6402 ;;      Params:         0       0       0
  6403 ;;      Locals:         0       0       0
  6404 ;;      Temps:          0       0       0
  6405 ;;      Totals:         0       0       0
  6406 ;;Total ram usage:        0 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:   12
  6409 ;; This function calls:
  6410 ;;		_MAX7219_Shutdown
  6411 ;; This function is called by:
  6412 ;;		_FlashDisplay
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text50
  6417  0010BA                     __ptext50:
  6418                           	opt stack 0
  6419  0010BA                     _DisplayOff:
  6420                           	opt stack 17
  6421                           
  6422                           ;display.c: 144: MAX7219_Shutdown();
  6423                           
  6424                           ;incstack = 0
  6425  0010BA  EC61  F008         	call	_MAX7219_Shutdown	;wreg free
  6426                           
  6427                           ;display.c: 145: hwflag.disp_on = 0;
  6428  0010BE  921A               	bcf	_hwflag,1,c	;volatile
  6429  0010C0  0012               	return	
  6430  0010C2                     __end_of_DisplayOff:
  6431                           	opt stack 0
  6432                           tblptru	equ	0xFF8
  6433                           tblptrh	equ	0xFF7
  6434                           tblptrl	equ	0xFF6
  6435                           tablat	equ	0xFF5
  6436                           prodh	equ	0xFF4
  6437                           prodl	equ	0xFF3
  6438                           intcon	equ	0xFF2
  6439                           intcon2	equ	0xFF1
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           indf1	equ	0xFE7
  6443                           fsr1h	equ	0xFE2
  6444                           fsr1l	equ	0xFE1
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           plusw2	equ	0xFDB
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function _MAX7219_Shutdown *****************
  6454 ;; Defined at:
  6455 ;;		line 87 in file "max7219.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;		None
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;		None
  6460 ;; Return value:  Size  Location     Type
  6461 ;;		None               void
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1
  6469 ;;      Params:         0       0       0
  6470 ;;      Locals:         0       0       0
  6471 ;;      Temps:          0       0       0
  6472 ;;      Totals:         0       0       0
  6473 ;;Total ram usage:        0 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:   11
  6476 ;; This function calls:
  6477 ;;		_MAX7219_SetRegister
  6478 ;; This function is called by:
  6479 ;;		_DisplayOff
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text51
  6484  0010C2                     __ptext51:
  6485                           	opt stack 0
  6486  0010C2                     _MAX7219_Shutdown:
  6487                           	opt stack 17
  6488                           
  6489                           ;max7219.c: 89: MAX7219_SetRegister(0x0C, 0x00);
  6490                           
  6491                           ;incstack = 0
  6492  0010C2  6A40               	clrf	MAX7219_SetRegister@data,c
  6493  0010C4  0E0C               	movlw	12
  6494  0010C6  EFC8  F007         	goto	_MAX7219_SetRegister
  6495  0010CA                     __end_of_MAX7219_Shutdown:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           intcon2	equ	0xFF1
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           indf1	equ	0xFE7
  6508                           fsr1h	equ	0xFE2
  6509                           fsr1l	equ	0xFE1
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           postdec2	equ	0xFDD
  6513                           plusw2	equ	0xFDB
  6514                           fsr2h	equ	0xFDA
  6515                           fsr2l	equ	0xFD9
  6516                           status	equ	0xFD8
  6517                           
  6518 ;; *************** function _MAX7219_SetRegister *****************
  6519 ;; Defined at:
  6520 ;;		line 132 in file "max7219.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;  reg             1    wreg     unsigned char 
  6523 ;;  data            1   23[COMRAM] unsigned char 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  reg             1   24[COMRAM] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1
  6535 ;;      Params:         1       0       0
  6536 ;;      Locals:         1       0       0
  6537 ;;      Temps:          0       0       0
  6538 ;;      Totals:         2       0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:   10
  6542 ;; This function calls:
  6543 ;;		_MAX7219_ShiftByte
  6544 ;; This function is called by:
  6545 ;;		_MAX7219_Shutdown
  6546 ;;		_MAX7219_TurnOn
  6547 ;;		_MAX7219_SetDecode
  6548 ;;		_MAX7219_NormalMode
  6549 ;;		_MAX7219_SetScanLimit
  6550 ;;		_MAX7219_SetIntensity
  6551 ;;		_MAX7219_Clear
  6552 ;;		_MAX7219_SyncBuffer
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           	psect	text52
  6557  000F90                     __ptext52:
  6558                           	opt stack 0
  6559  000F90                     _MAX7219_SetRegister:
  6560                           	opt stack 16
  6561                           
  6562                           ;incstack = 0
  6563                           ;MAX7219_SetRegister@reg stored from wreg
  6564  000F90  6E41               	movwf	MAX7219_SetRegister@reg,c
  6565                           
  6566                           ;max7219.c: 134: LATC6 = 0;
  6567  000F92  9C8B               	bcf	3979,6,c	;volatile
  6568                           
  6569                           ;max7219.c: 135: MAX7219_ShiftByte(reg);
  6570  000F94  5041               	movf	MAX7219_SetRegister@reg,w,c
  6571  000F96  ECE9  F006         	call	_MAX7219_ShiftByte
  6572                           
  6573                           ;max7219.c: 136: __nop();
  6574  000F9A  F000               	nop	
  6575                           
  6576                           ;max7219.c: 138: MAX7219_ShiftByte(data);
  6577  000F9C  5040               	movf	MAX7219_SetRegister@data,w,c
  6578  000F9E  ECE9  F006         	call	_MAX7219_ShiftByte
  6579                           
  6580                           ;max7219.c: 139: LATC6 = 1;
  6581  000FA2  8C8B               	bsf	3979,6,c	;volatile
  6582  000FA4  0012               	return	
  6583  000FA6                     __end_of_MAX7219_SetRegister:
  6584                           	opt stack 0
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           intcon2	equ	0xFF1
  6593                           postinc0	equ	0xFEE
  6594                           wreg	equ	0xFE8
  6595                           indf1	equ	0xFE7
  6596                           fsr1h	equ	0xFE2
  6597                           fsr1l	equ	0xFE1
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           plusw2	equ	0xFDB
  6602                           fsr2h	equ	0xFDA
  6603                           fsr2l	equ	0xFD9
  6604                           status	equ	0xFD8
  6605                           
  6606 ;; *************** function _MAX7219_ShiftByte *****************
  6607 ;; Defined at:
  6608 ;;		line 112 in file "max7219.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  value           1    wreg     unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  value           1   21[COMRAM] unsigned char 
  6613 ;;  i               1   22[COMRAM] unsigned char 
  6614 ;; Return value:  Size  Location     Type
  6615 ;;		None               void
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1
  6623 ;;      Params:         0       0       0
  6624 ;;      Locals:         2       0       0
  6625 ;;      Temps:          0       0       0
  6626 ;;      Totals:         2       0       0
  6627 ;;Total ram usage:        2 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    9
  6630 ;; This function calls:
  6631 ;;		Nothing
  6632 ;; This function is called by:
  6633 ;;		_MAX7219_SetRegister
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text53
  6638  000DD2                     __ptext53:
  6639                           	opt stack 0
  6640  000DD2                     _MAX7219_ShiftByte:
  6641                           	opt stack 16
  6642                           
  6643                           ;incstack = 0
  6644                           ;MAX7219_ShiftByte@value stored from wreg
  6645  000DD2  6E3E               	movwf	MAX7219_ShiftByte@value,c
  6646                           
  6647                           ;max7219.c: 114: uint8_t i = 0;
  6648  000DD4  6A3F               	clrf	MAX7219_ShiftByte@i,c
  6649                           
  6650                           ;max7219.c: 116: for(i=0;i<8;i++){
  6651  000DD6  6A3F               	clrf	MAX7219_ShiftByte@i,c
  6652  000DD8                     l394:
  6653                           
  6654                           ;max7219.c: 118: if (value & 0x80){
  6655  000DD8  AE3E               	btfss	MAX7219_ShiftByte@value,7,c
  6656  000DDA  D002               	goto	l396
  6657                           
  6658                           ;max7219.c: 119: LATC7 = 1;
  6659  000DDC  8E8B               	bsf	3979,7,c	;volatile
  6660                           
  6661                           ;max7219.c: 120: }else{
  6662  000DDE  D001               	goto	l397
  6663  000DE0                     l396:
  6664                           
  6665                           ;max7219.c: 121: LATC7 = 0;
  6666  000DE0  9E8B               	bcf	3979,7,c	;volatile
  6667  000DE2                     l397:
  6668                           
  6669                           ;max7219.c: 122: }
  6670                           ;max7219.c: 123: LATC3 = 1;
  6671  000DE2  868B               	bsf	3979,3,c	;volatile
  6672                           
  6673                           ;max7219.c: 124: __nop();
  6674  000DE4  F000               	nop	
  6675                           
  6676                           ;max7219.c: 126: LATC3 = 0;
  6677  000DE6  968B               	bcf	3979,3,c	;volatile
  6678                           
  6679                           ;max7219.c: 128: value <<= 1;
  6680  000DE8  90D8               	bcf	status,0,c
  6681  000DEA  363E               	rlcf	MAX7219_ShiftByte@value,f,c
  6682  000DEC  2A3F               	incf	MAX7219_ShiftByte@i,f,c
  6683  000DEE  0E07               	movlw	7
  6684  000DF0  643F               	cpfsgt	MAX7219_ShiftByte@i,c
  6685  000DF2  D7F2               	goto	l394
  6686  000DF4  0C07               	retlw	7
  6687  000DF6                     __end_of_MAX7219_ShiftByte:
  6688                           	opt stack 0
  6689                           tblptru	equ	0xFF8
  6690                           tblptrh	equ	0xFF7
  6691                           tblptrl	equ	0xFF6
  6692                           tablat	equ	0xFF5
  6693                           prodh	equ	0xFF4
  6694                           prodl	equ	0xFF3
  6695                           intcon	equ	0xFF2
  6696                           intcon2	equ	0xFF1
  6697                           postinc0	equ	0xFEE
  6698                           wreg	equ	0xFE8
  6699                           indf1	equ	0xFE7
  6700                           fsr1h	equ	0xFE2
  6701                           fsr1l	equ	0xFE1
  6702                           indf2	equ	0xFDF
  6703                           postinc2	equ	0xFDE
  6704                           postdec2	equ	0xFDD
  6705                           plusw2	equ	0xFDB
  6706                           fsr2h	equ	0xFDA
  6707                           fsr2l	equ	0xFD9
  6708                           status	equ	0xFD8
  6709                           
  6710 ;; *************** function _ClearFlags *****************
  6711 ;; Defined at:
  6712 ;;		line 91 in file "globals.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;		None
  6717 ;; Return value:  Size  Location     Type
  6718 ;;		None               void
  6719 ;; Registers used:
  6720 ;;		None
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1
  6726 ;;      Params:         0       0       0
  6727 ;;      Locals:         0       0       0
  6728 ;;      Temps:          0       0       0
  6729 ;;      Totals:         0       0       0
  6730 ;;Total ram usage:        0 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    9
  6733 ;; This function calls:
  6734 ;;		Nothing
  6735 ;; This function is called by:
  6736 ;;		_main
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text54
  6741  001098                     __ptext54:
  6742                           	opt stack 0
  6743  001098                     _ClearFlags:
  6744                           	opt stack 21
  6745                           
  6746                           ;globals.c: 93: flag.encode = 0;
  6747                           
  6748                           ;incstack = 0
  6749  001098  9219               	bcf	_flag,1,c	;volatile
  6750                           
  6751                           ;globals.c: 94: flag.on = 0;
  6752  00109A  9619               	bcf	_flag,3,c	;volatile
  6753                           
  6754                           ;globals.c: 95: flag.secTick = 0;
  6755  00109C  9019               	bcf	_flag,0,c	;volatile
  6756                           
  6757                           ;globals.c: 96: flag.main = 0;
  6758  00109E  9819               	bcf	_flag,4,c	;volatile
  6759  0010A0  0012               	return	
  6760  0010A2                     __end_of_ClearFlags:
  6761                           	opt stack 0
  6762                           tblptru	equ	0xFF8
  6763                           tblptrh	equ	0xFF7
  6764                           tblptrl	equ	0xFF6
  6765                           tablat	equ	0xFF5
  6766                           prodh	equ	0xFF4
  6767                           prodl	equ	0xFF3
  6768                           intcon	equ	0xFF2
  6769                           intcon2	equ	0xFF1
  6770                           postinc0	equ	0xFEE
  6771                           wreg	equ	0xFE8
  6772                           indf1	equ	0xFE7
  6773                           fsr1h	equ	0xFE2
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           plusw2	equ	0xFDB
  6779                           fsr2h	equ	0xFDA
  6780                           fsr2l	equ	0xFD9
  6781                           status	equ	0xFD8
  6782                           
  6783 ;; *************** function _Buzzer *****************
  6784 ;; Defined at:
  6785 ;;		line 82 in file "pins.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;		None               void
  6792 ;; Registers used:
  6793 ;;		wreg, status,2, status,0
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1
  6799 ;;      Params:         0       0       0
  6800 ;;      Locals:         0       0       0
  6801 ;;      Temps:          0       0       0
  6802 ;;      Totals:         0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    9
  6806 ;; This function calls:
  6807 ;;		Nothing
  6808 ;; This function is called by:
  6809 ;;		_main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text55
  6814  000AA4                     __ptext55:
  6815                           	opt stack 0
  6816  000AA4                     _Buzzer:
  6817                           	opt stack 21
  6818                           
  6819                           ;pins.c: 83: static uint16_t count = 0;
  6820                           ;pins.c: 84: static uint8_t step = 0;
  6821                           ;pins.c: 86: if (signal.buzzer) {
  6822                           
  6823                           ;incstack = 0
  6824  000AA4  A01C               	btfss	_signal,0,c	;volatile
  6825  000AA6  D016               	goto	l2300
  6826                           
  6827                           ;pins.c: 87: step = 0;
  6828  000AA8  6A17               	clrf	Buzzer@step,c
  6829                           
  6830                           ;pins.c: 88: count = 0;
  6831  000AAA  6A07               	clrf	Buzzer@count,c
  6832  000AAC  6A08               	clrf	Buzzer@count+1,c
  6833                           
  6834                           ;pins.c: 89: signal.buzzer = 0;
  6835  000AAE  901C               	bcf	_signal,0,c	;volatile
  6836  000AB0  D011               	goto	l2300
  6837  000AB2                     l2286:
  6838                           
  6839                           ;pins.c: 94: if (count < tmrCount) {
  6840  000AB2  D81D               	call	PL22	;call to abstracted procedure
  6841  000AB4  B0D8               	btfsc	status,0,c
  6842  000AB6  0012               	return	
  6843                           
  6844                           ;pins.c: 95: do {hwflag.buzzer = 1;PSTRCONbits.STRA = 1;} while(0);
  6845  000AB8  841A               	bsf	_hwflag,2,c	;volatile
  6846  000ABA  80B9               	bsf	4025,0,c	;volatile
  6847                           
  6848                           ;pins.c: 96: count = tmrCount + 500;
  6849  000ABC  D811               	call	PL18	;call to abstracted procedure
  6850                           
  6851                           ;pins.c: 97: step = 1;
  6852  000ABE  0E01               	movlw	1
  6853  000AC0  6E17               	movwf	Buzzer@step,c
  6854  000AC2  0C01               	retlw	1
  6855  000AC4                     l2292:
  6856                           
  6857                           ;pins.c: 101: if (count < tmrCount) {
  6858  000AC4  D814               	call	PL22	;call to abstracted procedure
  6859  000AC6  B0D8               	btfsc	status,0,c
  6860  000AC8  0012               	return	
  6861                           
  6862                           ;pins.c: 102: do {hwflag.buzzer = 0;PSTRCONbits.STRA = 0;} while(0);
  6863  000ACA  941A               	bcf	_hwflag,2,c	;volatile
  6864  000ACC  90B9               	bcf	4025,0,c	;volatile
  6865                           
  6866                           ;pins.c: 103: count = tmrCount + 500;
  6867  000ACE  D808               	call	PL18	;call to abstracted procedure
  6868                           
  6869                           ;pins.c: 104: step = 0;
  6870  000AD0  6A17               	clrf	Buzzer@step,c
  6871  000AD2  0012               	return	
  6872  000AD4                     l2300:
  6873  000AD4  5017               	movf	Buzzer@step,w,c
  6874                           
  6875                           ; Switch size 1, requested type "space"
  6876                           ; Number of cases is 2, Range of values is 0 to 1
  6877                           ; switch strategies available:
  6878                           ; Name         Instructions Cycles
  6879                           ; simple_byte            7     4 (average)
  6880                           ;	Chosen strategy is simple_byte
  6881  000AD6  E0ED               	bz	l2286
  6882  000AD8  0A01               	xorlw	1	; case 1
  6883  000ADA  A4D8               	btfss	status,2,c
  6884  000ADC  0012               	return	
  6885  000ADE  D7F2               	goto	l2292
  6886  000AE0                     __end_of_Buzzer:
  6887                           	opt stack 0
  6888  000AE0                     PL18:
  6889                           	opt stack 21
  6890  000AE0  0EF4               	movlw	244
  6891  000AE2  2415               	addwf	_tmrCount,w,c	;volatile
  6892  000AE4  6E07               	movwf	Buzzer@count,c
  6893  000AE6  0E01               	movlw	1
  6894  000AE8  2016               	addwfc	_tmrCount+1,w,c	;volatile
  6895  000AEA  6E08               	movwf	Buzzer@count+1,c
  6896  000AEC  0012               	return	
  6897  000AEE                     __end_ofPL18:
  6898                           	opt stack 0
  6899  000AEE                     PL22:
  6900                           	opt stack 21
  6901  000AEE  5015               	movf	_tmrCount,w,c	;volatile
  6902  000AF0  5C07               	subwf	Buzzer@count,w,c
  6903  000AF2  5016               	movf	_tmrCount+1,w,c	;volatile
  6904  000AF4  5808               	subwfb	Buzzer@count+1,w,c
  6905  000AF6  0012               	return	
  6906  000AF8                     __end_ofPL22:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           intcon2	equ	0xFF1
  6916                           postinc0	equ	0xFEE
  6917                           wreg	equ	0xFE8
  6918                           indf1	equ	0xFE7
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           plusw2	equ	0xFDB
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _IntLow *****************
  6930 ;; Defined at:
  6931 ;;		line 70 in file "interrupt.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;		None               void
  6938 ;; Registers used:
  6939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1
  6945 ;;      Params:         0       0       0
  6946 ;;      Locals:         0       0       0
  6947 ;;      Temps:          9       0       0
  6948 ;;      Totals:         9       0       0
  6949 ;;Total ram usage:        9 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    8
  6952 ;; This function calls:
  6953 ;;		_EncoderISR
  6954 ;;		_TMR0_ISR
  6955 ;; This function is called by:
  6956 ;;		Interrupt level 1
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	intcodelo
  6961  000018                     __pintcodelo:
  6962                           	opt stack 0
  6963  000018                     _IntLow:
  6964                           	opt stack 16
  6965                           
  6966                           ;incstack = 0
  6967  000018  CFD8 F02E          	movff	status,??_IntLow
  6968  00001C  CFE8 F02F          	movff	wreg,??_IntLow+1
  6969  000020  CFE0 F030          	movff	bsr,??_IntLow+2
  6970  000024  CFD9 F031          	movff	fsr2l,??_IntLow+3
  6971  000028  CFDA F032          	movff	fsr2h,??_IntLow+4
  6972  00002C  CFF6 F033          	movff	tblptrl,??_IntLow+5
  6973  000030  CFF7 F034          	movff	tblptrh,??_IntLow+6
  6974  000034  CFF8 F035          	movff	tblptru,??_IntLow+7
  6975  000038  CFF5 F036          	movff	tablat,??_IntLow+8
  6976                           
  6977                           ;interrupt.c: 72: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  6978  00003C  BAF2               	btfsc	intcon,5,c	;volatile
  6979  00003E  A4F2               	btfss	intcon,2,c	;volatile
  6980  000040  D003               	goto	i1l218
  6981                           
  6982                           ;interrupt.c: 73: TMR0_ISR();
  6983  000042  ECE9  F005         	call	_TMR0_ISR	;wreg free
  6984                           
  6985                           ;interrupt.c: 74: }else if (INTCONbits.RABIE == 1 && INTCONbits.RABIF == 1) {
  6986  000046  D008               	goto	i1l221
  6987  000048                     i1l218:
  6988  000048  B6F2               	btfsc	intcon,3,c	;volatile
  6989  00004A  A0F2               	btfss	intcon,0,c	;volatile
  6990  00004C  D005               	goto	i1l221
  6991                           
  6992                           ;interrupt.c: 75: EncoderISR();
  6993  00004E  ECF5  F004         	call	_EncoderISR	;wreg free
  6994                           
  6995                           ;interrupt.c: 77: PORTA;
  6996  000052  5080               	movf	3968,w,c	;volatile
  6997                           
  6998                           ;interrupt.c: 78: PORTB;
  6999  000054  5081               	movf	3969,w,c	;volatile
  7000                           
  7001                           ;interrupt.c: 79: INTCONbits.RABIF = 0;
  7002  000056  90F2               	bcf	intcon,0,c	;volatile
  7003  000058                     i1l221:
  7004  000058  C036  FFF5         	movff	??_IntLow+8,tablat
  7005  00005C  C035  FFF8         	movff	??_IntLow+7,tblptru
  7006  000060  C034  FFF7         	movff	??_IntLow+6,tblptrh
  7007  000064  C033  FFF6         	movff	??_IntLow+5,tblptrl
  7008  000068  C032  FFDA         	movff	??_IntLow+4,fsr2h
  7009  00006C  C031  FFD9         	movff	??_IntLow+3,fsr2l
  7010  000070  C030  FFE0         	movff	??_IntLow+2,bsr
  7011  000074  C02F  FFE8         	movff	??_IntLow+1,wreg
  7012  000078  C02E  FFD8         	movff	??_IntLow,status
  7013  00007C  0010               	retfie	
  7014  00007E                     __end_of_IntLow:
  7015                           	opt stack 0
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           intcon	equ	0xFF2
  7023                           intcon2	equ	0xFF1
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           indf1	equ	0xFE7
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           bsr	equ	0xFE0
  7030                           indf2	equ	0xFDF
  7031                           postinc2	equ	0xFDE
  7032                           postdec2	equ	0xFDD
  7033                           plusw2	equ	0xFDB
  7034                           fsr2h	equ	0xFDA
  7035                           fsr2l	equ	0xFD9
  7036                           status	equ	0xFD8
  7037                           
  7038 ;; *************** function _TMR0_ISR *****************
  7039 ;; Defined at:
  7040 ;;		line 88 in file "timers.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;		None               void
  7047 ;; Registers used:
  7048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1
  7054 ;;      Params:         0       0       0
  7055 ;;      Locals:         0       0       0
  7056 ;;      Temps:          0       0       0
  7057 ;;      Totals:         0       0       0
  7058 ;;Total ram usage:        0 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    7
  7061 ;; This function calls:
  7062 ;;		_NewButtonCheck
  7063 ;;		i1___lwmod
  7064 ;; This function is called by:
  7065 ;;		_IntLow
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text57
  7070  000BD2                     __ptext57:
  7071                           	opt stack 0
  7072  000BD2                     _TMR0_ISR:
  7073                           	opt stack 16
  7074                           
  7075                           ;timers.c: 90: INTCONbits.TMR0IF = 0;
  7076                           
  7077                           ;incstack = 0
  7078  000BD2  94F2               	bcf	intcon,2,c	;volatile
  7079                           
  7080                           ;timers.c: 91: tmrCount++;
  7081  000BD4  4A15               	infsnz	_tmrCount,f,c	;volatile
  7082  000BD6  2A16               	incf	_tmrCount+1,f,c	;volatile
  7083                           
  7084                           ;timers.c: 92: if(tmrCount % 2)
  7085  000BD8  B015               	btfsc	_tmrCount,0,c	;volatile
  7086                           
  7087                           ;timers.c: 93: NewButtonCheck();
  7088  000BDA  EC8E  F003         	call	_NewButtonCheck	;wreg free
  7089                           
  7090                           ;timers.c: 94: if (!(tmrCount % 500)) {
  7091  000BDE  C015  F029         	movff	_tmrCount,i1___lwmod@dividend	;volatile
  7092  000BE2  C016  F02A         	movff	_tmrCount+1,i1___lwmod@dividend+1	;volatile
  7093  000BE6  0E01               	movlw	1
  7094  000BE8  6E2C               	movwf	i1___lwmod@divisor+1,c
  7095  000BEA  0EF4               	movlw	244
  7096  000BEC  6E2B               	movwf	i1___lwmod@divisor,c
  7097  000BEE  EC47  F006         	call	i1___lwmod	;wreg free
  7098  000BF2  502A               	movf	?i1___lwmod+1,w,c
  7099  000BF4  1029               	iorwf	?i1___lwmod,w,c
  7100  000BF6  E10A               	bnz	i1l2126
  7101                           
  7102                           ;timers.c: 95: flag.halfsec = ~flag.halfsec;
  7103  000BF8  7419               	btg	_flag,2,c	;volatile
  7104                           
  7105                           ;timers.c: 96: if (flag.blinkled) {
  7106  000BFA  AE19               	btfss	_flag,7,c	;volatile
  7107  000BFC  D007               	goto	i1l2126
  7108                           
  7109                           ;timers.c: 97: if (flag.halfsec) {
  7110  000BFE  A419               	btfss	_flag,2,c	;volatile
  7111  000C00  D003               	goto	i1l650
  7112                           
  7113                           ;timers.c: 98: do {hwflag.bled = 1;LATC1 = 1;} while(0);
  7114  000C02  881A               	bsf	_hwflag,4,c	;volatile
  7115  000C04  828B               	bsf	3979,1,c	;volatile
  7116  000C06  D002               	goto	i1l2126
  7117  000C08                     i1l650:
  7118  000C08  981A               	bcf	_hwflag,4,c	;volatile
  7119  000C0A  928B               	bcf	3979,1,c	;volatile
  7120  000C0C                     i1l2126:
  7121                           
  7122                           ;timers.c: 101: }
  7123                           ;timers.c: 102: }
  7124                           ;timers.c: 103: }
  7125                           ;timers.c: 106: TMR0L = (0x06);
  7126  000C0C  0E06               	movlw	6
  7127  000C0E  6ED6               	movwf	4054,c	;volatile
  7128  000C10  0C06               	retlw	6
  7129  000C12                     __end_of_TMR0_ISR:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           intcon2	equ	0xFF1
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           indf1	equ	0xFE7
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           bsr	equ	0xFE0
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           plusw2	equ	0xFDB
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function i1___lwmod *****************
  7154 ;; Defined at:
  7155 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  dividend        2    0[COMRAM] unsigned int 
  7158 ;;  divisor         2    2[COMRAM] unsigned int 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  __lwmod         1    4[COMRAM] unsigned char 
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  2    0[COMRAM] unsigned int 
  7163 ;; Registers used:
  7164 ;;		wreg, status,2, status,0
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1
  7170 ;;      Params:         4       0       0
  7171 ;;      Locals:         1       0       0
  7172 ;;      Temps:          0       0       0
  7173 ;;      Totals:         5       0       0
  7174 ;;Total ram usage:        5 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    6
  7177 ;; This function calls:
  7178 ;;		Nothing
  7179 ;; This function is called by:
  7180 ;;		_TMR0_ISR
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text58
  7185  000C8E                     __ptext58:
  7186                           	opt stack 0
  7187  000C8E                     i1___lwmod:
  7188                           	opt stack 16
  7189                           
  7190                           ;incstack = 0
  7191  000C8E  502C               	movf	i1___lwmod@divisor+1,w,c
  7192  000C90  102B               	iorwf	i1___lwmod@divisor,w,c
  7193  000C92  E017               	bz	i1l1399
  7194  000C94  0E01               	movlw	1
  7195  000C96  6E2D               	movwf	i1___lwmod@counter,c
  7196  000C98  D004               	goto	i1l2024
  7197  000C9A                     i1l2022:
  7198  000C9A  90D8               	bcf	status,0,c
  7199  000C9C  362B               	rlcf	i1___lwmod@divisor,f,c
  7200  000C9E  362C               	rlcf	i1___lwmod@divisor+1,f,c
  7201  000CA0  2A2D               	incf	i1___lwmod@counter,f,c
  7202  000CA2                     i1l2024:
  7203  000CA2  AE2C               	btfss	i1___lwmod@divisor+1,7,c
  7204  000CA4  D7FA               	goto	i1l2022
  7205  000CA6                     i1l2026:
  7206  000CA6  502B               	movf	i1___lwmod@divisor,w,c
  7207  000CA8  5C29               	subwf	i1___lwmod@dividend,w,c
  7208  000CAA  502C               	movf	i1___lwmod@divisor+1,w,c
  7209  000CAC  582A               	subwfb	i1___lwmod@dividend+1,w,c
  7210  000CAE  E304               	bnc	i1l2030
  7211  000CB0  502B               	movf	i1___lwmod@divisor,w,c
  7212  000CB2  5E29               	subwf	i1___lwmod@dividend,f,c
  7213  000CB4  502C               	movf	i1___lwmod@divisor+1,w,c
  7214  000CB6  5A2A               	subwfb	i1___lwmod@dividend+1,f,c
  7215  000CB8                     i1l2030:
  7216  000CB8  90D8               	bcf	status,0,c
  7217  000CBA  322C               	rrcf	i1___lwmod@divisor+1,f,c
  7218  000CBC  322B               	rrcf	i1___lwmod@divisor,f,c
  7219  000CBE  2E2D               	decfsz	i1___lwmod@counter,f,c
  7220  000CC0  D7F2               	goto	i1l2026
  7221  000CC2                     i1l1399:
  7222  000CC2  C029  F029         	movff	i1___lwmod@dividend,?i1___lwmod
  7223  000CC6  C02A  F02A         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  7224  000CCA  0012               	return	
  7225  000CCC                     __end_ofi1___lwmod:
  7226                           	opt stack 0
  7227                           tblptru	equ	0xFF8
  7228                           tblptrh	equ	0xFF7
  7229                           tblptrl	equ	0xFF6
  7230                           tablat	equ	0xFF5
  7231                           prodh	equ	0xFF4
  7232                           prodl	equ	0xFF3
  7233                           intcon	equ	0xFF2
  7234                           intcon2	equ	0xFF1
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           indf1	equ	0xFE7
  7238                           fsr1h	equ	0xFE2
  7239                           fsr1l	equ	0xFE1
  7240                           bsr	equ	0xFE0
  7241                           indf2	equ	0xFDF
  7242                           postinc2	equ	0xFDE
  7243                           postdec2	equ	0xFDD
  7244                           plusw2	equ	0xFDB
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _NewButtonCheck *****************
  7250 ;; Defined at:
  7251 ;;		line 58 in file "user.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;		None
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;  i               1    2[COMRAM] unsigned char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;		None               void
  7258 ;; Registers used:
  7259 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1
  7265 ;;      Params:         0       0       0
  7266 ;;      Locals:         1       0       0
  7267 ;;      Temps:          2       0       0
  7268 ;;      Totals:         3       0       0
  7269 ;;Total ram usage:        3 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    6
  7272 ;; This function calls:
  7273 ;;		Nothing
  7274 ;; This function is called by:
  7275 ;;		_TMR0_ISR
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           	psect	text59
  7280  00071C                     __ptext59:
  7281                           	opt stack 0
  7282  00071C                     _NewButtonCheck:
  7283                           	opt stack 16
  7284  00071C  0E01               	movlw	1
  7285                           
  7286                           ;user.c: 59: buts[0]->down = !(PORTBbits.RB6);
  7287                           
  7288                           ;incstack = 0
  7289  00071E  BC81               	btfsc	3969,6,c	;volatile
  7290  000720  0E00               	movlw	0
  7291  000722  6E29               	movwf	??_NewButtonCheck& (0+255),c
  7292  000724  500D               	movf	_buts,w,c
  7293  000726  D84D               	call	PL4	;call to abstracted procedure
  7294  000728  0E01               	movlw	1
  7295                           
  7296                           ;user.c: 60: buts[1]->down = !(PORTCbits.RC0);
  7297  00072A  B082               	btfsc	3970,0,c	;volatile
  7298  00072C  0E00               	movlw	0
  7299  00072E  6E29               	movwf	??_NewButtonCheck& (0+255),c
  7300  000730  500E               	movf	_buts+1,w,c
  7301  000732  D847               	call	PL4	;call to abstracted procedure
  7302  000734  0E01               	movlw	1
  7303                           
  7304                           ;user.c: 61: buts[2]->down = !(PORTAbits.RA2);
  7305  000736  B480               	btfsc	3968,2,c	;volatile
  7306  000738  0E00               	movlw	0
  7307  00073A  6E29               	movwf	??_NewButtonCheck& (0+255),c
  7308  00073C  500F               	movf	_buts+2,w,c
  7309  00073E  D841               	call	PL4	;call to abstracted procedure
  7310                           
  7311                           ;user.c: 67: for (uint8_t i = 0; i < 2; i++) {
  7312  000740  6A2B               	clrf	NewButtonCheck@i,c
  7313  000742                     i1l1954:
  7314                           
  7315                           ;user.c: 68: if (buts[i]->debounce > tmrCount)
  7316  000742  502B               	movf	NewButtonCheck@i,w,c
  7317  000744  D837               	call	PL2	;call to abstracted procedure
  7318  000746  0E04               	movlw	4
  7319  000748  26D9               	addwf	fsr2l,f,c
  7320  00074A  CFDE F029          	movff	postinc2,??_NewButtonCheck
  7321  00074E  CFDD F02A          	movff	postdec2,??_NewButtonCheck+1
  7322  000752  5029               	movf	??_NewButtonCheck,w,c
  7323  000754  5C15               	subwf	_tmrCount,w,c	;volatile
  7324  000756  502A               	movf	??_NewButtonCheck+1,w,c
  7325  000758  5816               	subwfb	_tmrCount+1,w,c	;volatile
  7326  00075A  E327               	bnc	i1l1968
  7327                           
  7328                           ;user.c: 70: if (buts[i]->down == 1 && buts[i]->latched == 0) {
  7329  00075C  502B               	movf	NewButtonCheck@i,w,c
  7330  00075E  D82A               	call	PL2	;call to abstracted procedure
  7331  000760  A0DF               	btfss	indf2,0,c
  7332  000762  D015               	goto	i1l752
  7333  000764  502B               	movf	NewButtonCheck@i,w,c
  7334  000766  D826               	call	PL2	;call to abstracted procedure
  7335  000768  B2DF               	btfsc	indf2,1,c
  7336  00076A  D011               	goto	i1l752
  7337                           
  7338                           ;user.c: 71: buts[i]->latched = 1;
  7339  00076C  502B               	movf	NewButtonCheck@i,w,c
  7340  00076E  D822               	call	PL2	;call to abstracted procedure
  7341  000770  82DF               	bsf	indf2,1,c
  7342                           
  7343                           ;user.c: 72: buts[i]->debounce = tmrCount + 30;
  7344  000772  0E1E               	movlw	30
  7345  000774  2415               	addwf	_tmrCount,w,c	;volatile
  7346  000776  6E29               	movwf	??_NewButtonCheck& (0+255),c
  7347  000778  0E00               	movlw	0
  7348  00077A  2016               	addwfc	_tmrCount+1,w,c	;volatile
  7349  00077C  6E2A               	movwf	(??_NewButtonCheck+1)& (0+255),c
  7350  00077E  502B               	movf	NewButtonCheck@i,w,c
  7351  000780  D819               	call	PL2	;call to abstracted procedure
  7352  000782  0E04               	movlw	4
  7353  000784  26D9               	addwf	fsr2l,f,c
  7354  000786  C029  FFDE         	movff	??_NewButtonCheck,postinc2
  7355  00078A  C02A  FFDD         	movff	??_NewButtonCheck+1,postdec2
  7356  00078E                     i1l752:
  7357                           
  7358                           ;user.c: 73: }
  7359                           ;user.c: 74: if (buts[i]->down == 0 && buts[i]->latched == 1) {
  7360  00078E  502B               	movf	NewButtonCheck@i,w,c
  7361  000790  D811               	call	PL2	;call to abstracted procedure
  7362  000792  B0DF               	btfsc	indf2,0,c
  7363  000794  D00A               	goto	i1l1968
  7364  000796  502B               	movf	NewButtonCheck@i,w,c
  7365  000798  D80D               	call	PL2	;call to abstracted procedure
  7366  00079A  A2DF               	btfss	indf2,1,c
  7367  00079C  D006               	goto	i1l1968
  7368                           
  7369                           ;user.c: 75: buts[i]->pressed = 1;
  7370  00079E  502B               	movf	NewButtonCheck@i,w,c
  7371  0007A0  D809               	call	PL2	;call to abstracted procedure
  7372  0007A2  84DF               	bsf	indf2,2,c
  7373                           
  7374                           ;user.c: 76: buts[i]->latched = 0;
  7375  0007A4  502B               	movf	NewButtonCheck@i,w,c
  7376  0007A6  D806               	call	PL2	;call to abstracted procedure
  7377  0007A8  92DF               	bcf	indf2,1,c
  7378  0007AA                     i1l1968:
  7379  0007AA  2A2B               	incf	NewButtonCheck@i,f,c
  7380  0007AC  0E01               	movlw	1
  7381  0007AE  642B               	cpfsgt	NewButtonCheck@i,c
  7382  0007B0  D7C8               	goto	i1l1954
  7383  0007B2  0C01               	retlw	1
  7384  0007B4                     __end_of_NewButtonCheck:
  7385                           	opt stack 0
  7386  0007B4                     PL2:
  7387                           	opt stack 20
  7388  0007B4  0F0D               	addlw	low _buts
  7389  0007B6  6ED9               	movwf	fsr2l,c
  7390  0007B8  6ADA               	clrf	fsr2h,c
  7391  0007BA  50DF               	movf	indf2,w,c
  7392  0007BC  6ED9               	movwf	fsr2l,c
  7393  0007BE  6ADA               	clrf	fsr2h,c
  7394  0007C0  0012               	return	
  7395  0007C2                     __end_ofPL2:
  7396                           	opt stack 0
  7397  0007C2                     PL4:
  7398                           	opt stack 16
  7399  0007C2  6ED9               	movwf	fsr2l,c
  7400  0007C4  6ADA               	clrf	fsr2h,c
  7401  0007C6  50DF               	movf	indf2,w,c
  7402  0007C8  1829               	xorwf	??_NewButtonCheck,w,c
  7403  0007CA  0BFE               	andlw	-2
  7404  0007CC  1829               	xorwf	??_NewButtonCheck,w,c
  7405  0007CE  6EDF               	movwf	indf2,c
  7406  0007D0  0012               	return	
  7407  0007D2                     __end_ofPL4:
  7408                           	opt stack 0
  7409                           tblptru	equ	0xFF8
  7410                           tblptrh	equ	0xFF7
  7411                           tblptrl	equ	0xFF6
  7412                           tablat	equ	0xFF5
  7413                           prodh	equ	0xFF4
  7414                           prodl	equ	0xFF3
  7415                           intcon	equ	0xFF2
  7416                           intcon2	equ	0xFF1
  7417                           postinc0	equ	0xFEE
  7418                           wreg	equ	0xFE8
  7419                           indf1	equ	0xFE7
  7420                           fsr1h	equ	0xFE2
  7421                           fsr1l	equ	0xFE1
  7422                           bsr	equ	0xFE0
  7423                           indf2	equ	0xFDF
  7424                           postinc2	equ	0xFDE
  7425                           postdec2	equ	0xFDD
  7426                           plusw2	equ	0xFDB
  7427                           fsr2h	equ	0xFDA
  7428                           fsr2l	equ	0xFD9
  7429                           status	equ	0xFD8
  7430                           
  7431 ;; *************** function _EncoderISR *****************
  7432 ;; Defined at:
  7433 ;;		line 111 in file "encoder.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;		None
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;  temp            1    2[COMRAM] unsigned char 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;		None               void
  7440 ;; Registers used:
  7441 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1
  7447 ;;      Params:         0       0       0
  7448 ;;      Locals:         1       0       0
  7449 ;;      Temps:          2       0       0
  7450 ;;      Totals:         3       0       0
  7451 ;;Total ram usage:        3 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    6
  7454 ;; This function calls:
  7455 ;;		Nothing
  7456 ;; This function is called by:
  7457 ;;		_IntLow
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text60
  7462  0009EA                     __ptext60:
  7463                           	opt stack 0
  7464  0009EA                     _EncoderISR:
  7465                           	opt stack 17
  7466                           
  7467                           ;encoder.c: 113: unsigned char temp = 5;
  7468                           
  7469                           ;incstack = 0
  7470  0009EA  0E05               	movlw	5
  7471  0009EC  6E2B               	movwf	EncoderISR@temp,c
  7472  0009EE                     i1l2054:
  7473  0009EE  062B               	decf	EncoderISR@temp,f,c
  7474  0009F0  282B               	incf	EncoderISR@temp& (0+255),w,c
  7475  0009F2  E1FD               	bnz	i1l2054
  7476                           
  7477                           ;encoder.c: 119: coder.oldstate = coder.newstate;
  7478  0009F4  C045  F046         	movff	_coder,_coder+1	;volatile
  7479                           
  7480                           ;encoder.c: 121: coder.newstate = ((PORTB >> 4) & 0x03);
  7481  0009F8  3881               	swapf	3969,w,c	;volatile
  7482  0009FA  0B0F               	andlw	15
  7483  0009FC  0B03               	andlw	3
  7484  0009FE  6E45               	movwf	_coder,c	;volatile
  7485                           
  7486                           ;encoder.c: 123: coder.fullstate = ((coder.oldstate << 2) | (coder.newstate));
  7487  000A00  4446               	rlncf	_coder+1,w,c	;volatile
  7488  000A02  46E8               	rlncf	wreg,f,c
  7489  000A04  0BFC               	andlw	252
  7490  000A06  1045               	iorwf	_coder,w,c	;volatile
  7491  000A08  6E47               	movwf	_coder+2,c	;volatile
  7492                           
  7493                           ;encoder.c: 124: coder.direction = table[(coder.fullstate & 0x0f)];
  7494  000A0A  C047  F029         	movff	_coder+2,??_EncoderISR	;volatile
  7495  000A0E  0E0F               	movlw	15
  7496  000A10  1629               	andwf	??_EncoderISR,f,c
  7497  000A12  5029               	movf	??_EncoderISR,w,c
  7498  000A14  0F66               	addlw	low _table
  7499  000A16  6E2A               	movwf	(??_EncoderISR+1)& (0+255),c
  7500  000A18  C02A  FFF6         	movff	??_EncoderISR+1,tblptrl
  7501  000A1C                     	if	1	;There is more than 1 active tblptr byte
  7502  000A1C  0E02               	movlw	high __smallconst
  7503  000A1E  6EF7               	movwf	tblptrh,c
  7504  000A20                     	endif
  7505  000A20                     	if	0	;tblptru may be non-zero
  7506  000A20                     	endif
  7507  000A20                     	if	0	;tblptru may be non-zero
  7508  000A20                     	endif
  7509  000A20  0008               	tblrd		*
  7510  000A22  CFF5 F048          	movff	tablat,_coder+3	;volatile
  7511                           
  7512                           ;encoder.c: 126: ticks += coder.direction;
  7513  000A26  5048               	movf	_coder+3,w,c	;volatile
  7514  000A28  2618               	addwf	EncoderISR@ticks,f,c
  7515                           
  7516                           ;encoder.c: 127: if(ticks == 2){
  7517  000A2A  5018               	movf	EncoderISR@ticks,w,c
  7518  000A2C  0A02               	xorlw	2
  7519  000A2E  E105               	bnz	i1l2070
  7520                           
  7521                           ;encoder.c: 128: coder.count++;
  7522  000A30  4A49               	infsnz	_coder+4,f,c	;volatile
  7523  000A32  2A4A               	incf	_coder+5,f,c	;volatile
  7524  000A34                     
  7525                           ;encoder.c: 129: flag.encode = 1;
  7526  000A34  8219               	bsf	_flag,1,c	;volatile
  7527                           
  7528                           ;encoder.c: 130: ticks = 0;
  7529  000A36  6A18               	clrf	EncoderISR@ticks,c
  7530                           
  7531                           ;encoder.c: 131: }else if (ticks == -2){
  7532  000A38  0012               	return	
  7533  000A3A                     i1l2070:
  7534  000A3A  5018               	movf	EncoderISR@ticks,w,c
  7535  000A3C  0AFE               	xorlw	254
  7536  000A3E  A4D8               	btfss	status,2,c
  7537  000A40  0012               	return	
  7538                           
  7539                           ;encoder.c: 132: coder.count--;
  7540  000A42  0649               	decf	_coder+4,f,c	;volatile
  7541  000A44  A0D8               	btfss	status,0,c
  7542  000A46  064A               	decf	_coder+5,f,c	;volatile
  7543  000A48  D7F5               	goto	L8
  7544  000A4A                     __end_of_EncoderISR:
  7545                           	opt stack 0
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           intcon2	equ	0xFF1
  7554                           postinc0	equ	0xFEE
  7555                           wreg	equ	0xFE8
  7556                           indf1	equ	0xFE7
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           bsr	equ	0xFE0
  7560                           indf2	equ	0xFDF
  7561                           postinc2	equ	0xFDE
  7562                           postdec2	equ	0xFDD
  7563                           plusw2	equ	0xFDB
  7564                           fsr2h	equ	0xFDA
  7565                           fsr2l	equ	0xFD9
  7566                           status	equ	0xFD8
  7567                           
  7568 ;; *************** function _IntHigh *****************
  7569 ;; Defined at:
  7570 ;;		line 60 in file "interrupt.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;		None
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;		None               void
  7577 ;; Registers used:
  7578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1
  7584 ;;      Params:         0       0       0
  7585 ;;      Locals:         0       0       0
  7586 ;;      Temps:          2       0       0
  7587 ;;      Totals:         2       0       0
  7588 ;;Total ram usage:        2 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    5
  7591 ;; This function calls:
  7592 ;;		_TMR1_ISR
  7593 ;;		_TMR3_ISR
  7594 ;; This function is called by:
  7595 ;;		Interrupt level 2
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	intcode
  7600  000008                     __pintcode:
  7601                           	opt stack 0
  7602  000008                     _IntHigh:
  7603                           	opt stack 16
  7604                           
  7605                           ;incstack = 0
  7606  000008  CFD9 F03C          	movff	fsr2l,??_IntHigh
  7607  00000C  CFDA F03D          	movff	fsr2h,??_IntHigh+1
  7608  000010  EF51  F007         	goto	int_func
  7609                           tblptru	equ	0xFF8
  7610                           tblptrh	equ	0xFF7
  7611                           tblptrl	equ	0xFF6
  7612                           tablat	equ	0xFF5
  7613                           prodh	equ	0xFF4
  7614                           prodl	equ	0xFF3
  7615                           intcon	equ	0xFF2
  7616                           intcon2	equ	0xFF1
  7617                           postinc0	equ	0xFEE
  7618                           wreg	equ	0xFE8
  7619                           indf1	equ	0xFE7
  7620                           fsr1h	equ	0xFE2
  7621                           fsr1l	equ	0xFE1
  7622                           bsr	equ	0xFE0
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           plusw2	equ	0xFDB
  7627                           fsr2h	equ	0xFDA
  7628                           fsr2l	equ	0xFD9
  7629                           status	equ	0xFD8
  7630                           
  7631                           	psect	intcode_body
  7632  000EA2                     __pintcode_body:
  7633                           	opt stack 16
  7634  000EA2                     int_func:
  7635                           	opt stack 16
  7636                           
  7637                           ;interrupt.c: 63: if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1) {
  7638  000EA2  B09D               	btfsc	3997,0,c	;volatile
  7639  000EA4  A09E               	btfss	3998,0,c	;volatile
  7640  000EA6  D003               	goto	i2l212
  7641                           
  7642                           ;interrupt.c: 64: TMR1_ISR();
  7643  000EA8  EC0D  F007         	call	_TMR1_ISR	;wreg free
  7644                           
  7645                           ;interrupt.c: 65: }else if (PIE2bits.TMR3IE == 1 && PIR2bits.TMR3IF == 1) {
  7646  000EAC  D005               	goto	i2l215
  7647  000EAE                     i2l212:
  7648  000EAE  B2A0               	btfsc	4000,1,c	;volatile
  7649  000EB0  A2A1               	btfss	4001,1,c	;volatile
  7650  000EB2  D002               	goto	i2l215
  7651                           
  7652                           ;interrupt.c: 66: TMR3_ISR();
  7653  000EB4  ECA6  F007         	call	_TMR3_ISR	;wreg free
  7654  000EB8                     i2l215:
  7655  000EB8  C03D  FFDA         	movff	??_IntHigh+1,fsr2h
  7656  000EBC  C03C  FFD9         	movff	??_IntHigh,fsr2l
  7657  000EC0  0011               	retfie		f
  7658  000EC2                     __end_of_IntHigh:
  7659                           	opt stack 0
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           intcon2	equ	0xFF1
  7668                           postinc0	equ	0xFEE
  7669                           wreg	equ	0xFE8
  7670                           indf1	equ	0xFE7
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           bsr	equ	0xFE0
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           plusw2	equ	0xFDB
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function _TMR3_ISR *****************
  7683 ;; Defined at:
  7684 ;;		line 222 in file "timers.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;		None               void
  7691 ;; Registers used:
  7692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1
  7698 ;;      Params:         0       0       0
  7699 ;;      Locals:         0       0       0
  7700 ;;      Temps:          0       0       0
  7701 ;;      Totals:         0       0       0
  7702 ;;Total ram usage:        0 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    4
  7705 ;; This function calls:
  7706 ;;		i2_DisplaySync
  7707 ;; This function is called by:
  7708 ;;		_IntHigh
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           	psect	text62
  7713  000F4C                     __ptext62:
  7714                           	opt stack 0
  7715  000F4C                     _TMR3_ISR:
  7716                           	opt stack 16
  7717                           
  7718                           ;timers.c: 223: PIR2bits.TMR3IF = 0;
  7719                           
  7720                           ;incstack = 0
  7721  000F4C  92A1               	bcf	4001,1,c	;volatile
  7722                           
  7723                           ;timers.c: 224: DisplaySync();
  7724  000F4E  EC71  F008         	call	i2_DisplaySync	;wreg free
  7725                           
  7726                           ;timers.c: 226: t3Count++;
  7727  000F52  4A13               	infsnz	_t3Count,f,c	;volatile
  7728  000F54  2A14               	incf	_t3Count+1,f,c	;volatile
  7729  000F56  90B1               	bcf	4017,0,c	;volatile
  7730                           
  7731                           ;timers.c: 229: TMR3 = (0x63C0);
  7732  000F58  0E63               	movlw	99
  7733  000F5A  6EB3               	movwf	4019,c	;volatile
  7734  000F5C  0EC0               	movlw	192
  7735  000F5E  6EB2               	movwf	4018,c	;volatile
  7736  000F60  80B1               	bsf	4017,0,c	;volatile
  7737  000F62  0CC0               	retlw	192
  7738  000F64                     __end_of_TMR3_ISR:
  7739                           	opt stack 0
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           prodh	equ	0xFF4
  7745                           prodl	equ	0xFF3
  7746                           intcon	equ	0xFF2
  7747                           intcon2	equ	0xFF1
  7748                           postinc0	equ	0xFEE
  7749                           wreg	equ	0xFE8
  7750                           indf1	equ	0xFE7
  7751                           fsr1h	equ	0xFE2
  7752                           fsr1l	equ	0xFE1
  7753                           bsr	equ	0xFE0
  7754                           indf2	equ	0xFDF
  7755                           postinc2	equ	0xFDE
  7756                           postdec2	equ	0xFDD
  7757                           plusw2	equ	0xFDB
  7758                           fsr2h	equ	0xFDA
  7759                           fsr2l	equ	0xFD9
  7760                           status	equ	0xFD8
  7761                           
  7762 ;; *************** function i2_DisplaySync *****************
  7763 ;; Defined at:
  7764 ;;		line 156 in file "display.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;		None               void
  7771 ;; Registers used:
  7772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMRAM   BANK0   BANK1
  7778 ;;      Params:         0       0       0
  7779 ;;      Locals:         0       0       0
  7780 ;;      Temps:          0       0       0
  7781 ;;      Totals:         0       0       0
  7782 ;;Total ram usage:        0 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    3
  7785 ;; This function calls:
  7786 ;;		i2_MAX7219_SyncBuffer
  7787 ;; This function is called by:
  7788 ;;		_TMR3_ISR
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           	psect	text63
  7793  0010E2                     __ptext63:
  7794                           	opt stack 0
  7795  0010E2                     i2_DisplaySync:
  7796                           	opt stack 16
  7797                           
  7798                           ;display.c: 158: MAX7219_SyncBuffer();
  7799                           
  7800                           ;incstack = 0
  7801  0010E2  EF61  F007         	goto	i2_MAX7219_SyncBuffer	;wreg free
  7802  0010E6                     __end_ofi2_DisplaySync:
  7803                           	opt stack 0
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodh	equ	0xFF4
  7809                           prodl	equ	0xFF3
  7810                           intcon	equ	0xFF2
  7811                           intcon2	equ	0xFF1
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           indf1	equ	0xFE7
  7815                           fsr1h	equ	0xFE2
  7816                           fsr1l	equ	0xFE1
  7817                           bsr	equ	0xFE0
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           plusw2	equ	0xFDB
  7822                           fsr2h	equ	0xFDA
  7823                           fsr2l	equ	0xFD9
  7824                           status	equ	0xFD8
  7825                           
  7826 ;; *************** function i2_MAX7219_SyncBuffer *****************
  7827 ;; Defined at:
  7828 ;;		line 234 in file "max7219.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;  MAX7219_Sync    1   18[COMRAM] unsigned char 
  7833 ;; Return value:  Size  Location     Type
  7834 ;;		None               void
  7835 ;; Registers used:
  7836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMRAM   BANK0   BANK1
  7842 ;;      Params:         0       0       0
  7843 ;;      Locals:         1       0       0
  7844 ;;      Temps:          0       0       0
  7845 ;;      Totals:         1       0       0
  7846 ;;Total ram usage:        1 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    2
  7849 ;; This function calls:
  7850 ;;		i2_MAX7219_SetRegister
  7851 ;; This function is called by:
  7852 ;;		i2_DisplaySync
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text64
  7857  000EC2                     __ptext64:
  7858                           	opt stack 0
  7859  000EC2                     i2_MAX7219_SyncBuffer:
  7860                           	opt stack 16
  7861                           
  7862                           ;max7219.c: 235: uint8_t i = 0;
  7863                           
  7864                           ;incstack = 0
  7865  000EC2  6A3B               	clrf	i2MAX7219_SyncBuffer@i,c
  7866                           
  7867                           ;max7219.c: 236: for (i = 0; i< 3; ++i){
  7868  000EC4  6A3B               	clrf	i2MAX7219_SyncBuffer@i,c
  7869  000EC6                     i2l2498:
  7870                           
  7871                           ;max7219.c: 237: MAX7219_SetRegister((i+1),maxBuffer[i]);
  7872  000EC6  503B               	movf	i2MAX7219_SyncBuffer@i,w,c
  7873  000EC8  0F01               	addlw	low _maxBuffer	;volatile
  7874  000ECA  6ED9               	movwf	fsr2l,c
  7875  000ECC  6ADA               	clrf	fsr2h,c
  7876  000ECE  50DF               	movf	indf2,w,c
  7877  000ED0  6E39               	movwf	i2MAX7219_SetRegister@data,c
  7878  000ED2  283B               	incf	i2MAX7219_SyncBuffer@i,w,c
  7879  000ED4  ECD3  F007         	call	i2_MAX7219_SetRegister
  7880  000ED8  2A3B               	incf	i2MAX7219_SyncBuffer@i,f,c
  7881  000EDA  0E02               	movlw	2
  7882  000EDC  643B               	cpfsgt	i2MAX7219_SyncBuffer@i,c
  7883  000EDE  D7F3               	goto	i2l2498
  7884  000EE0  0C02               	retlw	2
  7885  000EE2                     __end_ofi2_MAX7219_SyncBuffer:
  7886                           	opt stack 0
  7887                           tblptru	equ	0xFF8
  7888                           tblptrh	equ	0xFF7
  7889                           tblptrl	equ	0xFF6
  7890                           tablat	equ	0xFF5
  7891                           prodh	equ	0xFF4
  7892                           prodl	equ	0xFF3
  7893                           intcon	equ	0xFF2
  7894                           intcon2	equ	0xFF1
  7895                           postinc0	equ	0xFEE
  7896                           wreg	equ	0xFE8
  7897                           indf1	equ	0xFE7
  7898                           fsr1h	equ	0xFE2
  7899                           fsr1l	equ	0xFE1
  7900                           bsr	equ	0xFE0
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           plusw2	equ	0xFDB
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909 ;; *************** function i2_MAX7219_SetRegister *****************
  7910 ;; Defined at:
  7911 ;;		line 132 in file "max7219.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  reg             1    wreg     unsigned char 
  7914 ;;  data            1   16[COMRAM] unsigned char 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  reg             1   17[COMRAM] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;		None               void
  7919 ;; Registers used:
  7920 ;;		wreg, status,2, status,0, cstack
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1
  7926 ;;      Params:         1       0       0
  7927 ;;      Locals:         1       0       0
  7928 ;;      Temps:          0       0       0
  7929 ;;      Totals:         2       0       0
  7930 ;;Total ram usage:        2 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    1
  7933 ;; This function calls:
  7934 ;;		i2_MAX7219_ShiftByte
  7935 ;; This function is called by:
  7936 ;;		i2_MAX7219_SyncBuffer
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text65
  7941  000FA6                     __ptext65:
  7942                           	opt stack 0
  7943  000FA6                     i2_MAX7219_SetRegister:
  7944                           	opt stack 16
  7945                           
  7946                           ;incstack = 0
  7947                           ;i2MAX7219_SetRegister@reg stored from wreg
  7948  000FA6  6E3A               	movwf	i2MAX7219_SetRegister@reg,c
  7949                           
  7950                           ;max7219.c: 134: LATC6 = 0;
  7951  000FA8  9C8B               	bcf	3979,6,c	;volatile
  7952                           
  7953                           ;max7219.c: 135: MAX7219_ShiftByte(reg);
  7954  000FAA  503A               	movf	i2MAX7219_SetRegister@reg,w,c
  7955  000FAC  ECFB  F006         	call	i2_MAX7219_ShiftByte
  7956                           
  7957                           ;max7219.c: 136: __nop();
  7958  000FB0  F000               	nop	
  7959                           
  7960                           ;max7219.c: 138: MAX7219_ShiftByte(data);
  7961  000FB2  5039               	movf	i2MAX7219_SetRegister@data,w,c
  7962  000FB4  ECFB  F006         	call	i2_MAX7219_ShiftByte
  7963                           
  7964                           ;max7219.c: 139: LATC6 = 1;
  7965  000FB8  8C8B               	bsf	3979,6,c	;volatile
  7966  000FBA  0012               	return	
  7967  000FBC                     __end_ofi2_MAX7219_SetRegister:
  7968                           	opt stack 0
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           prodh	equ	0xFF4
  7974                           prodl	equ	0xFF3
  7975                           intcon	equ	0xFF2
  7976                           intcon2	equ	0xFF1
  7977                           postinc0	equ	0xFEE
  7978                           wreg	equ	0xFE8
  7979                           indf1	equ	0xFE7
  7980                           fsr1h	equ	0xFE2
  7981                           fsr1l	equ	0xFE1
  7982                           bsr	equ	0xFE0
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           plusw2	equ	0xFDB
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function i2_MAX7219_ShiftByte *****************
  7992 ;; Defined at:
  7993 ;;		line 112 in file "max7219.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;  value           1    wreg     unsigned char 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  value           1   14[COMRAM] unsigned char 
  7998 ;;  MAX7219_Shif    1   15[COMRAM] unsigned char 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;		None               void
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1
  8008 ;;      Params:         0       0       0
  8009 ;;      Locals:         2       0       0
  8010 ;;      Temps:          0       0       0
  8011 ;;      Totals:         2       0       0
  8012 ;;Total ram usage:        2 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		i2_MAX7219_SetRegister
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text66
  8022  000DF6                     __ptext66:
  8023                           	opt stack 0
  8024  000DF6                     i2_MAX7219_ShiftByte:
  8025                           	opt stack 16
  8026                           
  8027                           ;incstack = 0
  8028                           ;i2MAX7219_ShiftByte@value stored from wreg
  8029  000DF6  6E37               	movwf	i2MAX7219_ShiftByte@value,c
  8030                           
  8031                           ;max7219.c: 114: uint8_t i = 0;
  8032  000DF8  6A38               	clrf	i2MAX7219_ShiftByte@i,c
  8033                           
  8034                           ;max7219.c: 116: for(i=0;i<8;i++){
  8035  000DFA  6A38               	clrf	i2MAX7219_ShiftByte@i,c
  8036  000DFC                     i2l394:
  8037                           
  8038                           ;max7219.c: 118: if (value & 0x80){
  8039  000DFC  AE37               	btfss	i2MAX7219_ShiftByte@value,7,c
  8040  000DFE  D002               	goto	i2l396
  8041                           
  8042                           ;max7219.c: 119: LATC7 = 1;
  8043  000E00  8E8B               	bsf	3979,7,c	;volatile
  8044                           
  8045                           ;max7219.c: 120: }else{
  8046  000E02  D001               	goto	i2l397
  8047  000E04                     i2l396:
  8048                           
  8049                           ;max7219.c: 121: LATC7 = 0;
  8050  000E04  9E8B               	bcf	3979,7,c	;volatile
  8051  000E06                     i2l397:
  8052                           
  8053                           ;max7219.c: 122: }
  8054                           ;max7219.c: 123: LATC3 = 1;
  8055  000E06  868B               	bsf	3979,3,c	;volatile
  8056                           
  8057                           ;max7219.c: 124: __nop();
  8058  000E08  F000               	nop	
  8059                           
  8060                           ;max7219.c: 126: LATC3 = 0;
  8061  000E0A  968B               	bcf	3979,3,c	;volatile
  8062                           
  8063                           ;max7219.c: 128: value <<= 1;
  8064  000E0C  90D8               	bcf	status,0,c
  8065  000E0E  3637               	rlcf	i2MAX7219_ShiftByte@value,f,c
  8066  000E10  2A38               	incf	i2MAX7219_ShiftByte@i,f,c
  8067  000E12  0E07               	movlw	7
  8068  000E14  6438               	cpfsgt	i2MAX7219_ShiftByte@i,c
  8069  000E16  D7F2               	goto	i2l394
  8070  000E18  0C07               	retlw	7
  8071  000E1A                     __end_ofi2_MAX7219_ShiftByte:
  8072                           	opt stack 0
  8073                           tblptru	equ	0xFF8
  8074                           tblptrh	equ	0xFF7
  8075                           tblptrl	equ	0xFF6
  8076                           tablat	equ	0xFF5
  8077                           prodh	equ	0xFF4
  8078                           prodl	equ	0xFF3
  8079                           intcon	equ	0xFF2
  8080                           intcon2	equ	0xFF1
  8081                           postinc0	equ	0xFEE
  8082                           wreg	equ	0xFE8
  8083                           indf1	equ	0xFE7
  8084                           fsr1h	equ	0xFE2
  8085                           fsr1l	equ	0xFE1
  8086                           bsr	equ	0xFE0
  8087                           indf2	equ	0xFDF
  8088                           postinc2	equ	0xFDE
  8089                           postdec2	equ	0xFDD
  8090                           plusw2	equ	0xFDB
  8091                           fsr2h	equ	0xFDA
  8092                           fsr2l	equ	0xFD9
  8093                           status	equ	0xFD8
  8094                           
  8095 ;; *************** function _TMR1_ISR *****************
  8096 ;; Defined at:
  8097 ;;		line 175 in file "timers.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;		None
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;		None
  8102 ;; Return value:  Size  Location     Type
  8103 ;;		None               void
  8104 ;; Registers used:
  8105 ;;		wreg, status,2, status,0
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMRAM   BANK0   BANK1
  8111 ;;      Params:         0       0       0
  8112 ;;      Locals:         0       0       0
  8113 ;;      Temps:          0       0       0
  8114 ;;      Totals:         0       0       0
  8115 ;;Total ram usage:        0 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; This function calls:
  8118 ;;		Nothing
  8119 ;; This function is called by:
  8120 ;;		_IntHigh
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text67
  8125  000E1A                     __ptext67:
  8126                           	opt stack 0
  8127  000E1A                     _TMR1_ISR:
  8128                           	opt stack 20
  8129                           
  8130                           ;timers.c: 178: ((TMR1H) |= 1UL << (7));
  8131                           
  8132                           ;incstack = 0
  8133  000E1A  8ECF               	bsf	4047,7,c	;volatile
  8134                           
  8135                           ;timers.c: 180: PIR1bits.TMR1IF = 0;
  8136  000E1C  909E               	bcf	3998,0,c	;volatile
  8137                           
  8138                           ;timers.c: 182: flag.secTick = 1;
  8139  000E1E  8019               	bsf	_flag,0,c	;volatile
  8140                           
  8141                           ;timers.c: 187: time.sec++;
  8142  000E20  2A04               	incf	_time,f,c	;volatile
  8143                           
  8144                           ;timers.c: 188: if (time.sec == 60) {
  8145  000E22  5004               	movf	_time,w,c	;volatile
  8146  000E24  0A3C               	xorlw	60
  8147  000E26  A4D8               	btfss	status,2,c
  8148  000E28  0012               	return	
  8149                           
  8150                           ;timers.c: 189: time.sec = 0;
  8151  000E2A  6A04               	clrf	_time,c	;volatile
  8152                           
  8153                           ;timers.c: 190: time.min++;
  8154  000E2C  2A05               	incf	_time+1,f,c	;volatile
  8155                           
  8156                           ;timers.c: 191: if (time.min == 60) {
  8157  000E2E  5005               	movf	_time+1,w,c	;volatile
  8158  000E30  0A3C               	xorlw	60
  8159  000E32  A4D8               	btfss	status,2,c
  8160  000E34  0012               	return	
  8161                           
  8162                           ;timers.c: 192: time.min = 0;
  8163  000E36  6A05               	clrf	_time+1,c	;volatile
  8164                           
  8165                           ;timers.c: 193: time.hour++;
  8166  000E38  2A06               	incf	_time+2,f,c	;volatile
  8167                           
  8168                           ;timers.c: 194: if (time.hour == 24)
  8169  000E3A  5006               	movf	_time+2,w,c	;volatile
  8170  000E3C  0012               	return	
  8171  000E3E                     __end_of_TMR1_ISR:
  8172                           	opt stack 0
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           intcon	equ	0xFF2
  8180                           intcon2	equ	0xFF1
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           indf1	equ	0xFE7
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           bsr	equ	0xFE0
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           plusw2	equ	0xFDB
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           intcon2	equ	0xFF1
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           indf1	equ	0xFE7
  8205                           fsr1h	equ	0xFE2
  8206                           fsr1l	equ	0xFE1
  8207                           bsr	equ	0xFE0
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           plusw2	equ	0xFDB
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8
  8215                           
  8216                           	psect	rparam
  8217  0000                     tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon	equ	0xFF2
  8224                           intcon2	equ	0xFF1
  8225                           postinc0	equ	0xFEE
  8226                           wreg	equ	0xFE8
  8227                           indf1	equ	0xFE7
  8228                           fsr1h	equ	0xFE2
  8229                           fsr1l	equ	0xFE1
  8230                           bsr	equ	0xFE0
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           postdec2	equ	0xFDD
  8234                           plusw2	equ	0xFDB
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8
  8238                           tblptru	equ	0xFF8
  8239                           tblptrh	equ	0xFF7
  8240                           tblptrl	equ	0xFF6
  8241                           tablat	equ	0xFF5
  8242                           prodh	equ	0xFF4
  8243                           prodl	equ	0xFF3
  8244                           intcon	equ	0xFF2
  8245                           intcon2	equ	0xFF1
  8246                           postinc0	equ	0xFEE
  8247                           wreg	equ	0xFE8
  8248                           indf1	equ	0xFE7
  8249                           fsr1h	equ	0xFE2
  8250                           fsr1l	equ	0xFE1
  8251                           bsr	equ	0xFE0
  8252                           indf2	equ	0xFDF
  8253                           postinc2	equ	0xFDE
  8254                           postdec2	equ	0xFDD
  8255                           plusw2	equ	0xFDB
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    127
    Data        0
    BSS         40
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     28      74
    BANK0           160     15      15
    BANK1           256      0       0

Pointer List with Targets:

    buts.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), PORTB(ABS[1]), 

    buts	PTR volatile struct buttonStruct[2] size(1) Largest target is 7
		 -> encoderButton(COMRAM[6]), ledButton(COMRAM[6]), 

    ScrollMessage@string	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[4]), STR_2(CODE[8]), STR_1(CODE[6]), 

    DisplayMsg@msg	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_5(CODE[4]), STR_3(CODE[4]), 

    encoderButton.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), PORTB(ABS[1]), 

    S51buttonStruct$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), PORTB(ABS[1]), 

    ledButton.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), PORTB(ABS[1]), 


Critical Paths under _main in COMRAM

    _main->_ScrollMessage
    _SetTimer->_SaveTime
    _SetTimer->_ScrollMessage
    _DisplaySync->_MAX7219_SyncBuffer
    _MAX7219_SyncBuffer->_MAX7219_SetRegister
    _SaveTime->___awmod
    ___lbmod->___awdiv
    ___awmod->___awdiv
    _GetLastTime->_Read_b_eep
    _DisplayValue->___lwdiv
    ___lwmod->___lwdiv
    _MAX7219_SetScanLimit->_MAX7219_SetRegister
    _MAX7219_SetIntensity->_MAX7219_SetRegister
    _MAX7219_SetDecode->_MAX7219_SetRegister
    _MAX7219_Init->_MAX7219_Clear
    _MAX7219_NormalMode->_MAX7219_SetRegister
    _MAX7219_Clear->_MAX7219_SetRegister
    _MAX7219_TurnOn->_MAX7219_SetRegister
    _MAX7219_Shutdown->_MAX7219_SetRegister
    _MAX7219_SetRegister->_MAX7219_ShiftByte

Critical Paths under _IntHigh in COMRAM

    i2_DisplaySync->i2_MAX7219_SyncBuffer
    i2_MAX7219_SyncBuffer->i2_MAX7219_SetRegister
    i2_MAX7219_SetRegister->i2_MAX7219_ShiftByte

Critical Paths under _IntLow in COMRAM

    _TMR0_ISR->i1___lwmod

Critical Paths under _main in BANK0

    _main->_SetTimer
    _TimerOn->_DisplayValue
    _SetTimer->_DisplayValue
    _SaveTime->___awmod
    ___lbmod->___awdiv
    ___awmod->___awdiv
    _DisplayValue->___lwmod
    _InitDisplay->_MAX7219_New

Critical Paths under _IntHigh in BANK0

    None.

Critical Paths under _IntLow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IntHigh in BANK1

    None.

Critical Paths under _IntLow in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19116
                             _Buzzer
              _ClearButtonsAndTimers
                         _ClearFlags
                          _DisplayOn
                       _FlashDisplay
                      _HandleButtons
                        _InitDisplay
                         _InitSystem
                            _NoTimer
                      _ScrollMessage
                           _SetTimer
                            _TimerOn
 ---------------------------------------------------------------------------------
 (1) _TimerOn                                              0     0      0    1559
                         _DisplayMsg
                       _DisplayValue
 ---------------------------------------------------------------------------------
 (1) _SetTimer                                             4     4      0    8349
                                             11 BANK0      4     4      0
              _ClearButtonsAndTimers
                          _DisplayDP
                         _DisplayMsg
                       _DisplayValue
                        _GetLastTime
                           _SaveTime
                      _ScrollMessage
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ScrollMessage                                        8     8      0    1362
                                             26 COMRAM     2     2      0
                                              0 BANK0      6     6      0
                       _DisplayClear
                        _DisplaySync
                   _ShiftDisplayLeft
 ---------------------------------------------------------------------------------
 (3) _ShiftDisplayLeft                                     1     1      0      90
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _DisplaySync                                          0     0      0     819
                 _MAX7219_SyncBuffer
 ---------------------------------------------------------------------------------
 (4) _MAX7219_SyncBuffer                                   1     1      0     819
                                             25 COMRAM     1     1      0
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (2) _SaveTime                                             3     1      2    2686
                                             27 COMRAM     1     1      0
                                              8 BANK0      2     0      2
                           _Busy_eep
                        _Write_b_eep
                            ___awdiv
                            ___awmod
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     287
                                             25 COMRAM     1     0      1
                                              4 BANK0      3     3      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     936
                                             25 COMRAM     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     812
                                             21 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     452
                                             21 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetLastTime                                          7     5      2     249
                                             23 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      86
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DisplayValue                                         6     4      2    1364
                                              5 BANK0      6     4      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     619
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DisplayMsg                                           6     6      0     195
                                             21 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _DisplayDP                                            1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NoTimer                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSystem                                           0     0      0       0
                        _InitButtons
                         _InitBuzzer
                        _InitEncoder
                      _InitInterrupt
                     _InitOscillator
                           _InitPins
                          _InitRelay
                      _InitStuctures
                           _InitTMR0
                           _InitTMR1
                           _InitTMR3
 ---------------------------------------------------------------------------------
 (2) _InitTMR3                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitTMR1                                             0     0      0       0
                         _TMR1_Start
 ---------------------------------------------------------------------------------
 (3) _TMR1_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitTMR0                                             0     0      0       0
                         _TMR0_Start
 ---------------------------------------------------------------------------------
 (3) _TMR0_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitStuctures                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitRelay                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitEncoder                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitBuzzer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitDisplay                                          0     0      0    4662
                        _MAX7219_New
 ---------------------------------------------------------------------------------
 (2) _MAX7219_New                                          2     2      0    4662
                                              0 BANK0      2     2      0
                       _MAX7219_Init
                  _MAX7219_SetDecode
               _MAX7219_SetIntensity
               _MAX7219_SetScanLimit
                     _MAX7219_TurnOn
 ---------------------------------------------------------------------------------
 (3) _MAX7219_SetScanLimit                                 1     1      0     750
                                             25 COMRAM     1     1      0
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (3) _MAX7219_SetIntensity                                 1     1      0     750
                                             25 COMRAM     1     1      0
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (3) _MAX7219_SetDecode                                    1     1      0     750
                                             25 COMRAM     1     1      0
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (3) _MAX7219_Init                                         0     0      0    1592
                      _MAX7219_Clear
                 _MAX7219_NormalMode
 ---------------------------------------------------------------------------------
 (4) _MAX7219_NormalMode                                   0     0      0     728
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (4) _MAX7219_Clear                                        2     2      0     864
                                             25 COMRAM     2     2      0
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (1) _HandleButtons                                        2     2      0     910
                                             25 COMRAM     2     2      0
              _ClearButtonsAndTimers
                       _DisplayClear
                          _DisplayOn
 ---------------------------------------------------------------------------------
 (3) _DisplayClear                                         1     1      0      68
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearButtonsAndTimers                                1     1      0      90
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _FlashDisplay                                         0     0      0    1456
                         _DisplayOff
                          _DisplayOn
 ---------------------------------------------------------------------------------
 (2) _DisplayOn                                            0     0      0     728
                     _MAX7219_TurnOn
 ---------------------------------------------------------------------------------
 (3) _MAX7219_TurnOn                                       0     0      0     728
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (2) _DisplayOff                                           0     0      0     728
                   _MAX7219_Shutdown
 ---------------------------------------------------------------------------------
 (3) _MAX7219_Shutdown                                     0     0      0     728
                _MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (5) _MAX7219_SetRegister                                  2     1      1     728
                                             23 COMRAM     2     1      1
                  _MAX7219_ShiftByte
 ---------------------------------------------------------------------------------
 (6) _MAX7219_ShiftByte                                    2     2      0      70
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ClearFlags                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _IntLow                                               9     9      0     323
                                              5 COMRAM     9     9      0
                         _EncoderISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0     308
                     _NewButtonCheck
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (9) i1___lwmod                                            5     1      4     143
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _NewButtonCheck                                       3     3      0     165
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) _EncoderISR                                           3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _IntHigh                                             2     2      0     231
                                             19 COMRAM     2     2      0
                           _TMR1_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR3_ISR                                            0     0      0     231
                      i2_DisplaySync
 ---------------------------------------------------------------------------------
 (12) i2_DisplaySync                                       0     0      0     231
               i2_MAX7219_SyncBuffer
 ---------------------------------------------------------------------------------
 (13) i2_MAX7219_SyncBuffer                                1     1      0     231
                                             18 COMRAM     1     1      0
              i2_MAX7219_SetRegister
 ---------------------------------------------------------------------------------
 (14) i2_MAX7219_SetRegister                               2     1      1     140
                                             16 COMRAM     2     1      1
                i2_MAX7219_ShiftByte
 ---------------------------------------------------------------------------------
 (15) i2_MAX7219_ShiftByte                                 2     2      0      70
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TMR1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer
   _ClearButtonsAndTimers
   _ClearFlags
   _DisplayOn
     _MAX7219_TurnOn
       _MAX7219_SetRegister
         _MAX7219_ShiftByte
   _FlashDisplay
     _DisplayOff
       _MAX7219_Shutdown
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
     _DisplayOn
       _MAX7219_TurnOn
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
   _HandleButtons
     _ClearButtonsAndTimers
     _DisplayClear
     _DisplayOn
       _MAX7219_TurnOn
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
   _InitDisplay
     _MAX7219_New
       _MAX7219_Init
         _MAX7219_Clear
           _MAX7219_SetRegister
             _MAX7219_ShiftByte
         _MAX7219_NormalMode
           _MAX7219_SetRegister
             _MAX7219_ShiftByte
       _MAX7219_SetDecode
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
       _MAX7219_SetIntensity
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
       _MAX7219_SetScanLimit
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
       _MAX7219_TurnOn
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
   _InitSystem
     _InitButtons
     _InitBuzzer
     _InitEncoder
     _InitInterrupt
     _InitOscillator
     _InitPins
     _InitRelay
     _InitStuctures
     _InitTMR0
       _TMR0_Start
     _InitTMR1
       _TMR1_Start
     _InitTMR3
   _NoTimer
   _ScrollMessage
     _DisplayClear
     _DisplaySync
       _MAX7219_SyncBuffer
         _MAX7219_SetRegister
           _MAX7219_ShiftByte
     _ShiftDisplayLeft
   _SetTimer
     _ClearButtonsAndTimers
     _DisplayDP
     _DisplayMsg
     _DisplayValue
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _GetLastTime
       _Read_b_eep
     _SaveTime
       _Busy_eep
       _Write_b_eep
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___lbmod
         ___awdiv (ARG)
     _ScrollMessage
       _DisplayClear
       _DisplaySync
         _MAX7219_SyncBuffer
           _MAX7219_SetRegister
             _MAX7219_ShiftByte
       _ShiftDisplayLeft
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     ___wmul
   _TimerOn
     _DisplayMsg
     _DisplayValue
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 _IntLow (ROOT)
   _EncoderISR
   _TMR0_ISR
     _NewButtonCheck
     i1___lwmod

 _IntHigh (ROOT)
   _TMR1_ISR
   _TMR3_ISR
     i2_DisplaySync
       i2_MAX7219_SyncBuffer
         i2_MAX7219_SetRegister
           i2_MAX7219_ShiftByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      F       F       4        9.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1C      4A       1       77.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59       7        0.0%
DATA                 0      0      59       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Aug 11 04:34:04 2017

      i2MAX7219_SetRegister@reg 003A                              PL2 07B4                              PL4 07C2  
                            PL6 08CA                              PL8 0858                              l60 0670  
                            l63 0678                              l83 0F0C                    ___awdiv@sign 0061  
                            bsr 000FE0             ___wmul@multiplicand 0040                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                             PL10 08DA                             PL20 0712  
                           PL12 0700                             PL22 0AEE                             PL14 0496  
                           PL16 0592                             PL18 0AE0                             l300 054E  
                           l311 0A60                             l312 0A52                             l305 056A  
                           l326 0FCA                             l280 04D6                             l290 0514  
                           l294 0530                             l278 04BA                             l288 0506  
                           l297 053A                             l394 0DD8                             l299 0554  
                           l396 0DE0                             l397 0DE2                             l813 05B0  
                           l822 05D6                             l831 0604                             l832 063E  
                           l833 0628                             l825 05EC                             l809 05A8  
                           l834 0624                             l819 05C6                             l844 10CA  
                           l790 03D0                             l871 0CEE                             l791 03F6  
                           l783 0368                             l775 0302                             l784 039A  
                           l776 0336                             l768 02C0                             l777 0442  
                           l769 02BC                             l797 0468                             l799 0484  
                  __CFG_CPB$OFF 000000                             _PR2 000FCB                    __CFG_CPD$OFF 000000  
        __size_of_InitStuctures 0034             __end_of_GetLastTime 0B42         __size_of_NewButtonCheck 0098  
          __size_of_Write_b_eep 0034                    __CFG_BORV$19 000000                    ___awmod@sign 0043  
                           wreg 000FE8                    __CFG_IESO$ON 000000                DisplayMsg@fValue 0041  
                  __CFG_LVP$OFF 000000                            l2300 0AD4                            l3012 03B4  
                          l3200 0524                            l3106 05D0                            l3042 0422  
                          l3018 03C4                            l3132 0616                            l3036 0410  
                          l3046 0434                            l3222 056E                            l3208 0540  
                          l3224 058C                            l3082 0A78                            l3218 0564  
                          l3170 04CA                            l2292 0AC4                            l3148 0650  
                          l2604 0E40                            l3180 04E6                            l1389 0B82  
                          l2286 0AB2                            l2710 09B8                            l2702 09A0  
                          l1399 0C46                            l3184 04F0                            l2722 09E0  
                          l2714 09CA                            l2706 09AC                            l2730 0DB4  
                          l2554 0E86                            l3186 04F6                            l2660 0802  
                          l2708 09B4                            l3188 04FC                            l2590 0F7C  
                          l2814 0B90                            l2750 0B52                            l2670 081E  
                          l2654 07EC                            l2718 09D4                            l2568 0D60  
                          l2752 0B5A                            l2578 0D74                            l2762 0B78  
                          l2754 0B5E                            l2770 0C1E                            l2666 0812  
                          l2682 0842                            l2738 0DCA                            l2772 0C26  
                          l2668 081A                            l2836 0688                            l2828 0680  
                          l2852 06D8                            l2774 0C2A                            l2686 084E  
                          l2678 0838                            l2862 06EC                            l2848 06CC  
                          l2882 0E62                            l2778 0C3C                            l2698 098C  
                          l2858 06E2                            l2956 02AE                            l2966 02EA  
                          l2898 0B02                            l2994 035C                            l2988 034A  
                          STR_1 0288                            STR_2 0280                            STR_3 0296  
                          STR_4 0292                            STR_5 028E                            _LATA 000F89  
                          _LATB 000F8A                            _LATC 000F8B                            u1485 0CFA  
                          u1486 0CFC                            _TMR3 000FB2                            _WPUA 000F77  
                          _WPUB 000F78                            _flag 0019                            _main 04A4  
                          _buts 000D             i2_MAX7219_ShiftByte 0DF6                            _time 0004  
                          fsr1h 000FE2                            fsr2h 000FDA                            indf1 000FE7  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                    _ClearFlags 1098                   ??_InitEncoder 003E                   ??_InitDisplay 0044  
            MAX7219_ShiftByte@i 003F                            prodh 000FF4                            prodl 000FF3  
                          start 007E                   __CFG_FOSC$IRC 000000                   ??_InitButtons 003E  
            ScrollMessage@digit 0060                   _InitInterrupt 106C                 __end_of_IntHigh 0EC2  
               __end_of_NoTimer 0FD0                 __end_of_TimerOn 0AA4                _ShiftDisplayLeft 0E3E  
           __end_of_DisplaySync 10DA            ?i2_MAX7219_ShiftByte 0029                           ?_main 0029  
               __end_of___awdiv 0858                           _EEADR 000FA9                 __end_of___awmod 09EA  
               __end_of___lbmod 0DD2                           _ANSEL 000F7E                           _T0CON 000FD5  
               ___awdiv@divisor 0040                           _T1CON 000FCD                           _T2CON 000FCA  
                         _LATC1 007C59                           _T3CON 000FB1                           _LATC3 007C5B  
                         _LATB7 007C57                           _LATC6 007C5E                           _LATC7 007C5F  
                    _EncoderISR 09EA                 __end_of___lwdiv 0B8C                           i1l221 0058  
                         i1l218 0048                 __end_of___lwmod 0C50                           i2l212 0EAE  
                         i2l215 0EB8                           i1l650 0C08                           i1l752 078E  
                         i2l394 0DFC                           i2l396 0E04                           i2l397 0E06  
               ___awdiv@counter 0060                  __CFG_BBSIZ$OFF 000000                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR1L 000FCE  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
              DisplayValue@hund 0068                DisplayValue@ones 006A                DisplayValue@tens 0069  
                    Buzzer@step 0017                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 SaveTime@value 0044                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000     __size_of_MAX7219_NormalMode 0008                      _DisplayOff 10BA  
              __end_of_TMR0_ISR 0C12                      _DisplayMsg 0B8C                __end_of_TMR1_ISR 0E3E  
                 __CFG_WRTB$OFF 000000                __end_of_TMR3_ISR 0F64              i1___lwmod@dividend 0029  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  Read_b_eep@badd 003E  
                   ?_TMR0_Start 0029                  __CFG_EBTRB$OFF 000000                     ?_TMR1_Start 0029  
                         _coder 0045          Write_b_eep@GIE_BIT_VAL 0041                           _table 0266  
          __end_of_FlashDisplay 0F1A         ScrollMessage@delayCount 0061                  __CFG_BOREN$OFF 000000  
                         tablat 000FF5           __end_of_ScrollMessage 0700                           plusw2 000FDB  
          __end_of_MAX7219_Init 0F34                           status 000FD8                   _InitStuctures 0D00  
         __end_of_HandleButtons 0664              __size_ofi1___lwmod 003E                  __CFG_MCLRE$OFF 000000  
                ?_InitInterrupt 0029                      _InitBuzzer 0EE2                 __initialization 0F64  
                  __end_of_main 0592             __end_of_InitEncoder 0D5E                __end_of_InitTMR0 1030  
              __end_of_InitTMR1 1050                __end_of_InitTMR3 0FE4             __end_of_InitDisplay 10AA  
                    _InitSystem 0C50                      _Read_b_eep 100C                     _GetLastTime 0AF8  
              __end_of_InitPins 0F4C                __end_of_Busy_eep 10D0             ScrollMessage@string 0063  
       MAX7219_SetDecode@digits 0042  __size_of_ClearButtonsAndTimers 0022             __end_of_InitButtons 108E  
 __end_of_ClearButtonsAndTimers 0E82           ??i2_MAX7219_ShiftByte 0037            __size_of_MAX7219_New 0014  
                        ??_main 0045                __end_of_SaveTime 0972     __size_of_MAX7219_SyncBuffer 0020  
                 __activetblptr 000002                __end_of_SetTimer 0496                  __CFG_PLLEN$OFF 000000  
  __size_of_MAX7219_SetRegister 0016            __end_of_DisplayClear 0F90              __size_of_DisplayDP 0010  
          __end_of_DisplayValue 08CA              __size_of_DisplayOn 0008           i2MAX7219_SyncBuffer@i 003B  
          i2_MAX7219_SyncBuffer 0EC2                  _InitOscillator 0FE4                          _EEDATA 000FA8  
                        _CCPR1L 000FBE                          _EECON2 000FA7                ___awdiv@dividend 003E  
                        _ANSELH 000F7F                          i1l2030 0CB8                          i1l2022 0C9A  
                        i1l2024 0CA2                          i1l2026 0CA6                          i1l2070 0A3A  
                        i1l2054 09EE                          i1l2126 0C0C                          i1l1399 0CC2  
                        i1l1954 0742                          i1l1968 07AA                  __CFG_WDTEN$OFF 000000  
                        i2l2498 0EC6              __size_of_InitRelay 0006                          _TRISC0 007CA0  
                        _TRISC1 007CA1                          _TRISC3 007CA3                          _TRISC5 007CA5  
                        _TRISB7 007C9F                          _TRISC6 007CA6                          _TRISC7 007CA7  
                ?_InitStuctures 0029                     Buzzer@count 0007                     ?_ClearFlags 0029  
                     ??_IntHigh 003C               ?_MAX7219_Shutdown 0029                       ??_NoTimer 003E  
           SetTimer@switchState 006D           i2_MAX7219_SetRegister 0FA6                          _IntLow 0018  
                        _Buzzer 0AA4                  __CFG_PWRTEN$ON 000000                  __CFG_XINST$OFF 000000  
            ??_MAX7219_Shutdown 0042                       ??_TimerOn 0045                     _DisplaySync 10D6  
                        ___wmul 0D86                       ??___awdiv 0042                  __CFG_STVREN$ON 000000  
                        _pCount 0011                       ??___awmod 0042                       ??___lbmod 0043  
           __size_of_TMR0_Start 0004             __size_of_TMR1_Start 0004                       ??___lwdiv 0042  
                     ??___lwmod 0045                          _hwflag 001A                          clear_0 0F6A  
              ___awdiv@quotient 0062                 ___awmod@divisor 0066                          _signal 001C  
               ___awmod@counter 0042                     ?_EncoderISR 0029                  _NewButtonCheck 071C  
       __size_of_MAX7219_TurnOn 000A               __end_ofi1___lwmod 0CCC          __end_of_InitOscillator 0FF8  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                     ?_DisplayOff 0029                     ?_DisplayMsg 0029  
         ?i2_MAX7219_SyncBuffer 0029           __end_of_MAX7219_Clear 0D86         MAX7219_SetRegister@data 0040  
        ClearButtonsAndTimers@i 003E                 __CFG_HFOFST$OFF 000000                 ___lbmod@divisor 0042  
                    __accesstop 0060         __end_of__initialization 0F70                 ___lbmod@counter 0065  
               ??_InitInterrupt 003E                     _InitEncoder 0D34                     _InitDisplay 10A2  
                   _InitButtons 1084                     ?_InitBuzzer 0029                  __pcstackCOMRAM 0029  
             __end_of_DisplayDP 1040               __end_of_DisplayOn 10BA                       ?_TMR0_ISR 0029  
                     ?_TMR1_ISR 0029                       ?_TMR3_ISR 0029                     ?_InitSystem 0029  
                   ?_Read_b_eep 003E                   __end_of_table 0276                      __end_ofPL2 07C2  
                    __end_ofPL4 07D2                      __end_ofPL6 08DA                      __end_ofPL8 0862  
        __end_of_NewButtonCheck 07B4                 __CFG_PCLKEN$OFF 000000               __end_of_InitRelay 10D6  
           __size_of_ClearFlags 000A           __size_of_FlashDisplay 001C                 ?_InitOscillator 0029  
         __size_of_MAX7219_Init 001A   __size_of_MAX7219_SetScanLimit 000E                 ??_InitStuctures 003E  
                     ?_InitTMR0 0029                       ?_InitTMR1 0029                       ?_InitTMR3 0029  
                     ?_InitPins 0029                       ?_Busy_eep 0029   __size_of_MAX7219_SetIntensity 000E  
      __end_of_ShiftDisplayLeft 0E60                      __pnvCOMRAM 0045          ?i2_MAX7219_SetRegister 0039  
           __size_of_EncoderISR 0060                       ?_SaveTime 0068        i2MAX7219_ShiftByte@value 0037  
                       ?_IntLow 0029                       ?_SetTimer 0029                         ?_Buzzer 0029  
         __end_ofi2_DisplaySync 10E6             __size_of_DisplayOff 0008             __size_of_DisplayMsg 0046  
                       ?___wmul 003E                      ??_TMR0_ISR 002E                      ??_TMR1_ISR 0037  
             _MAX7219_SetDecode 1078                      ??_TMR3_ISR 003C                    _FlashDisplay 0EFE  
                       _CCP1CON 000FBD                GetLastTime@scale 0062                GetLastTime@value 0060  
            ?_MAX7219_SetDecode 0029                   ??_Write_b_eep 0041                 ?_NewButtonCheck 0029  
         __size_of_DisplayClear 0016                    _MAX7219_Init 0F1A               _MAX7219_ShiftByte 0DD2  
         __size_of_DisplayValue 0068                  MAX7219_Clear@i 0042              ?_MAX7219_ShiftByte 0029  
        ??i2_MAX7219_SyncBuffer 003B             ??_MAX7219_SetDecode 0042                    ??_TMR0_Start 003E  
             HandleButtons@wait 0042                    ??_TMR1_Start 003E             MAX7219_SyncBuffer@i 0042  
           __size_of_InitBuzzer 001C                         _PSTRCON 000FB9              DisplayValue@number 0065  
           ??_MAX7219_ShiftByte 003E             __size_of_InitSystem 003E                      ??_InitTMR0 003E  
                    ??_InitTMR1 003E                      ??_InitTMR3 003E             __size_of_Read_b_eep 0012  
                    ??_InitPins 003E                      ??_Busy_eep 003E                         _IntHigh 0008  
                       _NoTimer 0FBC                      ??_SaveTime 0044                      ??_SetTimer 0045  
                       __Hparam 0000             _MAX7219_SetRegister 0F90                         _t3Count 0013  
               __size_of_IntLow 0066                         __Lparam 0000       __end_of_MAX7219_SetDecode 1084  
               __size_of_Buzzer 003C                    _DisplayClear 0F7A                         _TimerOn 0A4A  
                SetTimer@amount 006E                    _DisplayValue 0862                         ___awdiv 07D2  
                EncoderISR@temp 002B                         ___awmod 0972                         ___lbmod 0DAC  
               __size_of___wmul 0026                    ?_GetLastTime 0040                         ___lwdiv 0B42  
                       ___lwmod 0C12                    __psmallconst 0200              __end_of_TMR0_Start 10E2  
            __end_of_TMR1_Start 10DE       __end_of_MAX7219_ShiftByte 0DF6                         __pcinit 0F64  
                       __ramtop 0200                         __ptext0 04A4                         __ptext1 0A4A  
                       __ptext2 029C                         __ptext3 0D86                         __ptext4 0664  
                       __ptext5 0E3E                         __ptext6 10D6                         __ptext7 0E82  
                       __ptext8 08EC                         __ptext9 0DAC                       _T0CONbits 000FD5  
                     _T1CONbits 000FCD                  _MAX7219_TurnOn 108E      __end_of_MAX7219_NormalMode 10B2  
                     _T3CONbits 000FB1            ?_MAX7219_SetRegister 0040                ___awmod@dividend 0064  
           __end_of_Write_b_eep 0D00                  __pintcode_body 0EA2            end_of_initialization 0F70  
                 __Lmediumconst 0000                         int_func 0EA2                    ??_ClearFlags 003E  
          i2MAX7219_ShiftByte@i 0038     __end_ofi2_MAX7219_ShiftByte 0E1A                    ?_DisplaySync 0029  
                     _RCSTAbits 000FAB                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                   ??_MAX7219_New 0044      __end_of_MAX7219_SyncBuffer 0EA2  
        __end_of_MAX7219_TurnOn 1098                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82          __size_of_ScrollMessage 009C                    ??_EncoderISR 0029  
     __size_of_MAX7219_Shutdown 0008           _ClearButtonsAndTimers 0E60           ??_MAX7219_SetRegister 0041  
            __end_of_ClearFlags 10A2                ___lbmod@dividend 0064          __size_of_HandleButtons 00C4  
                     _TRISBbits 000F93                    ??_DisplayOff 0042                    ??_DisplayMsg 003E  
                     i1___lwmod 0C8E                     _CM1CON0bits 000F6D                     ___lbmod@rem 0066  
                   _CM2CON0bits 000F6B                    ?_InitEncoder 0029                    ?_InitDisplay 0029  
                  ?_InitButtons 0029              __end_of_EncoderISR 0A4A                    ??_InitBuzzer 003E  
    __size_of_MAX7219_SetDecode 000C                  __end_of_IntLow 007E                  __end_of_Buzzer 0AE0  
                   _ECCP1ASbits 000FB6                    ??_InitSystem 003E                    ??_Read_b_eep 0040  
            __end_of_DisplayOff 10C2              __end_of_DisplayMsg 0BD2      __size_of_MAX7219_ShiftByte 0024  
                __end_of___wmul 0DAC                    SaveTime@time 0068                ??_InitOscillator 003E  
                     _DisplayDP 1030               __size_of_TMR0_ISR 0040               __size_of_TMR1_ISR 0024  
               ?_MAX7219_TurnOn 0029                       _DisplayOn 10B2               __size_of_TMR3_ISR 0018  
             i1___lwmod@divisor 002B                     _Write_b_eep 0CCC               i1___lwmod@counter 002D  
           MAX7219_Clear@i_1175 0043             __end_of_MAX7219_New 100C                     __end_ofPL10 08EC  
                   __end_ofPL20 071C                     __end_ofPL12 0712                     __end_ofPL22 0AF8  
                   __end_ofPL14 04A4                     __end_ofPL16 05A0                     __end_ofPL18 0AEE  
           start_initialization 0F64                       _InitRelay 10D0             __end_of_digitsArray 0280  
                    ?i1___lwmod 0029              __end_of_InitBuzzer 0EFE         ??i2_MAX7219_SetRegister 003A  
            __end_of_InitSystem 0C8E              __end_of_Read_b_eep 101E                   _ScrollMessage 0664  
             ?_ShiftDisplayLeft 0029               __size_of_InitTMR0 0012               __size_of_InitTMR1 0010  
             __size_of_InitTMR3 0014               __size_of_InitPins 0018               __size_of_Busy_eep 0006  
                 _HandleButtons 05A0                        ??_IntLow 002E              ??_ShiftDisplayLeft 003E  
                      ??_Buzzer 003E           __end_of_InitInterrupt 1078                    SetTimer@wait 006B  
              ??_NewButtonCheck 0029               __size_of_SaveTime 0086               __size_of_SetTimer 01FA  
     i2MAX7219_SetRegister@data 0039                        ??___wmul 0042    __end_of_MAX7219_SetScanLimit 105E  
        __size_of_MAX7219_Clear 0028                SetTimer@holdTime 000B    __end_of_MAX7219_SetIntensity 106C  
     MAX7219_SetScanLimit@limit 0042                      ?_DisplayDP 0029                      ?_DisplayOn 0029  
        ?_ClearButtonsAndTimers 0029            __size_of_GetLastTime 004A          MAX7219_SetRegister@reg 0041  
                   __pbssCOMRAM 0001                   __pcstackBANK0 0060                      ?_InitRelay 0029  
           __end_of__stringdata 029A                  ?_ScrollMessage 0029           __end_of_InitStuctures 0D34  
                      ?_IntHigh 0029               ShiftDisplayLeft@x 003E                  ?_HandleButtons 0029  
                      ?_NoTimer 0029                ___lwdiv@dividend 003E                        ?_TimerOn 0029  
                     __pintcode 0008                 GetLastTime@read 0063                        ?___awdiv 003E  
                      ?___awmod 0064                        ?___lbmod 0042                        ?___lwdiv 003E  
                     _ledButton 0023                        ?___lwmod 0060                     _MAX7219_New 0FF8  
          __size_of_DisplaySync 0004                     __pintcodelo 0018                     _digitsArray 0276  
                     _mainCount 000F                _MAX7219_Shutdown 10C2                       _maxBuffer 0001  
                     _mainState 001B                     __smallconst 0200                  DisplayDP@digit 003E  
 __size_ofi2_MAX7219_SyncBuffer 0020                ___lwdiv@quotient 0042                     ??i1___lwmod 002D  
                 _MAX7219_Clear 0D5E                    GetLastTime@i 0064          __size_ofi2_DisplaySync 0004  
            _MAX7219_NormalMode 10AA                  ___wmul@product 0042                        _IOCBbits 000F7A  
                      _IPR1bits 000F9F                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
           ?_MAX7219_NormalMode 0029            __size_of_InitEncoder 002A            __size_of_InitDisplay 0008  
                      _RCONbits 000FD0                __CFG_WDTPS$32768 000000            __size_of_InitButtons 000A  
                      _TMR0_ISR 0BD2                        _TMR1_ISR 0E1A                        _TMR3_ISR 0F4C  
                   ??_DisplayDP 003E                     ??_DisplayOn 0042                      _ADCON0bits 000FC2  
                   __stringdata 0280               ___wmul@multiplier 003E                 Write_b_eep@badd 003E  
               Write_b_eep@bdat 0040                        _WPUBbits 000F78            ??_MAX7219_NormalMode 0042  
                   ??_InitRelay 003E                  ?_MAX7219_Clear 0029              _MAX7219_SyncBuffer 0E82  
               ??_ScrollMessage 0043                     _INTCON2bits 000FF1            _MAX7219_SetScanLimit 1050  
                      _InitTMR0 101E                        _InitTMR1 1040                        _InitTMR3 0FD0  
                      _InitPins 0F34                        _Busy_eep 10CA                 ??_HandleButtons 0042  
          _MAX7219_SetIntensity 105E             __end_of_segmentFont 0266             ?_MAX7219_SyncBuffer 0029  
                    _EECON1bits 000FA6                        _SaveTime 08EC                __size_of_IntHigh 0EBA  
                      _SetTimer 029C                        __Hrparam 0000                __size_of_NoTimer 0014  
                      __Lrparam 0000          HandleButtons@holdCount 0009                ??_MAX7219_TurnOn 0042  
              __size_of_TimerOn 005A                   i2_DisplaySync 10E2     __end_of_MAX7219_SetRegister 0FA6  
              __size_of___awdiv 0086                __size_of___awmod 0078                __size_of___lbmod 0026  
              __size_of___lwdiv 004A                 EncoderISR@ticks 0018                __size_of___lwmod 003E  
                  ?_Write_b_eep 003E            ??_MAX7219_SyncBuffer 0042    __size_ofi2_MAX7219_ShiftByte 0024  
               ___lwdiv@divisor 0040                 ___lwdiv@counter 0044                        __ptext10 0972  
                      __ptext11 07D2                        __ptext20 1030                        __ptext12 0CCC  
                      __ptext21 0FBC                        __ptext13 10CA                        __ptext30 0F34  
                      __ptext22 0C50                        __ptext14 0AF8                        __ptext31 0FE4  
                      __ptext23 0FD0                        __ptext15 100C                        __ptext40 1078  
                      __ptext32 106C                        __ptext24 1040                        __ptext16 0862  
                      __ptext41 0F1A                        __ptext33 0D34                        __ptext25 10DA  
                      __ptext17 0C12                        __ptext50 10BA                        __ptext42 10AA  
                      __ptext34 0EE2                        __ptext26 101E                        __ptext18 0B42  
                      __ptext51 10C2                        __ptext43 0D5E                        __ptext35 1084  
                      __ptext27 10DE                        __ptext19 0B8C                        __ptext60 09EA  
                      __ptext52 0F90                        __ptext44 05A0                        __ptext36 10A2  
                      __ptext28 0D00                        __ptext53 0DD2                        __ptext45 0F7A  
                      __ptext37 0FF8                        __ptext29 10D0                        __ptext62 0F4C  
                      __ptext54 1098                        __ptext46 0E60                        __ptext38 1050  
                      __ptext63 10E2                        __ptext55 0AA4                        __ptext47 0EFE  
                      __ptext39 105E                        __ptext64 0EC2                        __ptext48 10B2  
                      __ptext65 0FA6                        __ptext57 0BD2                        __ptext49 108E  
                      __ptext66 0DF6                        __ptext58 0C8E                        __ptext67 0E1A  
                      __ptext59 071C           ?_MAX7219_SetScanLimit 0029                     _OSCCON2bits 000FD2  
         ?_MAX7219_SetIntensity 0029  __size_ofi2_MAX7219_SetRegister 0016   __end_ofi2_MAX7219_SetRegister 0FBC  
                 __size_of_main 00EE                   DisplayClear@x 003E                        _tmrCount 0015  
                ?i2_DisplaySync 0029         ??_ClearButtonsAndTimers 003E                   ?_FlashDisplay 0029  
                ScrollMessage@i 0065                  ScrollMessage@x 0064                   DisplayMsg@msg 0042  
     __size_of_ShiftDisplayLeft 0022                   ?_MAX7219_Init 0029                     _OSCTUNEbits 000F9B  
                    _INTCONbits 000FF2                 ??_MAX7219_Clear 0042                   _encoderButton 001D  
                   _segmentFont 0201                        intlevel1 0000                        intlevel2 0000  
              ___lwmod@dividend 0060                    _VREFCON0bits 000FBA                    _VREFCON1bits 000FBB  
      __end_of_MAX7219_Shutdown 10CA                      _OSCCONbits 000FD3                   ?_DisplayClear 0029  
                 ?_DisplayValue 0065                  ??_FlashDisplay 0042          MAX7219_ShiftByte@value 003E  
                 ??_GetLastTime 0042                    ?_MAX7219_New 0029                  ??_MAX7219_Init 0044  
               ___lwmod@divisor 0062                     _PSTRCONbits 000FB9                 ___lwmod@counter 0064  
                    _SRCON0bits 000F68                     _SSPCON1bits 000FC6          ??_MAX7219_SetScanLimit 0042  
                   DisplayMsg@i 0043          __size_of_InitInterrupt 000C                      _TMR0_Start 10DE  
 MAX7219_SetIntensity@intensity 0042                      _TMR1_Start 10DA         __size_of_InitOscillator 0014  
        ??_MAX7219_SetIntensity 0042                 NewButtonCheck@i 002B                  ??_DisplayClear 003E  
               ??i2_DisplaySync 003C                  ??_DisplayValue 0067    __end_ofi2_MAX7219_SyncBuffer 0EE2  
                 ??_DisplaySync 0043  
